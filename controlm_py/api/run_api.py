# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from controlm_py.api_client import ApiClient


class RunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_workload_policy(self, policy, **kwargs):  # noqa: E501
        """activate workload policy  # noqa: E501

        Activate a workload policy, supports wildcard in names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_workload_policy(policy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy: The policy name to be activated. Case sensitive. Wildcards can be used. (required)
        :param str ctm: Optional Control-M Server filter.
        :param str server: Optional Control-M Server filter.
        :return: WorkloadPolicyStateList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_workload_policy_with_http_info(policy, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_workload_policy_with_http_info(policy, **kwargs)  # noqa: E501
            return data

    def activate_workload_policy_with_http_info(self, policy, **kwargs):  # noqa: E501
        """activate workload policy  # noqa: E501

        Activate a workload policy, supports wildcard in names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_workload_policy_with_http_info(policy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy: The policy name to be activated. Case sensitive. Wildcards can be used. (required)
        :param str ctm: Optional Control-M Server filter.
        :param str server: Optional Control-M Server filter.
        :return: WorkloadPolicyStateList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy', 'ctm', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_workload_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy' is set
        if ('policy' not in params or
                params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `activate_workload_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy' in params:
            path_params['policy'] = params['policy']  # noqa: E501

        query_params = []
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/workloadpolicy/{policy}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkloadPolicyStateList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_event(self, body, server, **kwargs):  # noqa: E501
        """Add a new  event.  # noqa: E501

        Add a new  event. date may be of format MMDD, ODAT to set current controlm date, STAT to set no date. default value is ODAT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_event(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EventParam body: The defined event name. (required)
        :param str server: The Control-M Server hosting the event. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_event_with_http_info(body, server, **kwargs)  # noqa: E501
        else:
            (data) = self.add_event_with_http_info(body, server, **kwargs)  # noqa: E501
            return data

    def add_event_with_http_info(self, body, server, **kwargs):  # noqa: E501
        """Add a new  event.  # noqa: E501

        Add a new  event. date may be of format MMDD, ODAT to set current controlm date, STAT to set no date. default value is ODAT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_event_with_http_info(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EventParam body: The defined event name. (required)
        :param str server: The Control-M Server hosting the event. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_event`")  # noqa: E501
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `add_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/event/{server}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_resource(self, body, server, **kwargs):  # noqa: E501
        """Add a new pool resource.  # noqa: E501

        Add a new pool resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceParam body: The defined resource name. (required)
        :param str server: The Control-M Server hosting the resource. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_resource_with_http_info(body, server, **kwargs)  # noqa: E501
        else:
            (data) = self.add_resource_with_http_info(body, server, **kwargs)  # noqa: E501
            return data

    def add_resource_with_http_info(self, body, server, **kwargs):  # noqa: E501
        """Add a new pool resource.  # noqa: E501

        Add a new pool resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_resource_with_http_info(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceParam body: The defined resource name. (required)
        :param str server: The Control-M Server hosting the resource. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_resource`")  # noqa: E501
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `add_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/resource/{server}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_workload_policies(self, workloadpoliciesfile, **kwargs):  # noqa: E501
        """Add workload policies from definitions file  # noqa: E501

        Add workload policies from json definitions file to Control-M  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_workload_policies(workloadpoliciesfile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workloadpoliciesfile: (required)
        :return: WorkloadPoliciesFileResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_workload_policies_with_http_info(workloadpoliciesfile, **kwargs)  # noqa: E501
        else:
            (data) = self.add_workload_policies_with_http_info(workloadpoliciesfile, **kwargs)  # noqa: E501
            return data

    def add_workload_policies_with_http_info(self, workloadpoliciesfile, **kwargs):  # noqa: E501
        """Add workload policies from definitions file  # noqa: E501

        Add workload policies from json definitions file to Control-M  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_workload_policies_with_http_info(workloadpoliciesfile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workloadpoliciesfile: (required)
        :return: WorkloadPoliciesFileResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workloadpoliciesfile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_workload_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workloadpoliciesfile' is set
        if ('workloadpoliciesfile' not in params or
                params['workloadpoliciesfile'] is None):
            raise ValueError("Missing the required parameter `workloadpoliciesfile` when calling `add_workload_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workloadpoliciesfile' in params:
            local_var_files['workloadpoliciesfile'] = params['workloadpoliciesfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/workloadpolicies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkloadPoliciesFileResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bypass(self, body, job_id, **kwargs):  # noqa: E501
        """Bypass scheduling criterias definition  # noqa: E501

        Bypass scheduling criterias definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bypass(body, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BypassOptionAttributes body: The JSON file that contains definitions of bypass option attributes. (required)
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bypass_with_http_info(body, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bypass_with_http_info(body, job_id, **kwargs)  # noqa: E501
            return data

    def bypass_with_http_info(self, body, job_id, **kwargs):  # noqa: E501
        """Bypass scheduling criterias definition  # noqa: E501

        Bypass scheduling criterias definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bypass_with_http_info(body, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BypassOptionAttributes body: The JSON file that contains definitions of bypass option attributes. (required)
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bypass" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bypass`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `bypass`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/bypass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def confirm_job(self, job_id, **kwargs):  # noqa: E501
        """confirm a job  # noqa: E501

        confirm a job that waits for confirmation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.confirm_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.confirm_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.confirm_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def confirm_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """confirm a job  # noqa: E501

        confirm a job that waits for confirmation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.confirm_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method confirm_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `confirm_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/confirm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_workload_policy(self, policy, **kwargs):  # noqa: E501
        """deactivate a workload policy  # noqa: E501

        Deactivate a workload policy, supports wildcard in names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_workload_policy(policy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy: The policy name to be deactivated. Case sensitive. Wildcards can be used. (required)
        :param str ctm: Optional Control-M Server filter.
        :param str server: Optional Control-M Server filter.
        :return: WorkloadPolicyStateList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_workload_policy_with_http_info(policy, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_workload_policy_with_http_info(policy, **kwargs)  # noqa: E501
            return data

    def deactivate_workload_policy_with_http_info(self, policy, **kwargs):  # noqa: E501
        """deactivate a workload policy  # noqa: E501

        Deactivate a workload policy, supports wildcard in names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_workload_policy_with_http_info(policy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy: The policy name to be deactivated. Case sensitive. Wildcards can be used. (required)
        :param str ctm: Optional Control-M Server filter.
        :param str server: Optional Control-M Server filter.
        :return: WorkloadPolicyStateList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy', 'ctm', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_workload_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy' is set
        if ('policy' not in params or
                params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `deactivate_workload_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy' in params:
            path_params['policy'] = params['policy']  # noqa: E501

        query_params = []
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/workloadpolicy/{policy}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkloadPolicyStateList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_event(self, server, name, _date, **kwargs):  # noqa: E501
        """Delete a  event.  # noqa: E501

        Delete a  event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_event(server, name, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server: The Control-M Server hosting the event. (required)
        :param str name: event name (required)
        :param str _date: event date (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_event_with_http_info(server, name, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_event_with_http_info(server, name, _date, **kwargs)  # noqa: E501
            return data

    def delete_event_with_http_info(self, server, name, _date, **kwargs):  # noqa: E501
        """Delete a  event.  # noqa: E501

        Delete a  event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_event_with_http_info(server, name, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server: The Control-M Server hosting the event. (required)
        :param str name: event name (required)
        :param str _date: event date (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server', 'name', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `delete_event`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_event`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `delete_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/event/{server}/{name}/{date}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_job(self, job_id, **kwargs):  # noqa: E501
        """mark job as deleted  # noqa: E501

        mark delete as deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def delete_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """mark job as deleted  # noqa: E501

        mark delete as deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `delete_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_resource(self, server, name, **kwargs):  # noqa: E501
        """Delete a pool resource.  # noqa: E501

        Delete a pool resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource(server, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server: The Control-M Server hosting the resource. (required)
        :param str name: Resource name (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resource_with_http_info(server, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resource_with_http_info(server, name, **kwargs)  # noqa: E501
            return data

    def delete_resource_with_http_info(self, server, name, **kwargs):  # noqa: E501
        """Delete a pool resource.  # noqa: E501

        Delete a pool resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resource_with_http_info(server, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server: The Control-M Server hosting the resource. (required)
        :param str name: Resource name (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `delete_resource`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/resource/{server}/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_variables(self, body, server, **kwargs):  # noqa: E501
        """Delete variables from the server.  # noqa: E501

        Delete variables from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VariableNames body: Variables definition file. (required)
        :param str server: The server that hosts the variables. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_variables_with_http_info(body, server, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_variables_with_http_info(body, server, **kwargs)  # noqa: E501
            return data

    def delete_variables_with_http_info(self, body, server, **kwargs):  # noqa: E501
        """Delete variables from the server.  # noqa: E501

        Delete variables from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_with_http_info(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VariableNames body: Variables definition file. (required)
        :param str server: The server that hosts the variables. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_variables`")  # noqa: E501
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `delete_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/variables/{server}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workload_policy(self, workloadpolicy_name, **kwargs):  # noqa: E501
        """delete workloadpolicy  # noqa: E501

        Delete workloadpolicy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workload_policy(workloadpolicy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workloadpolicy_name: The name of the workloadPolicy to be deleted. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workload_policy_with_http_info(workloadpolicy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workload_policy_with_http_info(workloadpolicy_name, **kwargs)  # noqa: E501
            return data

    def delete_workload_policy_with_http_info(self, workloadpolicy_name, **kwargs):  # noqa: E501
        """delete workloadpolicy  # noqa: E501

        Delete workloadpolicy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workload_policy_with_http_info(workloadpolicy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workloadpolicy_name: The name of the workloadPolicy to be deleted. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workloadpolicy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workload_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workloadpolicy_name' is set
        if ('workloadpolicy_name' not in params or
                params['workloadpolicy_name'] is None):
            raise ValueError("Missing the required parameter `workloadpolicy_name` when calling `delete_workload_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workloadpolicy_name' in params:
            path_params['workloadpolicyName'] = params['workloadpolicy_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/workloadpolicy/{workloadpolicyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def free_job(self, job_id, **kwargs):  # noqa: E501
        """free an already held the job  # noqa: E501

        free the job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.free_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.free_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.free_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def free_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """free an already held the job  # noqa: E501

        free the job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.free_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method free_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `free_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/free', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_active_job(self, job_id, **kwargs):  # noqa: E501
        """get active job  # noqa: E501

        get the active job's data by job's order ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_active_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_active_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """get active job  # noqa: E501

        get the active job's data by job's order ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_active_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_active_services(self, **kwargs):  # noqa: E501
        """Get SLA active services  # noqa: E501

        Get all SLA active services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_services(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ActiveServices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_services_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_active_services_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_active_services_with_http_info(self, **kwargs):  # noqa: E501
        """Get SLA active services  # noqa: E501

        Get all SLA active services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_services_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ActiveServices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_services" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/services/sla', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveServices',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_detailed_workload_policies(self, **kwargs):  # noqa: E501
        """get full workLoad policies data that match the search criteria.  # noqa: E501

        get full workLoad policies data as json code that match the requested search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_detailed_workload_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_detailed_workload_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_detailed_workload_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_detailed_workload_policies_with_http_info(self, **kwargs):  # noqa: E501
        """get full workLoad policies data that match the search criteria.  # noqa: E501

        get full workLoad policies data as json code that match the requested search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_detailed_workload_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_detailed_workload_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/workloadpolicies/detailed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events(self, **kwargs):  # noqa: E501
        """Get all events records for specific search.  # noqa: E501

        Get all events records for specific search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: Control-M Server filter.
        :param str server: Control-M Server filter.
        :param str name: The event name filter.
        :param str _date: The event date filter.
        :param int limit: maximum events to fetch (default 1000).
        :return: EventSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_events_with_http_info(self, **kwargs):  # noqa: E501
        """Get all events records for specific search.  # noqa: E501

        Get all events records for specific search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: Control-M Server filter.
        :param str server: Control-M Server filter.
        :param str name: The event name filter.
        :param str _date: The event date filter.
        :param int limit: maximum events to fetch (default 1000).
        :return: EventSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'server', 'name', '_date', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_timeline(self, **kwargs):  # noqa: E501
        """Sends a request to get the schedule and returns a poll ID to track the status of the request.  # noqa: E501

        Sends a request to get the schedule and returns a poll ID to track the status of the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_timeline(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M/server name.
        :param str folder: Name of the folder being requested.
        :param str rbc: Name of the RuleBasedCalendar being requested.
        :param str jobs: Specifies the job(s) within the folder. Defaults to all jobs if not specified. Use '*' as a wildcard for multiple jobs.
        :param str library: The name of the z/OS library that contains the jobs.
        :param str filter_type: The type of filter to apply. Options are 'year' or 'relativeMonths'. Defaults to 'relativeMonths'.
        :param int year: Used only when filterType is 'year'. Specifies a particular year and returns a five-year schedule centered around the given year (e.g., input 2024 returns 2022-2026). Defaults to the current year.
        :param int _from: Used only when filterType is 'relativeMonths'. Specifies the start of the range in months relative to the current month. Minimum value is -24. Defaults to 0 (current month).
        :param int to: Used only when filterType is 'relativeMonths'. Specifies the end of the range in months relative to the current month. Minimum value is +24. Defaults to 11.
        :return: ForecastTimelineResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_forecast_timeline_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_timeline_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_forecast_timeline_with_http_info(self, **kwargs):  # noqa: E501
        """Sends a request to get the schedule and returns a poll ID to track the status of the request.  # noqa: E501

        Sends a request to get the schedule and returns a poll ID to track the status of the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_forecast_timeline_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M/server name.
        :param str folder: Name of the folder being requested.
        :param str rbc: Name of the RuleBasedCalendar being requested.
        :param str jobs: Specifies the job(s) within the folder. Defaults to all jobs if not specified. Use '*' as a wildcard for multiple jobs.
        :param str library: The name of the z/OS library that contains the jobs.
        :param str filter_type: The type of filter to apply. Options are 'year' or 'relativeMonths'. Defaults to 'relativeMonths'.
        :param int year: Used only when filterType is 'year'. Specifies a particular year and returns a five-year schedule centered around the given year (e.g., input 2024 returns 2022-2026). Defaults to the current year.
        :param int _from: Used only when filterType is 'relativeMonths'. Specifies the start of the range in months relative to the current month. Minimum value is -24. Defaults to 0 (current month).
        :param int to: Used only when filterType is 'relativeMonths'. Specifies the end of the range in months relative to the current month. Minimum value is +24. Defaults to 11.
        :return: ForecastTimelineResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'folder', 'rbc', 'jobs', 'library', 'filter_type', 'year', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_timeline" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'folder' in params:
            query_params.append(('folder', params['folder']))  # noqa: E501
        if 'rbc' in params:
            query_params.append(('rbc', params['rbc']))  # noqa: E501
        if 'jobs' in params:
            query_params.append(('jobs', params['jobs']))  # noqa: E501
        if 'library' in params:
            query_params.append(('library', params['library']))  # noqa: E501
        if 'filter_type' in params:
            query_params.append(('filterType', params['filter_type']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/forecast/timeline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ForecastTimelineResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_log(self, job_id, **kwargs):  # noqa: E501
        """Get job's log  # noqa: E501

        Get the job execution log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_log(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_log_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_log_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_log_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get job's log  # noqa: E501

        Get the job execution log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_log_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_output(self, job_id, **kwargs):  # noqa: E501
        """Get job output  # noqa: E501

        Get the output returned from a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_output(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :param int run_no: The execution number in case of multiple executions (0 will get the last execution's output)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_output_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_output_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_output_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get job output  # noqa: E501

        Get the output returned from a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_output_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :param int run_no: The execution number in case of multiple executions (0 will get the last execution's output)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'run_no']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_output`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'run_no' in params:
            query_params.append(('runNo', params['run_no']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/output', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_statistics(self, job_id, **kwargs):  # noqa: E501
        """Get job statistics  # noqa: E501

        Get the statistics from a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_statistics(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: Statistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_statistics_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_statistics_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_statistics_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get job statistics  # noqa: E501

        Get the statistics from a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_statistics_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: Statistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Statistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_status(self, job_id, **kwargs):  # noqa: E501
        """Get status of a job  # noqa: E501

        Get the job status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_status(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Job ID returned from the run status action. (required)
        :return: JobRunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_status_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_status_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_status_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get status of a job  # noqa: E501

        Get the job status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_status_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Job ID returned from the run status action. (required)
        :return: JobRunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobRunStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobs_status(self, run_id, **kwargs):  # noqa: E501
        """Get status of running jobs  # noqa: E501

        Run status of jobs started with the Run service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_status(run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str run_id: Run ID returned from the run action. (required)
        :param int start_index: The index of the job status from which to start. returning results
        :return: JobStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobs_status_with_http_info(run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jobs_status_with_http_info(run_id, **kwargs)  # noqa: E501
            return data

    def get_jobs_status_with_http_info(self, run_id, **kwargs):  # noqa: E501
        """Get status of running jobs  # noqa: E501

        Run status of jobs started with the Run service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_status_with_http_info(run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str run_id: Run ID returned from the run action. (required)
        :param int start_index: The index of the job status from which to start. returning results
        :return: JobStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id', 'start_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobs_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_jobs_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/status/{runId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobStatusResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobs_status_by_filter(self, **kwargs):  # noqa: E501
        """Get jobs that match the search criteria.  # noqa: E501

        Get status of jobs that match the requested search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_status_by_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: maximum jobs status to fetch (default 1000).
        :param str jobname:
        :param str ctm:
        :param str server:
        :param str application:
        :param str sub_application:
        :param str host:
        :param str status:
        :param str folder:
        :param str description:
        :param str jobid:
        :param str neighborhood:
        :param int depth:
        :param str direction:
        :param str order_date_from:
        :param str order_date_to:
        :param str history_run_date:
        :param str from_time:
        :param str to_time:
        :param str folder_library:
        :param str host_group:
        :param str run_as:
        :param str command:
        :param str file_path:
        :param str file_name:
        :param str workload_policy:
        :param str rule_based_calendar:
        :param str resource_mutex:
        :param str resource_semaphore:
        :param str resource_lock:
        :param str resource_pool:
        :param bool held:
        :param bool folder_held:
        :param bool cyclic:
        :param bool deleted:
        :return: JobStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobs_status_by_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_jobs_status_by_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_jobs_status_by_filter_with_http_info(self, **kwargs):  # noqa: E501
        """Get jobs that match the search criteria.  # noqa: E501

        Get status of jobs that match the requested search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_status_by_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: maximum jobs status to fetch (default 1000).
        :param str jobname:
        :param str ctm:
        :param str server:
        :param str application:
        :param str sub_application:
        :param str host:
        :param str status:
        :param str folder:
        :param str description:
        :param str jobid:
        :param str neighborhood:
        :param int depth:
        :param str direction:
        :param str order_date_from:
        :param str order_date_to:
        :param str history_run_date:
        :param str from_time:
        :param str to_time:
        :param str folder_library:
        :param str host_group:
        :param str run_as:
        :param str command:
        :param str file_path:
        :param str file_name:
        :param str workload_policy:
        :param str rule_based_calendar:
        :param str resource_mutex:
        :param str resource_semaphore:
        :param str resource_lock:
        :param str resource_pool:
        :param bool held:
        :param bool folder_held:
        :param bool cyclic:
        :param bool deleted:
        :return: JobStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'jobname', 'ctm', 'server', 'application', 'sub_application', 'host', 'status', 'folder', 'description', 'jobid', 'neighborhood', 'depth', 'direction', 'order_date_from', 'order_date_to', 'history_run_date', 'from_time', 'to_time', 'folder_library', 'host_group', 'run_as', 'command', 'file_path', 'file_name', 'workload_policy', 'rule_based_calendar', 'resource_mutex', 'resource_semaphore', 'resource_lock', 'resource_pool', 'held', 'folder_held', 'cyclic', 'deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobs_status_by_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'jobname' in params:
            query_params.append(('jobname', params['jobname']))  # noqa: E501
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'application' in params:
            query_params.append(('application', params['application']))  # noqa: E501
        if 'sub_application' in params:
            query_params.append(('subApplication', params['sub_application']))  # noqa: E501
        if 'host' in params:
            query_params.append(('host', params['host']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'folder' in params:
            query_params.append(('folder', params['folder']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'jobid' in params:
            query_params.append(('jobid', params['jobid']))  # noqa: E501
        if 'neighborhood' in params:
            query_params.append(('neighborhood', params['neighborhood']))  # noqa: E501
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'order_date_from' in params:
            query_params.append(('orderDateFrom', params['order_date_from']))  # noqa: E501
        if 'order_date_to' in params:
            query_params.append(('orderDateTo', params['order_date_to']))  # noqa: E501
        if 'history_run_date' in params:
            query_params.append(('historyRunDate', params['history_run_date']))  # noqa: E501
        if 'from_time' in params:
            query_params.append(('fromTime', params['from_time']))  # noqa: E501
        if 'to_time' in params:
            query_params.append(('toTime', params['to_time']))  # noqa: E501
        if 'folder_library' in params:
            query_params.append(('folderLibrary', params['folder_library']))  # noqa: E501
        if 'host_group' in params:
            query_params.append(('hostGroup', params['host_group']))  # noqa: E501
        if 'run_as' in params:
            query_params.append(('runAs', params['run_as']))  # noqa: E501
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'file_path' in params:
            query_params.append(('filePath', params['file_path']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'workload_policy' in params:
            query_params.append(('workloadPolicy', params['workload_policy']))  # noqa: E501
        if 'rule_based_calendar' in params:
            query_params.append(('ruleBasedCalendar', params['rule_based_calendar']))  # noqa: E501
        if 'resource_mutex' in params:
            query_params.append(('resourceMutex', params['resource_mutex']))  # noqa: E501
        if 'resource_semaphore' in params:
            query_params.append(('resourceSemaphore', params['resource_semaphore']))  # noqa: E501
        if 'resource_lock' in params:
            query_params.append(('resourceLock', params['resource_lock']))  # noqa: E501
        if 'resource_pool' in params:
            query_params.append(('resourcePool', params['resource_pool']))  # noqa: E501
        if 'held' in params:
            query_params.append(('held', params['held']))  # noqa: E501
        if 'folder_held' in params:
            query_params.append(('folderHeld', params['folder_held']))  # noqa: E501
        if 'cyclic' in params:
            query_params.append(('cyclic', params['cyclic']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/jobs/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobStatusResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_of_un_ordered_jobs_for_specified_user_daily(self, poll, **kwargs):  # noqa: E501
        """Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501

        Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_of_un_ordered_jobs_for_specified_user_daily(poll, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll: (required)
        :return: CtmudchkJobsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_of_un_ordered_jobs_for_specified_user_daily_with_http_info(poll, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_of_un_ordered_jobs_for_specified_user_daily_with_http_info(poll, **kwargs)  # noqa: E501
            return data

    def get_list_of_un_ordered_jobs_for_specified_user_daily_with_http_info(self, poll, **kwargs):  # noqa: E501
        """Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501

        Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_of_un_ordered_jobs_for_specified_user_daily_with_http_info(poll, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll: (required)
        :return: CtmudchkJobsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_of_un_ordered_jobs_for_specified_user_daily" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll' is set
        if ('poll' not in params or
                params['poll'] is None):
            raise ValueError("Missing the required parameter `poll` when calling `get_list_of_un_ordered_jobs_for_specified_user_daily`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll' in params:
            path_params['poll'] = params['poll']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/userDaily/missing/poll/{poll}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CtmudchkJobsResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resources(self, **kwargs):  # noqa: E501
        """Get all resources records matching search.  # noqa: E501

        Get all resources records matching search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: Control-M Server filter.
        :param str server: Control-M Server filter.
        :param str name: The resource name filter.
        :return: ResourceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_resources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_resources_with_http_info(self, **kwargs):  # noqa: E501
        """Get all resources records matching search.  # noqa: E501

        Get all resources records matching search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: Control-M Server filter.
        :param str server: Control-M Server filter.
        :param str name: The resource name filter.
        :return: ResourceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'server', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_un_ordered_jobs_for_specified_user_daily(self, user_daily, **kwargs):  # noqa: E501
        """Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501

        Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_un_ordered_jobs_for_specified_user_daily(user_daily, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_daily: (required)
        :param str server:
        :return: CtmudchkResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_un_ordered_jobs_for_specified_user_daily_with_http_info(user_daily, **kwargs)  # noqa: E501
        else:
            (data) = self.get_un_ordered_jobs_for_specified_user_daily_with_http_info(user_daily, **kwargs)  # noqa: E501
            return data

    def get_un_ordered_jobs_for_specified_user_daily_with_http_info(self, user_daily, **kwargs):  # noqa: E501
        """Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501

        Enables you to get all the Jobs that were not ordered for a specified user daily.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_un_ordered_jobs_for_specified_user_daily_with_http_info(user_daily, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_daily: (required)
        :param str server:
        :return: CtmudchkResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_daily', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_un_ordered_jobs_for_specified_user_daily" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_daily' is set
        if ('user_daily' not in params or
                params['user_daily'] is None):
            raise ValueError("Missing the required parameter `user_daily` when calling `get_un_ordered_jobs_for_specified_user_daily`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_daily' in params:
            path_params['userDaily'] = params['user_daily']  # noqa: E501

        query_params = []
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/userDaily/{userDaily}/missing/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CtmudchkResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variables(self, **kwargs):  # noqa: E501
        """Return variable values based on specified search criteria.  # noqa: E501

        Return variable values based on specified search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool: The pool name filter
        :param str variable: The variable name filter
        :param str server: The server name filter
        :return: Variables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variables_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_variables_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_variables_with_http_info(self, **kwargs):  # noqa: E501
        """Return variable values based on specified search criteria.  # noqa: E501

        Return variable values based on specified search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool: The pool name filter
        :param str variable: The variable name filter
        :param str server: The server name filter
        :return: Variables
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool', 'variable', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variables" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool' in params:
            query_params.append(('pool', params['pool']))  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Variables',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_waiting_info(self, job_id, **kwargs):  # noqa: E501
        """get job's waiting information  # noqa: E501

        get the reason why the job is in waiting status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_waiting_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_waiting_info_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_waiting_info_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_waiting_info_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """get job's waiting information  # noqa: E501

        get the reason why the job is in waiting status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_waiting_info_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_waiting_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_waiting_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/waitingInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workload_policies(self, **kwargs):  # noqa: E501
        """get workload policies  # noqa: E501

        Get all the workload policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: Optionally state filter. Available values Active, Inactive
        :return: WorkloadPolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workload_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workload_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workload_policies_with_http_info(self, **kwargs):  # noqa: E501
        """get workload policies  # noqa: E501

        Get all the workload policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workload_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: Optionally state filter. Available values Active, Inactive
        :return: WorkloadPolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workload_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/workloadpolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkloadPolicyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hold_job(self, job_id, **kwargs):  # noqa: E501
        """hold the job so it will not start untill it is freed  # noqa: E501

        hold the job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hold_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hold_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.hold_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def hold_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """hold the job so it will not start untill it is freed  # noqa: E501

        hold the job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hold_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hold_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `hold_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/hold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kill_job(self, job_id, **kwargs):  # noqa: E501
        """Cancel running job  # noqa: E501

        Abort job execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kill_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kill_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.kill_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def kill_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Cancel running job  # noqa: E501

        Abort job execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kill_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kill_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `kill_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/kill', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_job(self, job_definitions_file, job_id, **kwargs):  # noqa: E501
        """Modify active job  # noqa: E501

        Modify active job, specified by order id according to given definitions file (JSON).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_job(job_definitions_file, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_definitions_file: (required)
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_job_with_http_info(job_definitions_file, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_job_with_http_info(job_definitions_file, job_id, **kwargs)  # noqa: E501
            return data

    def modify_job_with_http_info(self, job_definitions_file, job_id, **kwargs):  # noqa: E501
        """Modify active job  # noqa: E501

        Modify active job, specified by order id according to given definitions file (JSON).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_job_with_http_info(job_definitions_file, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_definitions_file: (required)
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_definitions_file', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_definitions_file' is set
        if ('job_definitions_file' not in params or
                params['job_definitions_file'] is None):
            raise ValueError("Missing the required parameter `job_definitions_file` when calling `modify_job`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `modify_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'job_definitions_file' in params:
            local_var_files['jobDefinitionsFile'] = params['job_definitions_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/modify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_jobs_in_folder(self, **kwargs):  # noqa: E501
        """Execute requested jobs in certain folder  # noqa: E501

        Run jobs from selected folder according to given filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_jobs_in_folder(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderFolderParameters body: parameters to select the jobs to run
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_jobs_in_folder_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_jobs_in_folder_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_jobs_in_folder_with_http_info(self, **kwargs):  # noqa: E501
        """Execute requested jobs in certain folder  # noqa: E501

        Run jobs from selected folder according to given filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_jobs_in_folder_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderFolderParameters body: parameters to select the jobs to run
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_jobs_in_folder" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def poll_forecast_timeline_request(self, poll, **kwargs):  # noqa: E501
        """Returns an array that contains a yearly schedule (according to the filter) when a job will run over the years.  # noqa: E501

        Returns an array that contains a yearly schedule (according to the filter) when a job will run over the years.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.poll_forecast_timeline_request(poll, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll: A unique ID received from the \"forecast:timeline::get\" API to retrieve the result of the timeline request. (required)
        :return: PollForecastTimelineResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.poll_forecast_timeline_request_with_http_info(poll, **kwargs)  # noqa: E501
        else:
            (data) = self.poll_forecast_timeline_request_with_http_info(poll, **kwargs)  # noqa: E501
            return data

    def poll_forecast_timeline_request_with_http_info(self, poll, **kwargs):  # noqa: E501
        """Returns an array that contains a yearly schedule (according to the filter) when a job will run over the years.  # noqa: E501

        Returns an array that contains a yearly schedule (according to the filter) when a job will run over the years.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.poll_forecast_timeline_request_with_http_info(poll, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll: A unique ID received from the \"forecast:timeline::get\" API to retrieve the result of the timeline request. (required)
        :return: PollForecastTimelineResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method poll_forecast_timeline_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll' is set
        if ('poll' not in params or
                params['poll'] is None):
            raise ValueError("Missing the required parameter `poll` when calling `poll_forecast_timeline_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll' in params:
            path_params['poll'] = params['poll']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/forecast/timeline/poll/{poll}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PollForecastTimelineResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rerun_job(self, job_id, **kwargs):  # noqa: E501
        """Run job again  # noqa: E501

        Run an already executed job (again).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rerun_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :param RerunParameters body: The JSON file with the restart configuration and parameters
        :return: JobRunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rerun_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rerun_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def rerun_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Run job again  # noqa: E501

        Run an already executed job (again).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rerun_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :param RerunParameters body: The JSON file with the restart configuration and parameters
        :return: JobRunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rerun_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `rerun_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/rerun', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobRunStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_jobs(self, job_definitions_file, deploy_descriptor_file, additional_configuration, **kwargs):  # noqa: E501
        """Run jobs  # noqa: E501

        Run jobs according to given definitions file (JSON or zip).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_jobs(job_definitions_file, deploy_descriptor_file, additional_configuration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_definitions_file: (required)
        :param str deploy_descriptor_file: (required)
        :param str additional_configuration: (required)
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_jobs_with_http_info(job_definitions_file, deploy_descriptor_file, additional_configuration, **kwargs)  # noqa: E501
        else:
            (data) = self.run_jobs_with_http_info(job_definitions_file, deploy_descriptor_file, additional_configuration, **kwargs)  # noqa: E501
            return data

    def run_jobs_with_http_info(self, job_definitions_file, deploy_descriptor_file, additional_configuration, **kwargs):  # noqa: E501
        """Run jobs  # noqa: E501

        Run jobs according to given definitions file (JSON or zip).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_jobs_with_http_info(job_definitions_file, deploy_descriptor_file, additional_configuration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_definitions_file: (required)
        :param str deploy_descriptor_file: (required)
        :param str additional_configuration: (required)
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_definitions_file', 'deploy_descriptor_file', 'additional_configuration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_definitions_file' is set
        if ('job_definitions_file' not in params or
                params['job_definitions_file'] is None):
            raise ValueError("Missing the required parameter `job_definitions_file` when calling `run_jobs`")  # noqa: E501
        # verify the required parameter 'deploy_descriptor_file' is set
        if ('deploy_descriptor_file' not in params or
                params['deploy_descriptor_file'] is None):
            raise ValueError("Missing the required parameter `deploy_descriptor_file` when calling `run_jobs`")  # noqa: E501
        # verify the required parameter 'additional_configuration' is set
        if ('additional_configuration' not in params or
                params['additional_configuration'] is None):
            raise ValueError("Missing the required parameter `additional_configuration` when calling `run_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'job_definitions_file' in params:
            local_var_files['jobDefinitionsFile'] = params['job_definitions_file']  # noqa: E501
        if 'deploy_descriptor_file' in params:
            local_var_files['deployDescriptorFile'] = params['deploy_descriptor_file']  # noqa: E501
        if 'additional_configuration' in params:
            local_var_files['additionalConfiguration'] = params['additional_configuration']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_now(self, job_id, **kwargs):  # noqa: E501
        """Bypass scheduling cretirias and start the job  # noqa: E501

        start a job immediately  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_now(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_now_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.run_now_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def run_now_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Bypass scheduling cretirias and start the job  # noqa: E501

        start a job immediately  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_now_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_now" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `run_now`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/runNow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_on_demand(self, definitions_file, deploy_descriptor_file, **kwargs):  # noqa: E501
        """Run a job on demand  # noqa: E501

        Run a job on demand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_on_demand(definitions_file, deploy_descriptor_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str definitions_file: (required)
        :param str deploy_descriptor_file: (required)
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_on_demand_with_http_info(definitions_file, deploy_descriptor_file, **kwargs)  # noqa: E501
        else:
            (data) = self.run_on_demand_with_http_info(definitions_file, deploy_descriptor_file, **kwargs)  # noqa: E501
            return data

    def run_on_demand_with_http_info(self, definitions_file, deploy_descriptor_file, **kwargs):  # noqa: E501
        """Run a job on demand  # noqa: E501

        Run a job on demand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_on_demand_with_http_info(definitions_file, deploy_descriptor_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str definitions_file: (required)
        :param str deploy_descriptor_file: (required)
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['definitions_file', 'deploy_descriptor_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_on_demand" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'definitions_file' is set
        if ('definitions_file' not in params or
                params['definitions_file'] is None):
            raise ValueError("Missing the required parameter `definitions_file` when calling `run_on_demand`")  # noqa: E501
        # verify the required parameter 'deploy_descriptor_file' is set
        if ('deploy_descriptor_file' not in params or
                params['deploy_descriptor_file'] is None):
            raise ValueError("Missing the required parameter `deploy_descriptor_file` when calling `run_on_demand`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'definitions_file' in params:
            local_var_files['definitionsFile'] = params['definitions_file']  # noqa: E501
        if 'deploy_descriptor_file' in params:
            local_var_files['deployDescriptorFile'] = params['deploy_descriptor_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/ondemand', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_un_ordered_jobs_for_specified_user_daily(self, user_daily, **kwargs):  # noqa: E501
        """runs all the jobs that were not ordered for a specified user daily of a specified server.  # noqa: E501

        runs all the jobs that were not ordered for a specified user daily of a specified server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_un_ordered_jobs_for_specified_user_daily(user_daily, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_daily: (required)
        :param str server:
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_un_ordered_jobs_for_specified_user_daily_with_http_info(user_daily, **kwargs)  # noqa: E501
        else:
            (data) = self.run_un_ordered_jobs_for_specified_user_daily_with_http_info(user_daily, **kwargs)  # noqa: E501
            return data

    def run_un_ordered_jobs_for_specified_user_daily_with_http_info(self, user_daily, **kwargs):  # noqa: E501
        """runs all the jobs that were not ordered for a specified user daily of a specified server.  # noqa: E501

        runs all the jobs that were not ordered for a specified user daily of a specified server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_un_ordered_jobs_for_specified_user_daily_with_http_info(user_daily, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_daily: (required)
        :param str server:
        :return: RunResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_daily', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_un_ordered_jobs_for_specified_user_daily" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_daily' is set
        if ('user_daily' not in params or
                params['user_daily'] is None):
            raise ValueError("Missing the required parameter `user_daily` when calling `run_un_ordered_jobs_for_specified_user_daily`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_daily' in params:
            path_params['userDaily'] = params['user_daily']  # noqa: E501

        query_params = []
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/userDaily/{userDaily}/missing/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_to_ok(self, job_id, **kwargs):  # noqa: E501
        """set job end status to OK  # noqa: E501

        set job status to OK, post processing action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_to_ok(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_to_ok_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_to_ok_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def set_to_ok_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """set job end status to OK  # noqa: E501

        set job status to OK, post processing action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_to_ok_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_to_ok" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `set_to_ok`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/setToOk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_variables(self, body, server, **kwargs):  # noqa: E501
        """Set variable values as defined in json input. Use this API to create new variables or update existing variables.  # noqa: E501

        Set variable values as defined in json input. Use this API to create new variables or update existing variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_variables(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Variables body: Variables definition file. (required)
        :param str server: The server that hosts the variables. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_variables_with_http_info(body, server, **kwargs)  # noqa: E501
        else:
            (data) = self.set_variables_with_http_info(body, server, **kwargs)  # noqa: E501
            return data

    def set_variables_with_http_info(self, body, server, **kwargs):  # noqa: E501
        """Set variable values as defined in json input. Use this API to create new variables or update existing variables.  # noqa: E501

        Set variable values as defined in json input. Use this API to create new variables or update existing variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_variables_with_http_info(body, server, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Variables body: Variables definition file. (required)
        :param str server: The server that hosts the variables. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_variables`")  # noqa: E501
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `set_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/variables/{server}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undelete_job(self, job_id, **kwargs):  # noqa: E501
        """recover a mark for deletion job  # noqa: E501

        recover a mark for deletion job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undelete_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.undelete_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.undelete_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def undelete_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """recover a mark for deletion job  # noqa: E501

        recover a mark for deletion job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.undelete_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job ID (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undelete_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `undelete_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/job/{jobId}/undelete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_alert(self, body, **kwargs):  # noqa: E501
        """Update alert.  # noqa: E501

        Update alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertParam body: File that contains the alert property that want to be update. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_alert_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_alert_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_alert_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update alert.  # noqa: E501

        Update alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertParam body: File that contains the alert property that want to be update. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_alert_status(self, body, **kwargs):  # noqa: E501
        """Update alert status.  # noqa: E501

        Update alert status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_status(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertStatusParam body: File that contains the alert status property that want to be update. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_alert_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_alert_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_alert_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update alert status.  # noqa: E501

        Update alert status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_status_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertStatusParam body: File that contains the alert status property that want to be update. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alert_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_alert_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/alerts/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_resource(self, body, server, name, **kwargs):  # noqa: E501
        """Update a pool resource.  # noqa: E501

        Update a pool resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource(body, server, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceMax body: The defined resource name. (required)
        :param str server: The Control-M Server hosting the resource. (required)
        :param str name: Resource name (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_resource_with_http_info(body, server, name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_resource_with_http_info(body, server, name, **kwargs)  # noqa: E501
            return data

    def update_resource_with_http_info(self, body, server, name, **kwargs):  # noqa: E501
        """Update a pool resource.  # noqa: E501

        Update a pool resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resource_with_http_info(body, server, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceMax body: The defined resource name. (required)
        :param str server: The Control-M Server hosting the resource. (required)
        :param str name: Resource name (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resource`")  # noqa: E501
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `update_resource`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server' in params:
            path_params['server'] = params['server']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/run/resource/{server}/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
