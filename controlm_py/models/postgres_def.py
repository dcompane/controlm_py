# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostgresDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secondary_db_host': 'str',
        'archiving_path': 'str',
        'primary_db_log_path': 'str',
        'secondary_db_log_path': 'str'
    }

    attribute_map = {
        'secondary_db_host': 'secondaryDBHost',
        'archiving_path': 'archivingPath',
        'primary_db_log_path': 'primaryDBLogPath',
        'secondary_db_log_path': 'secondaryDBLogPath'
    }

    def __init__(self, secondary_db_host=None, archiving_path=None, primary_db_log_path=None, secondary_db_log_path=None):  # noqa: E501
        """PostgresDef - a model defined in Swagger"""  # noqa: E501
        self._secondary_db_host = None
        self._archiving_path = None
        self._primary_db_log_path = None
        self._secondary_db_log_path = None
        self.discriminator = None
        if secondary_db_host is not None:
            self.secondary_db_host = secondary_db_host
        if archiving_path is not None:
            self.archiving_path = archiving_path
        if primary_db_log_path is not None:
            self.primary_db_log_path = primary_db_log_path
        if secondary_db_log_path is not None:
            self.secondary_db_log_path = secondary_db_log_path

    @property
    def secondary_db_host(self):
        """Gets the secondary_db_host of this PostgresDef.  # noqa: E501


        :return: The secondary_db_host of this PostgresDef.  # noqa: E501
        :rtype: str
        """
        return self._secondary_db_host

    @secondary_db_host.setter
    def secondary_db_host(self, secondary_db_host):
        """Sets the secondary_db_host of this PostgresDef.


        :param secondary_db_host: The secondary_db_host of this PostgresDef.  # noqa: E501
        :type: str
        """

        self._secondary_db_host = secondary_db_host

    @property
    def archiving_path(self):
        """Gets the archiving_path of this PostgresDef.  # noqa: E501


        :return: The archiving_path of this PostgresDef.  # noqa: E501
        :rtype: str
        """
        return self._archiving_path

    @archiving_path.setter
    def archiving_path(self, archiving_path):
        """Sets the archiving_path of this PostgresDef.


        :param archiving_path: The archiving_path of this PostgresDef.  # noqa: E501
        :type: str
        """

        self._archiving_path = archiving_path

    @property
    def primary_db_log_path(self):
        """Gets the primary_db_log_path of this PostgresDef.  # noqa: E501


        :return: The primary_db_log_path of this PostgresDef.  # noqa: E501
        :rtype: str
        """
        return self._primary_db_log_path

    @primary_db_log_path.setter
    def primary_db_log_path(self, primary_db_log_path):
        """Sets the primary_db_log_path of this PostgresDef.


        :param primary_db_log_path: The primary_db_log_path of this PostgresDef.  # noqa: E501
        :type: str
        """

        self._primary_db_log_path = primary_db_log_path

    @property
    def secondary_db_log_path(self):
        """Gets the secondary_db_log_path of this PostgresDef.  # noqa: E501


        :return: The secondary_db_log_path of this PostgresDef.  # noqa: E501
        :rtype: str
        """
        return self._secondary_db_log_path

    @secondary_db_log_path.setter
    def secondary_db_log_path(self, secondary_db_log_path):
        """Sets the secondary_db_log_path of this PostgresDef.


        :param secondary_db_log_path: The secondary_db_log_path of this PostgresDef.  # noqa: E501
        :type: str
        """

        self._secondary_db_log_path = secondary_db_log_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostgresDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostgresDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
