# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class App(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'displayname': 'str',
        'name': 'str',
        'desc': 'str',
        'default_type': 'str',
        'last_modified': 'str',
        'created_on': 'str',
        'created_by': 'str'
    }

    attribute_map = {
        'displayname': 'displayname',
        'name': 'name',
        'desc': 'desc',
        'default_type': 'defaultType',
        'last_modified': 'lastModified',
        'created_on': 'createdOn',
        'created_by': 'createdBy'
    }

    def __init__(self, displayname=None, name=None, desc=None, default_type=None, last_modified=None, created_on=None, created_by=None):  # noqa: E501
        """App - a model defined in Swagger"""  # noqa: E501
        self._displayname = None
        self._name = None
        self._desc = None
        self._default_type = None
        self._last_modified = None
        self._created_on = None
        self._created_by = None
        self.discriminator = None
        if displayname is not None:
            self.displayname = displayname
        if name is not None:
            self.name = name
        if desc is not None:
            self.desc = desc
        if default_type is not None:
            self.default_type = default_type
        if last_modified is not None:
            self.last_modified = last_modified
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by

    @property
    def displayname(self):
        """Gets the displayname of this App.  # noqa: E501

        job type display name  # noqa: E501

        :return: The displayname of this App.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this App.

        job type display name  # noqa: E501

        :param displayname: The displayname of this App.  # noqa: E501
        :type: str
        """

        self._displayname = displayname

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501

        job type name  # noqa: E501

        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.

        job type name  # noqa: E501

        :param name: The name of this App.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this App.  # noqa: E501

        description  # noqa: E501

        :return: The desc of this App.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this App.

        description  # noqa: E501

        :param desc: The desc of this App.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def default_type(self):
        """Gets the default_type of this App.  # noqa: E501

        default type  # noqa: E501

        :return: The default_type of this App.  # noqa: E501
        :rtype: str
        """
        return self._default_type

    @default_type.setter
    def default_type(self, default_type):
        """Sets the default_type of this App.

        default type  # noqa: E501

        :param default_type: The default_type of this App.  # noqa: E501
        :type: str
        """

        self._default_type = default_type

    @property
    def last_modified(self):
        """Gets the last_modified of this App.  # noqa: E501

        last modification date  # noqa: E501

        :return: The last_modified of this App.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this App.

        last modification date  # noqa: E501

        :param last_modified: The last_modified of this App.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def created_on(self):
        """Gets the created_on of this App.  # noqa: E501

        creation date  # noqa: E501

        :return: The created_on of this App.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this App.

        creation date  # noqa: E501

        :param created_on: The created_on of this App.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this App.  # noqa: E501

        creation author  # noqa: E501

        :return: The created_by of this App.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this App.

        creation author  # noqa: E501

        :param created_by: The created_by of this App.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(App, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
