# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AgentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nodeid': 'str',
        'status': 'str',
        'hostgroups': 'list[str]',
        'version': 'str',
        'operating_system': 'str',
        'tag': 'str',
        'type': 'str',
        'associated_agents': 'list[str]'
    }

    attribute_map = {
        'nodeid': 'nodeid',
        'status': 'status',
        'hostgroups': 'hostgroups',
        'version': 'version',
        'operating_system': 'operatingSystem',
        'tag': 'tag',
        'type': 'type',
        'associated_agents': 'associatedAgents'
    }

    def __init__(self, nodeid=None, status=None, hostgroups=None, version=None, operating_system=None, tag=None, type=None, associated_agents=None):  # noqa: E501
        """AgentDetails - a model defined in Swagger"""  # noqa: E501
        self._nodeid = None
        self._status = None
        self._hostgroups = None
        self._version = None
        self._operating_system = None
        self._tag = None
        self._type = None
        self._associated_agents = None
        self.discriminator = None
        if nodeid is not None:
            self.nodeid = nodeid
        if status is not None:
            self.status = status
        if hostgroups is not None:
            self.hostgroups = hostgroups
        if version is not None:
            self.version = version
        if operating_system is not None:
            self.operating_system = operating_system
        if tag is not None:
            self.tag = tag
        if type is not None:
            self.type = type
        if associated_agents is not None:
            self.associated_agents = associated_agents

    @property
    def nodeid(self):
        """Gets the nodeid of this AgentDetails.  # noqa: E501

        agent machine  # noqa: E501

        :return: The nodeid of this AgentDetails.  # noqa: E501
        :rtype: str
        """
        return self._nodeid

    @nodeid.setter
    def nodeid(self, nodeid):
        """Sets the nodeid of this AgentDetails.

        agent machine  # noqa: E501

        :param nodeid: The nodeid of this AgentDetails.  # noqa: E501
        :type: str
        """

        self._nodeid = nodeid

    @property
    def status(self):
        """Gets the status of this AgentDetails.  # noqa: E501

        agent status  # noqa: E501

        :return: The status of this AgentDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AgentDetails.

        agent status  # noqa: E501

        :param status: The status of this AgentDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def hostgroups(self):
        """Gets the hostgroups of this AgentDetails.  # noqa: E501

        list of hostgroups names containing the agent  # noqa: E501

        :return: The hostgroups of this AgentDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._hostgroups

    @hostgroups.setter
    def hostgroups(self, hostgroups):
        """Sets the hostgroups of this AgentDetails.

        list of hostgroups names containing the agent  # noqa: E501

        :param hostgroups: The hostgroups of this AgentDetails.  # noqa: E501
        :type: list[str]
        """

        self._hostgroups = hostgroups

    @property
    def version(self):
        """Gets the version of this AgentDetails.  # noqa: E501

        agent version string i.e. - 9.0.20.080  # noqa: E501

        :return: The version of this AgentDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AgentDetails.

        agent version string i.e. - 9.0.20.080  # noqa: E501

        :param version: The version of this AgentDetails.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def operating_system(self):
        """Gets the operating_system of this AgentDetails.  # noqa: E501

        agent operating system long name i.e - Microsoft Windows Server 2016  (Build 14393)  # noqa: E501

        :return: The operating_system of this AgentDetails.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this AgentDetails.

        agent operating system long name i.e - Microsoft Windows Server 2016  (Build 14393)  # noqa: E501

        :param operating_system: The operating_system of this AgentDetails.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def tag(self):
        """Gets the tag of this AgentDetails.  # noqa: E501

        the agent tag  # noqa: E501

        :return: The tag of this AgentDetails.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AgentDetails.

        the agent tag  # noqa: E501

        :param tag: The tag of this AgentDetails.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def type(self):
        """Gets the type of this AgentDetails.  # noqa: E501

        The type of the host - agent or agentless host  # noqa: E501

        :return: The type of this AgentDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AgentDetails.

        The type of the host - agent or agentless host  # noqa: E501

        :param type: The type of this AgentDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def associated_agents(self):
        """Gets the associated_agents of this AgentDetails.  # noqa: E501

        The associated agents if type is agentless  # noqa: E501

        :return: The associated_agents of this AgentDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_agents

    @associated_agents.setter
    def associated_agents(self, associated_agents):
        """Sets the associated_agents of this AgentDetails.

        The associated agents if type is agentless  # noqa: E501

        :param associated_agents: The associated_agents of this AgentDetails.  # noqa: E501
        :type: list[str]
        """

        self._associated_agents = associated_agents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
