# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerDefinitionParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'name': 'str',
        'id': 'str',
        'ctm_to_em_port': 'int',
        'type': 'str',
        'version': 'str',
        'description': 'str',
        'contact': 'str',
        'statistics_alg': 'str',
        'sync_mode': 'str',
        'gateway_host': 'str',
        'gateway_desired_state': 'str',
        'gateway_check_interval': 'str',
        'gateway_startup_flags': 'str',
        'protocol': 'str',
        'time_zone': 'str',
        'new_day_time': 'str',
        'week_start_day': 'str',
        'day_light_saving_start_date': 'str',
        'day_light_saving_end_date': 'str',
        'is_uppercase_only': 'bool'
    }

    attribute_map = {
        'host': 'host',
        'name': 'name',
        'id': 'id',
        'ctm_to_em_port': 'ctmToEMPort',
        'type': 'type',
        'version': 'version',
        'description': 'description',
        'contact': 'contact',
        'statistics_alg': 'statisticsAlg',
        'sync_mode': 'syncMode',
        'gateway_host': 'gatewayHost',
        'gateway_desired_state': 'gatewayDesiredState',
        'gateway_check_interval': 'gatewayCheckInterval',
        'gateway_startup_flags': 'gatewayStartupFlags',
        'protocol': 'protocol',
        'time_zone': 'timeZone',
        'new_day_time': 'newDayTime',
        'week_start_day': 'weekStartDay',
        'day_light_saving_start_date': 'dayLightSavingStartDate',
        'day_light_saving_end_date': 'dayLightSavingEndDate',
        'is_uppercase_only': 'isUppercaseOnly'
    }

    def __init__(self, host=None, name=None, id=None, ctm_to_em_port=None, type=None, version=None, description=None, contact=None, statistics_alg=None, sync_mode=None, gateway_host=None, gateway_desired_state=None, gateway_check_interval=None, gateway_startup_flags=None, protocol=None, time_zone=None, new_day_time=None, week_start_day=None, day_light_saving_start_date=None, day_light_saving_end_date=None, is_uppercase_only=None):  # noqa: E501
        """ServerDefinitionParams - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._name = None
        self._id = None
        self._ctm_to_em_port = None
        self._type = None
        self._version = None
        self._description = None
        self._contact = None
        self._statistics_alg = None
        self._sync_mode = None
        self._gateway_host = None
        self._gateway_desired_state = None
        self._gateway_check_interval = None
        self._gateway_startup_flags = None
        self._protocol = None
        self._time_zone = None
        self._new_day_time = None
        self._week_start_day = None
        self._day_light_saving_start_date = None
        self._day_light_saving_end_date = None
        self._is_uppercase_only = None
        self.discriminator = None
        self.host = host
        self.name = name
        self.id = id
        if ctm_to_em_port is not None:
            self.ctm_to_em_port = ctm_to_em_port
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if contact is not None:
            self.contact = contact
        if statistics_alg is not None:
            self.statistics_alg = statistics_alg
        if sync_mode is not None:
            self.sync_mode = sync_mode
        if gateway_host is not None:
            self.gateway_host = gateway_host
        if gateway_desired_state is not None:
            self.gateway_desired_state = gateway_desired_state
        if gateway_check_interval is not None:
            self.gateway_check_interval = gateway_check_interval
        if gateway_startup_flags is not None:
            self.gateway_startup_flags = gateway_startup_flags
        if protocol is not None:
            self.protocol = protocol
        if time_zone is not None:
            self.time_zone = time_zone
        if new_day_time is not None:
            self.new_day_time = new_day_time
        if week_start_day is not None:
            self.week_start_day = week_start_day
        if day_light_saving_start_date is not None:
            self.day_light_saving_start_date = day_light_saving_start_date
        if day_light_saving_end_date is not None:
            self.day_light_saving_end_date = day_light_saving_end_date
        if is_uppercase_only is not None:
            self.is_uppercase_only = is_uppercase_only

    @property
    def host(self):
        """Gets the host of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server host name.  # noqa: E501

        :return: The host of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ServerDefinitionParams.

        The Control-M Server host name.  # noqa: E501

        :param host: The host of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def name(self):
        """Gets the name of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server name.  # noqa: E501

        :return: The name of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerDefinitionParams.

        The Control-M Server name.  # noqa: E501

        :param name: The name of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this ServerDefinitionParams.  # noqa: E501

        The id of the Control-M Server, 3 digits id  # noqa: E501

        :return: The id of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerDefinitionParams.

        The id of the Control-M Server, 3 digits id  # noqa: E501

        :param id: The id of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ctm_to_em_port(self):
        """Gets the ctm_to_em_port of this ServerDefinitionParams.  # noqa: E501

        The Control-M/EM port number.  # noqa: E501

        :return: The ctm_to_em_port of this ServerDefinitionParams.  # noqa: E501
        :rtype: int
        """
        return self._ctm_to_em_port

    @ctm_to_em_port.setter
    def ctm_to_em_port(self, ctm_to_em_port):
        """Sets the ctm_to_em_port of this ServerDefinitionParams.

        The Control-M/EM port number.  # noqa: E501

        :param ctm_to_em_port: The ctm_to_em_port of this ServerDefinitionParams.  # noqa: E501
        :type: int
        """

        self._ctm_to_em_port = ctm_to_em_port

    @property
    def type(self):
        """Gets the type of this ServerDefinitionParams.  # noqa: E501

        The Control-M Type [Distributed|zOS]. HIDDEN  # noqa: E501

        :return: The type of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServerDefinitionParams.

        The Control-M Type [Distributed|zOS]. HIDDEN  # noqa: E501

        :param type: The type of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server version. HIDDEN  # noqa: E501

        :return: The version of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerDefinitionParams.

        The Control-M Server version. HIDDEN  # noqa: E501

        :param version: The version of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server description. HIDDEN  # noqa: E501

        :return: The description of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServerDefinitionParams.

        The Control-M Server description. HIDDEN  # noqa: E501

        :param description: The description of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def contact(self):
        """Gets the contact of this ServerDefinitionParams.  # noqa: E501

        Contact information of server management. HIDDEN  # noqa: E501

        :return: The contact of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ServerDefinitionParams.

        Contact information of server management. HIDDEN  # noqa: E501

        :param contact: The contact of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def statistics_alg(self):
        """Gets the statistics_alg of this ServerDefinitionParams.  # noqa: E501

        EM statistics. HIDDEN  # noqa: E501

        :return: The statistics_alg of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._statistics_alg

    @statistics_alg.setter
    def statistics_alg(self, statistics_alg):
        """Sets the statistics_alg of this ServerDefinitionParams.

        EM statistics. HIDDEN  # noqa: E501

        :param statistics_alg: The statistics_alg of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._statistics_alg = statistics_alg

    @property
    def sync_mode(self):
        """Gets the sync_mode of this ServerDefinitionParams.  # noqa: E501

        Control-M server and EM server synchronization mode. HIDDEN  # noqa: E501

        :return: The sync_mode of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._sync_mode

    @sync_mode.setter
    def sync_mode(self, sync_mode):
        """Sets the sync_mode of this ServerDefinitionParams.

        Control-M server and EM server synchronization mode. HIDDEN  # noqa: E501

        :param sync_mode: The sync_mode of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._sync_mode = sync_mode

    @property
    def gateway_host(self):
        """Gets the gateway_host of this ServerDefinitionParams.  # noqa: E501

        The Control-M/EM Server the gateway should be created on. HIDDEN  # noqa: E501

        :return: The gateway_host of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._gateway_host

    @gateway_host.setter
    def gateway_host(self, gateway_host):
        """Sets the gateway_host of this ServerDefinitionParams.

        The Control-M/EM Server the gateway should be created on. HIDDEN  # noqa: E501

        :param gateway_host: The gateway_host of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._gateway_host = gateway_host

    @property
    def gateway_desired_state(self):
        """Gets the gateway_desired_state of this ServerDefinitionParams.  # noqa: E501

        Gateway desired state. HIDDEN  # noqa: E501

        :return: The gateway_desired_state of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._gateway_desired_state

    @gateway_desired_state.setter
    def gateway_desired_state(self, gateway_desired_state):
        """Sets the gateway_desired_state of this ServerDefinitionParams.

        Gateway desired state. HIDDEN  # noqa: E501

        :param gateway_desired_state: The gateway_desired_state of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._gateway_desired_state = gateway_desired_state

    @property
    def gateway_check_interval(self):
        """Gets the gateway_check_interval of this ServerDefinitionParams.  # noqa: E501

        Gateway check interval. HIDDEN  # noqa: E501

        :return: The gateway_check_interval of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._gateway_check_interval

    @gateway_check_interval.setter
    def gateway_check_interval(self, gateway_check_interval):
        """Sets the gateway_check_interval of this ServerDefinitionParams.

        Gateway check interval. HIDDEN  # noqa: E501

        :param gateway_check_interval: The gateway_check_interval of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._gateway_check_interval = gateway_check_interval

    @property
    def gateway_startup_flags(self):
        """Gets the gateway_startup_flags of this ServerDefinitionParams.  # noqa: E501

        Gateway additional startup flags. HIDDEN  # noqa: E501

        :return: The gateway_startup_flags of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._gateway_startup_flags

    @gateway_startup_flags.setter
    def gateway_startup_flags(self, gateway_startup_flags):
        """Sets the gateway_startup_flags of this ServerDefinitionParams.

        Gateway additional startup flags. HIDDEN  # noqa: E501

        :param gateway_startup_flags: The gateway_startup_flags of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._gateway_startup_flags = gateway_startup_flags

    @property
    def protocol(self):
        """Gets the protocol of this ServerDefinitionParams.  # noqa: E501

        Protocol the server is using. HIDDEN  # noqa: E501

        :return: The protocol of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ServerDefinitionParams.

        Protocol the server is using. HIDDEN  # noqa: E501

        :param protocol: The protocol of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def time_zone(self):
        """Gets the time_zone of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server time zone. HIDDEN  # noqa: E501

        :return: The time_zone of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ServerDefinitionParams.

        The Control-M Server time zone. HIDDEN  # noqa: E501

        :param time_zone: The time_zone of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def new_day_time(self):
        """Gets the new_day_time of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server new day time. HIDDEN  # noqa: E501

        :return: The new_day_time of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._new_day_time

    @new_day_time.setter
    def new_day_time(self, new_day_time):
        """Sets the new_day_time of this ServerDefinitionParams.

        The Control-M Server new day time. HIDDEN  # noqa: E501

        :param new_day_time: The new_day_time of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._new_day_time = new_day_time

    @property
    def week_start_day(self):
        """Gets the week_start_day of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server week start day. HIDDEN  # noqa: E501

        :return: The week_start_day of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._week_start_day

    @week_start_day.setter
    def week_start_day(self, week_start_day):
        """Sets the week_start_day of this ServerDefinitionParams.

        The Control-M Server week start day. HIDDEN  # noqa: E501

        :param week_start_day: The week_start_day of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._week_start_day = week_start_day

    @property
    def day_light_saving_start_date(self):
        """Gets the day_light_saving_start_date of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server day light saving start date. HIDDEN  # noqa: E501

        :return: The day_light_saving_start_date of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._day_light_saving_start_date

    @day_light_saving_start_date.setter
    def day_light_saving_start_date(self, day_light_saving_start_date):
        """Sets the day_light_saving_start_date of this ServerDefinitionParams.

        The Control-M Server day light saving start date. HIDDEN  # noqa: E501

        :param day_light_saving_start_date: The day_light_saving_start_date of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._day_light_saving_start_date = day_light_saving_start_date

    @property
    def day_light_saving_end_date(self):
        """Gets the day_light_saving_end_date of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server day light saving end date. HIDDEN  # noqa: E501

        :return: The day_light_saving_end_date of this ServerDefinitionParams.  # noqa: E501
        :rtype: str
        """
        return self._day_light_saving_end_date

    @day_light_saving_end_date.setter
    def day_light_saving_end_date(self, day_light_saving_end_date):
        """Sets the day_light_saving_end_date of this ServerDefinitionParams.

        The Control-M Server day light saving end date. HIDDEN  # noqa: E501

        :param day_light_saving_end_date: The day_light_saving_end_date of this ServerDefinitionParams.  # noqa: E501
        :type: str
        """

        self._day_light_saving_end_date = day_light_saving_end_date

    @property
    def is_uppercase_only(self):
        """Gets the is_uppercase_only of this ServerDefinitionParams.  # noqa: E501

        The Control-M Server is upper case only. HIDDEN  # noqa: E501

        :return: The is_uppercase_only of this ServerDefinitionParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_uppercase_only

    @is_uppercase_only.setter
    def is_uppercase_only(self, is_uppercase_only):
        """Sets the is_uppercase_only of this ServerDefinitionParams.

        The Control-M Server is upper case only. HIDDEN  # noqa: E501

        :param is_uppercase_only: The is_uppercase_only of this ServerDefinitionParams.  # noqa: E501
        :type: bool
        """

        self._is_uppercase_only = is_uppercase_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerDefinitionParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerDefinitionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
