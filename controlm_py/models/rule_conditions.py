# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuleConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name_pattern_condition': 'FileNamePatternConditionData',
        'file_size_condition': 'FileSizeConditionData',
        'user_condition': 'UserConditionData',
        'virtual_folder_condition': 'VirtualFolderConditionData'
    }

    attribute_map = {
        'file_name_pattern_condition': 'fileNamePatternCondition',
        'file_size_condition': 'fileSizeCondition',
        'user_condition': 'userCondition',
        'virtual_folder_condition': 'virtualFolderCondition'
    }

    def __init__(self, file_name_pattern_condition=None, file_size_condition=None, user_condition=None, virtual_folder_condition=None):  # noqa: E501
        """RuleConditions - a model defined in Swagger"""  # noqa: E501
        self._file_name_pattern_condition = None
        self._file_size_condition = None
        self._user_condition = None
        self._virtual_folder_condition = None
        self.discriminator = None
        if file_name_pattern_condition is not None:
            self.file_name_pattern_condition = file_name_pattern_condition
        if file_size_condition is not None:
            self.file_size_condition = file_size_condition
        if user_condition is not None:
            self.user_condition = user_condition
        if virtual_folder_condition is not None:
            self.virtual_folder_condition = virtual_folder_condition

    @property
    def file_name_pattern_condition(self):
        """Gets the file_name_pattern_condition of this RuleConditions.  # noqa: E501


        :return: The file_name_pattern_condition of this RuleConditions.  # noqa: E501
        :rtype: FileNamePatternConditionData
        """
        return self._file_name_pattern_condition

    @file_name_pattern_condition.setter
    def file_name_pattern_condition(self, file_name_pattern_condition):
        """Sets the file_name_pattern_condition of this RuleConditions.


        :param file_name_pattern_condition: The file_name_pattern_condition of this RuleConditions.  # noqa: E501
        :type: FileNamePatternConditionData
        """

        self._file_name_pattern_condition = file_name_pattern_condition

    @property
    def file_size_condition(self):
        """Gets the file_size_condition of this RuleConditions.  # noqa: E501


        :return: The file_size_condition of this RuleConditions.  # noqa: E501
        :rtype: FileSizeConditionData
        """
        return self._file_size_condition

    @file_size_condition.setter
    def file_size_condition(self, file_size_condition):
        """Sets the file_size_condition of this RuleConditions.


        :param file_size_condition: The file_size_condition of this RuleConditions.  # noqa: E501
        :type: FileSizeConditionData
        """

        self._file_size_condition = file_size_condition

    @property
    def user_condition(self):
        """Gets the user_condition of this RuleConditions.  # noqa: E501


        :return: The user_condition of this RuleConditions.  # noqa: E501
        :rtype: UserConditionData
        """
        return self._user_condition

    @user_condition.setter
    def user_condition(self, user_condition):
        """Sets the user_condition of this RuleConditions.


        :param user_condition: The user_condition of this RuleConditions.  # noqa: E501
        :type: UserConditionData
        """

        self._user_condition = user_condition

    @property
    def virtual_folder_condition(self):
        """Gets the virtual_folder_condition of this RuleConditions.  # noqa: E501


        :return: The virtual_folder_condition of this RuleConditions.  # noqa: E501
        :rtype: VirtualFolderConditionData
        """
        return self._virtual_folder_condition

    @virtual_folder_condition.setter
    def virtual_folder_condition(self, virtual_folder_condition):
        """Sets the virtual_folder_condition of this RuleConditions.


        :param virtual_folder_condition: The virtual_folder_condition of this RuleConditions.  # noqa: E501
        :type: VirtualFolderConditionData
        """

        self._virtual_folder_condition = virtual_folder_condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
