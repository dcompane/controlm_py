# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorizeSSHData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associated_agent': 'str',
        'physical_host': 'str'
    }

    attribute_map = {
        'associated_agent': 'associatedAgent',
        'physical_host': 'physicalHost'
    }

    def __init__(self, associated_agent=None, physical_host=None):  # noqa: E501
        """AuthorizeSSHData - a model defined in Swagger"""  # noqa: E501
        self._associated_agent = None
        self._physical_host = None
        self.discriminator = None
        if associated_agent is not None:
            self.associated_agent = associated_agent
        if physical_host is not None:
            self.physical_host = physical_host

    @property
    def associated_agent(self):
        """Gets the associated_agent of this AuthorizeSSHData.  # noqa: E501

        Optionally case insensitive agent name of host or alias of the Agent.  # noqa: E501

        :return: The associated_agent of this AuthorizeSSHData.  # noqa: E501
        :rtype: str
        """
        return self._associated_agent

    @associated_agent.setter
    def associated_agent(self, associated_agent):
        """Sets the associated_agent of this AuthorizeSSHData.

        Optionally case insensitive agent name of host or alias of the Agent.  # noqa: E501

        :param associated_agent: The associated_agent of this AuthorizeSSHData.  # noqa: E501
        :type: str
        """

        self._associated_agent = associated_agent

    @property
    def physical_host(self):
        """Gets the physical_host of this AuthorizeSSHData.  # noqa: E501

        Optionally case insensitive logical name.  # noqa: E501

        :return: The physical_host of this AuthorizeSSHData.  # noqa: E501
        :rtype: str
        """
        return self._physical_host

    @physical_host.setter
    def physical_host(self, physical_host):
        """Sets the physical_host of this AuthorizeSSHData.

        Optionally case insensitive logical name.  # noqa: E501

        :param physical_host: The physical_host of this AuthorizeSSHData.  # noqa: E501
        :type: str
        """

        self._physical_host = physical_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizeSSHData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizeSSHData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
