# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationManagerPrivilegeCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization': 'str',
        'configuration_manager_access': 'str',
        'configuration': 'str',
        'operation': 'str',
        'database': 'str',
        'controlm_security': 'str'
    }

    attribute_map = {
        'authorization': 'Authorization',
        'configuration_manager_access': 'ConfigurationManagerAccess',
        'configuration': 'Configuration',
        'operation': 'Operation',
        'database': 'Database',
        'controlm_security': 'ControlmSecurity'
    }

    def __init__(self, authorization=None, configuration_manager_access=None, configuration=None, operation=None, database=None, controlm_security=None):  # noqa: E501
        """ConfigurationManagerPrivilegeCategory - a model defined in Swagger"""  # noqa: E501
        self._authorization = None
        self._configuration_manager_access = None
        self._configuration = None
        self._operation = None
        self._database = None
        self._controlm_security = None
        self.discriminator = None
        if authorization is not None:
            self.authorization = authorization
        if configuration_manager_access is not None:
            self.configuration_manager_access = configuration_manager_access
        if configuration is not None:
            self.configuration = configuration
        if operation is not None:
            self.operation = operation
        if database is not None:
            self.database = database
        if controlm_security is not None:
            self.controlm_security = controlm_security

    @property
    def authorization(self):
        """Gets the authorization of this ConfigurationManagerPrivilegeCategory.  # noqa: E501

        Authorization access level (None, Browse, Update, Full)  # noqa: E501

        :return: The authorization of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ConfigurationManagerPrivilegeCategory.

        Authorization access level (None, Browse, Update, Full)  # noqa: E501

        :param authorization: The authorization of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._authorization = authorization

    @property
    def configuration_manager_access(self):
        """Gets the configuration_manager_access of this ConfigurationManagerPrivilegeCategory.  # noqa: E501

        Control-M Configuration Manager access level (None, Full)  # noqa: E501

        :return: The configuration_manager_access of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._configuration_manager_access

    @configuration_manager_access.setter
    def configuration_manager_access(self, configuration_manager_access):
        """Sets the configuration_manager_access of this ConfigurationManagerPrivilegeCategory.

        Control-M Configuration Manager access level (None, Full)  # noqa: E501

        :param configuration_manager_access: The configuration_manager_access of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._configuration_manager_access = configuration_manager_access

    @property
    def configuration(self):
        """Gets the configuration of this ConfigurationManagerPrivilegeCategory.  # noqa: E501

        Configuration access level (None, Browse, Update, Full)  # noqa: E501

        :return: The configuration of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ConfigurationManagerPrivilegeCategory.

        Configuration access level (None, Browse, Update, Full)  # noqa: E501

        :param configuration: The configuration of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def operation(self):
        """Gets the operation of this ConfigurationManagerPrivilegeCategory.  # noqa: E501

        Operation access level (None, Browse, Update, Full)  # noqa: E501

        :return: The operation of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ConfigurationManagerPrivilegeCategory.

        Operation access level (None, Browse, Update, Full)  # noqa: E501

        :param operation: The operation of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def database(self):
        """Gets the database of this ConfigurationManagerPrivilegeCategory.  # noqa: E501

        Database Maintenance access level (None, Browse, Update, Full)  # noqa: E501

        :return: The database of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ConfigurationManagerPrivilegeCategory.

        Database Maintenance access level (None, Browse, Update, Full)  # noqa: E501

        :param database: The database of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def controlm_security(self):
        """Gets the controlm_security of this ConfigurationManagerPrivilegeCategory.  # noqa: E501

        Security access level (None, Browse, Update, Full)  # noqa: E501

        :return: The controlm_security of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._controlm_security

    @controlm_security.setter
    def controlm_security(self, controlm_security):
        """Sets the controlm_security of this ConfigurationManagerPrivilegeCategory.

        Security access level (None, Browse, Update, Full)  # noqa: E501

        :param controlm_security: The controlm_security of this ConfigurationManagerPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._controlm_security = controlm_security

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationManagerPrivilegeCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationManagerPrivilegeCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
