# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'ctm': 'str',
        'available': 'str',
        'max': 'int',
        'workload_policy': 'str'
    }

    attribute_map = {
        'name': 'name',
        'ctm': 'ctm',
        'available': 'available',
        'max': 'max',
        'workload_policy': 'workloadPolicy'
    }

    def __init__(self, name=None, ctm=None, available=None, max=None, workload_policy=None):  # noqa: E501
        """ResourceObj - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._ctm = None
        self._available = None
        self._max = None
        self._workload_policy = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if ctm is not None:
            self.ctm = ctm
        if available is not None:
            self.available = available
        if max is not None:
            self.max = max
        if workload_policy is not None:
            self.workload_policy = workload_policy

    @property
    def name(self):
        """Gets the name of this ResourceObj.  # noqa: E501

        Resource name  # noqa: E501

        :return: The name of this ResourceObj.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceObj.

        Resource name  # noqa: E501

        :param name: The name of this ResourceObj.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ctm(self):
        """Gets the ctm of this ResourceObj.  # noqa: E501

        Control-M Server hosting the resource  # noqa: E501

        :return: The ctm of this ResourceObj.  # noqa: E501
        :rtype: str
        """
        return self._ctm

    @ctm.setter
    def ctm(self, ctm):
        """Sets the ctm of this ResourceObj.

        Control-M Server hosting the resource  # noqa: E501

        :param ctm: The ctm of this ResourceObj.  # noqa: E501
        :type: str
        """

        self._ctm = ctm

    @property
    def available(self):
        """Gets the available of this ResourceObj.  # noqa: E501

        The resource q current quantity.  # noqa: E501

        :return: The available of this ResourceObj.  # noqa: E501
        :rtype: str
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ResourceObj.

        The resource q current quantity.  # noqa: E501

        :param available: The available of this ResourceObj.  # noqa: E501
        :type: str
        """

        self._available = available

    @property
    def max(self):
        """Gets the max of this ResourceObj.  # noqa: E501

        The resource q max usage value.  # noqa: E501

        :return: The max of this ResourceObj.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this ResourceObj.

        The resource q max usage value.  # noqa: E501

        :param max: The max of this ResourceObj.  # noqa: E501
        :type: int
        """

        self._max = max

    @property
    def workload_policy(self):
        """Gets the workload_policy of this ResourceObj.  # noqa: E501

        Workload Policy.  # noqa: E501

        :return: The workload_policy of this ResourceObj.  # noqa: E501
        :rtype: str
        """
        return self._workload_policy

    @workload_policy.setter
    def workload_policy(self, workload_policy):
        """Sets the workload_policy of this ResourceObj.

        Workload Policy.  # noqa: E501

        :param workload_policy: The workload_policy of this ResourceObj.  # noqa: E501
        :type: str
        """

        self._workload_policy = workload_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceObj):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
