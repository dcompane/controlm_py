# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CtmSecActiveSecAttrType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'node_group': 'str',
        'order': 'str',
        'force': 'str',
        'rerun': 'str',
        'hold': 'str',
        'confirm': 'str',
        'delete': 'str',
        'why': 'str',
        'sysout': 'str',
        'log': 'str',
        'statistics': 'str',
        'zoom_and_save': 'str',
        'kill_job': 'str'
    }

    attribute_map = {
        'owner': 'Owner',
        'node_group': 'NodeGroup',
        'order': 'Order',
        'force': 'Force',
        'rerun': 'Rerun',
        'hold': 'Hold',
        'confirm': 'Confirm',
        'delete': 'Delete',
        'why': 'Why',
        'sysout': 'Sysout',
        'log': 'Log',
        'statistics': 'Statistics',
        'zoom_and_save': 'ZoomAndSave',
        'kill_job': 'KillJob'
    }

    def __init__(self, owner=None, node_group=None, order=None, force=None, rerun=None, hold=None, confirm=None, delete=None, why=None, sysout=None, log=None, statistics=None, zoom_and_save=None, kill_job=None):  # noqa: E501
        """CtmSecActiveSecAttrType - a model defined in Swagger"""  # noqa: E501
        self._owner = None
        self._node_group = None
        self._order = None
        self._force = None
        self._rerun = None
        self._hold = None
        self._confirm = None
        self._delete = None
        self._why = None
        self._sysout = None
        self._log = None
        self._statistics = None
        self._zoom_and_save = None
        self._kill_job = None
        self.discriminator = None
        if owner is not None:
            self.owner = owner
        if node_group is not None:
            self.node_group = node_group
        if order is not None:
            self.order = order
        if force is not None:
            self.force = force
        if rerun is not None:
            self.rerun = rerun
        if hold is not None:
            self.hold = hold
        if confirm is not None:
            self.confirm = confirm
        if delete is not None:
            self.delete = delete
        if why is not None:
            self.why = why
        if sysout is not None:
            self.sysout = sysout
        if log is not None:
            self.log = log
        if statistics is not None:
            self.statistics = statistics
        if zoom_and_save is not None:
            self.zoom_and_save = zoom_and_save
        if kill_job is not None:
            self.kill_job = kill_job

    @property
    def owner(self):
        """Gets the owner of this CtmSecActiveSecAttrType.  # noqa: E501

        Owner Name can not be empty  # noqa: E501

        :return: The owner of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CtmSecActiveSecAttrType.

        Owner Name can not be empty  # noqa: E501

        :param owner: The owner of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def node_group(self):
        """Gets the node_group of this CtmSecActiveSecAttrType.  # noqa: E501

        Node GroupName can  be empty  # noqa: E501

        :return: The node_group of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._node_group

    @node_group.setter
    def node_group(self, node_group):
        """Sets the node_group of this CtmSecActiveSecAttrType.

        Node GroupName can  be empty  # noqa: E501

        :param node_group: The node_group of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._node_group = node_group

    @property
    def order(self):
        """Gets the order of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The order of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param order: The order of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def force(self):
        """Gets the force of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The force of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param force: The force of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._force = force

    @property
    def rerun(self):
        """Gets the rerun of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The rerun of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._rerun

    @rerun.setter
    def rerun(self, rerun):
        """Sets the rerun of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param rerun: The rerun of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._rerun = rerun

    @property
    def hold(self):
        """Gets the hold of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The hold of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param hold: The hold of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._hold = hold

    @property
    def confirm(self):
        """Gets the confirm of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The confirm of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param confirm: The confirm of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._confirm = confirm

    @property
    def delete(self):
        """Gets the delete of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The delete of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param delete: The delete of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._delete = delete

    @property
    def why(self):
        """Gets the why of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The why of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._why

    @why.setter
    def why(self, why):
        """Sets the why of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param why: The why of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._why = why

    @property
    def sysout(self):
        """Gets the sysout of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The sysout of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._sysout

    @sysout.setter
    def sysout(self, sysout):
        """Sets the sysout of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param sysout: The sysout of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._sysout = sysout

    @property
    def log(self):
        """Gets the log of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The log of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param log: The log of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._log = log

    @property
    def statistics(self):
        """Gets the statistics of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The statistics of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param statistics: The statistics of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._statistics = statistics

    @property
    def zoom_and_save(self):
        """Gets the zoom_and_save of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The zoom_and_save of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._zoom_and_save

    @zoom_and_save.setter
    def zoom_and_save(self, zoom_and_save):
        """Sets the zoom_and_save of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param zoom_and_save: The zoom_and_save of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._zoom_and_save = zoom_and_save

    @property
    def kill_job(self):
        """Gets the kill_job of this CtmSecActiveSecAttrType.  # noqa: E501

        Values  Y N D for Yes No Default  # noqa: E501

        :return: The kill_job of this CtmSecActiveSecAttrType.  # noqa: E501
        :rtype: str
        """
        return self._kill_job

    @kill_job.setter
    def kill_job(self, kill_job):
        """Sets the kill_job of this CtmSecActiveSecAttrType.

        Values  Y N D for Yes No Default  # noqa: E501

        :param kill_job: The kill_job of this CtmSecActiveSecAttrType.  # noqa: E501
        :type: str
        """

        self._kill_job = kill_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CtmSecActiveSecAttrType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CtmSecActiveSecAttrType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
