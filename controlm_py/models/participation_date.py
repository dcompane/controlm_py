# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParticipationDate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_days': 'bool',
        'every_week_days': 'list[str]',
        'between_date': 'BetweenDate',
        'between_date_time': 'BetweenDateTime',
        'between_week_day_time': 'BetweenWeekDayTime',
        'on_dates': 'list[str]'
    }

    attribute_map = {
        'all_days': 'allDays',
        'every_week_days': 'everyWeekDays',
        'between_date': 'betweenDate',
        'between_date_time': 'betweenDateTime',
        'between_week_day_time': 'betweenWeekDayTime',
        'on_dates': 'onDates'
    }

    def __init__(self, all_days=None, every_week_days=None, between_date=None, between_date_time=None, between_week_day_time=None, on_dates=None):  # noqa: E501
        """ParticipationDate - a model defined in Swagger"""  # noqa: E501
        self._all_days = None
        self._every_week_days = None
        self._between_date = None
        self._between_date_time = None
        self._between_week_day_time = None
        self._on_dates = None
        self.discriminator = None
        if all_days is not None:
            self.all_days = all_days
        if every_week_days is not None:
            self.every_week_days = every_week_days
        if between_date is not None:
            self.between_date = between_date
        if between_date_time is not None:
            self.between_date_time = between_date_time
        if between_week_day_time is not None:
            self.between_week_day_time = between_week_day_time
        if on_dates is not None:
            self.on_dates = on_dates

    @property
    def all_days(self):
        """Gets the all_days of this ParticipationDate.  # noqa: E501

        all days.  # noqa: E501

        :return: The all_days of this ParticipationDate.  # noqa: E501
        :rtype: bool
        """
        return self._all_days

    @all_days.setter
    def all_days(self, all_days):
        """Sets the all_days of this ParticipationDate.

        all days.  # noqa: E501

        :param all_days: The all_days of this ParticipationDate.  # noqa: E501
        :type: bool
        """

        self._all_days = all_days

    @property
    def every_week_days(self):
        """Gets the every_week_days of this ParticipationDate.  # noqa: E501

        every week days. \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\".  # noqa: E501

        :return: The every_week_days of this ParticipationDate.  # noqa: E501
        :rtype: list[str]
        """
        return self._every_week_days

    @every_week_days.setter
    def every_week_days(self, every_week_days):
        """Sets the every_week_days of this ParticipationDate.

        every week days. \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\".  # noqa: E501

        :param every_week_days: The every_week_days of this ParticipationDate.  # noqa: E501
        :type: list[str]
        """

        self._every_week_days = every_week_days

    @property
    def between_date(self):
        """Gets the between_date of this ParticipationDate.  # noqa: E501


        :return: The between_date of this ParticipationDate.  # noqa: E501
        :rtype: BetweenDate
        """
        return self._between_date

    @between_date.setter
    def between_date(self, between_date):
        """Sets the between_date of this ParticipationDate.


        :param between_date: The between_date of this ParticipationDate.  # noqa: E501
        :type: BetweenDate
        """

        self._between_date = between_date

    @property
    def between_date_time(self):
        """Gets the between_date_time of this ParticipationDate.  # noqa: E501


        :return: The between_date_time of this ParticipationDate.  # noqa: E501
        :rtype: BetweenDateTime
        """
        return self._between_date_time

    @between_date_time.setter
    def between_date_time(self, between_date_time):
        """Sets the between_date_time of this ParticipationDate.


        :param between_date_time: The between_date_time of this ParticipationDate.  # noqa: E501
        :type: BetweenDateTime
        """

        self._between_date_time = between_date_time

    @property
    def between_week_day_time(self):
        """Gets the between_week_day_time of this ParticipationDate.  # noqa: E501


        :return: The between_week_day_time of this ParticipationDate.  # noqa: E501
        :rtype: BetweenWeekDayTime
        """
        return self._between_week_day_time

    @between_week_day_time.setter
    def between_week_day_time(self, between_week_day_time):
        """Sets the between_week_day_time of this ParticipationDate.


        :param between_week_day_time: The between_week_day_time of this ParticipationDate.  # noqa: E501
        :type: BetweenWeekDayTime
        """

        self._between_week_day_time = between_week_day_time

    @property
    def on_dates(self):
        """Gets the on_dates of this ParticipationDate.  # noqa: E501

        Specific dates in format YYYYMMDD.  # noqa: E501

        :return: The on_dates of this ParticipationDate.  # noqa: E501
        :rtype: list[str]
        """
        return self._on_dates

    @on_dates.setter
    def on_dates(self, on_dates):
        """Sets the on_dates of this ParticipationDate.

        Specific dates in format YYYYMMDD.  # noqa: E501

        :param on_dates: The on_dates of this ParticipationDate.  # noqa: E501
        :type: list[str]
        """

        self._on_dates = on_dates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParticipationDate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticipationDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
