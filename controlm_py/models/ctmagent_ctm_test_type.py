# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CtmagentCtmTestType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'result': 'str',
        'message': 'str',
        'user_action': 'str',
        'command': 'str',
        'command_output': 'str',
        'advanced': 'int',
        'ordinal': 'int'
    }

    attribute_map = {
        'title': 'title',
        'result': 'result',
        'message': 'message',
        'user_action': 'userAction',
        'command': 'command',
        'command_output': 'commandOutput',
        'advanced': 'advanced',
        'ordinal': 'ordinal'
    }

    def __init__(self, title=None, result=None, message=None, user_action=None, command=None, command_output=None, advanced=None, ordinal=None):  # noqa: E501
        """CtmagentCtmTestType - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._result = None
        self._message = None
        self._user_action = None
        self._command = None
        self._command_output = None
        self._advanced = None
        self._ordinal = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if result is not None:
            self.result = result
        if message is not None:
            self.message = message
        if user_action is not None:
            self.user_action = user_action
        if command is not None:
            self.command = command
        if command_output is not None:
            self.command_output = command_output
        if advanced is not None:
            self.advanced = advanced
        if ordinal is not None:
            self.ordinal = ordinal

    @property
    def title(self):
        """Gets the title of this CtmagentCtmTestType.  # noqa: E501

        the test title  # noqa: E501

        :return: The title of this CtmagentCtmTestType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CtmagentCtmTestType.

        the test title  # noqa: E501

        :param title: The title of this CtmagentCtmTestType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def result(self):
        """Gets the result of this CtmagentCtmTestType.  # noqa: E501

        the test result  # noqa: E501

        :return: The result of this CtmagentCtmTestType.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CtmagentCtmTestType.

        the test result  # noqa: E501

        :param result: The result of this CtmagentCtmTestType.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def message(self):
        """Gets the message of this CtmagentCtmTestType.  # noqa: E501

        the test message  # noqa: E501

        :return: The message of this CtmagentCtmTestType.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CtmagentCtmTestType.

        the test message  # noqa: E501

        :param message: The message of this CtmagentCtmTestType.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def user_action(self):
        """Gets the user_action of this CtmagentCtmTestType.  # noqa: E501

        the action user initiated  # noqa: E501

        :return: The user_action of this CtmagentCtmTestType.  # noqa: E501
        :rtype: str
        """
        return self._user_action

    @user_action.setter
    def user_action(self, user_action):
        """Sets the user_action of this CtmagentCtmTestType.

        the action user initiated  # noqa: E501

        :param user_action: The user_action of this CtmagentCtmTestType.  # noqa: E501
        :type: str
        """

        self._user_action = user_action

    @property
    def command(self):
        """Gets the command of this CtmagentCtmTestType.  # noqa: E501

        the test's command  # noqa: E501

        :return: The command of this CtmagentCtmTestType.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this CtmagentCtmTestType.

        the test's command  # noqa: E501

        :param command: The command of this CtmagentCtmTestType.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def command_output(self):
        """Gets the command_output of this CtmagentCtmTestType.  # noqa: E501

        the command's output  # noqa: E501

        :return: The command_output of this CtmagentCtmTestType.  # noqa: E501
        :rtype: str
        """
        return self._command_output

    @command_output.setter
    def command_output(self, command_output):
        """Sets the command_output of this CtmagentCtmTestType.

        the command's output  # noqa: E501

        :param command_output: The command_output of this CtmagentCtmTestType.  # noqa: E501
        :type: str
        """

        self._command_output = command_output

    @property
    def advanced(self):
        """Gets the advanced of this CtmagentCtmTestType.  # noqa: E501

        the test advanced option  # noqa: E501

        :return: The advanced of this CtmagentCtmTestType.  # noqa: E501
        :rtype: int
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this CtmagentCtmTestType.

        the test advanced option  # noqa: E501

        :param advanced: The advanced of this CtmagentCtmTestType.  # noqa: E501
        :type: int
        """

        self._advanced = advanced

    @property
    def ordinal(self):
        """Gets the ordinal of this CtmagentCtmTestType.  # noqa: E501

        the test oridnal  # noqa: E501

        :return: The ordinal of this CtmagentCtmTestType.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CtmagentCtmTestType.

        the test oridnal  # noqa: E501

        :param ordinal: The ordinal of this CtmagentCtmTestType.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CtmagentCtmTestType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CtmagentCtmTestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
