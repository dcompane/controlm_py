# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteStandardChangeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_standard': 'SiteStandard',
        'annotation_details': 'AnnotationDetails',
        'overwrite': 'bool'
    }

    attribute_map = {
        'site_standard': 'siteStandard',
        'annotation_details': 'annotationDetails',
        'overwrite': 'overwrite'
    }

    def __init__(self, site_standard=None, annotation_details=None, overwrite=None):  # noqa: E501
        """SiteStandardChangeDetails - a model defined in Swagger"""  # noqa: E501
        self._site_standard = None
        self._annotation_details = None
        self._overwrite = None
        self.discriminator = None
        self.site_standard = site_standard
        if annotation_details is not None:
            self.annotation_details = annotation_details
        if overwrite is not None:
            self.overwrite = overwrite

    @property
    def site_standard(self):
        """Gets the site_standard of this SiteStandardChangeDetails.  # noqa: E501


        :return: The site_standard of this SiteStandardChangeDetails.  # noqa: E501
        :rtype: SiteStandard
        """
        return self._site_standard

    @site_standard.setter
    def site_standard(self, site_standard):
        """Sets the site_standard of this SiteStandardChangeDetails.


        :param site_standard: The site_standard of this SiteStandardChangeDetails.  # noqa: E501
        :type: SiteStandard
        """
        if site_standard is None:
            raise ValueError("Invalid value for `site_standard`, must not be `None`")  # noqa: E501

        self._site_standard = site_standard

    @property
    def annotation_details(self):
        """Gets the annotation_details of this SiteStandardChangeDetails.  # noqa: E501


        :return: The annotation_details of this SiteStandardChangeDetails.  # noqa: E501
        :rtype: AnnotationDetails
        """
        return self._annotation_details

    @annotation_details.setter
    def annotation_details(self, annotation_details):
        """Sets the annotation_details of this SiteStandardChangeDetails.


        :param annotation_details: The annotation_details of this SiteStandardChangeDetails.  # noqa: E501
        :type: AnnotationDetails
        """

        self._annotation_details = annotation_details

    @property
    def overwrite(self):
        """Gets the overwrite of this SiteStandardChangeDetails.  # noqa: E501

        In case of update, if the site standard was updated by another user since the last update, the update will fail unless this property is set to true  # noqa: E501

        :return: The overwrite of this SiteStandardChangeDetails.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this SiteStandardChangeDetails.

        In case of update, if the site standard was updated by another user since the last update, the update will fail unless this property is set to true  # noqa: E501

        :param overwrite: The overwrite of this SiteStandardChangeDetails.  # noqa: E501
        :type: bool
        """

        self._overwrite = overwrite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteStandardChangeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteStandardChangeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
