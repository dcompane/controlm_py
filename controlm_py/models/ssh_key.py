# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SSHKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_name': 'str',
        'bits': 'int',
        'format': 'str',
        'type': 'str',
        'min_agent_version': 'str'
    }

    attribute_map = {
        'key_name': 'keyName',
        'bits': 'bits',
        'format': 'format',
        'type': 'type',
        'min_agent_version': 'MinAgentVersion'
    }

    def __init__(self, key_name=None, bits=None, format=None, type=None, min_agent_version=None):  # noqa: E501
        """SSHKey - a model defined in Swagger"""  # noqa: E501
        self._key_name = None
        self._bits = None
        self._format = None
        self._type = None
        self._min_agent_version = None
        self.discriminator = None
        if key_name is not None:
            self.key_name = key_name
        if bits is not None:
            self.bits = bits
        if format is not None:
            self.format = format
        if type is not None:
            self.type = type
        if min_agent_version is not None:
            self.min_agent_version = min_agent_version

    @property
    def key_name(self):
        """Gets the key_name of this SSHKey.  # noqa: E501

        The name for the key . REQUIRED.  # noqa: E501

        :return: The key_name of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this SSHKey.

        The name for the key . REQUIRED.  # noqa: E501

        :param key_name: The key_name of this SSHKey.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def bits(self):
        """Gets the bits of this SSHKey.  # noqa: E501

        Generated keys defined with larger bits provides enhanced security.  For ctm versions under v22:   [512/768/1024 (Default)/2048/3072]  For ctm versions v22 and above:   - For RSA: 3072, 4096 (Default)   - For ECDSA: 256 (Default), 384, 521   # noqa: E501

        :return: The bits of this SSHKey.  # noqa: E501
        :rtype: int
        """
        return self._bits

    @bits.setter
    def bits(self, bits):
        """Sets the bits of this SSHKey.

        Generated keys defined with larger bits provides enhanced security.  For ctm versions under v22:   [512/768/1024 (Default)/2048/3072]  For ctm versions v22 and above:   - For RSA: 3072, 4096 (Default)   - For ECDSA: 256 (Default), 384, 521   # noqa: E501

        :param bits: The bits of this SSHKey.  # noqa: E501
        :type: int
        """

        self._bits = bits

    @property
    def format(self):
        """Gets the format of this SSHKey.  # noqa: E501

        The format of the SSH key to generate. [OpenSSH/SSH2]  # noqa: E501

        :return: The format of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SSHKey.

        The format of the SSH key to generate. [OpenSSH/SSH2]  # noqa: E501

        :param format: The format of this SSHKey.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def type(self):
        """Gets the type of this SSHKey.  # noqa: E501

        The type of the SSH key to generate.  - For ctm versions under v22: [RSA (Default), DSA] - For ctm versions v22 and above: [RSA, ECDSA (Default)]   # noqa: E501

        :return: The type of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SSHKey.

        The type of the SSH key to generate.  - For ctm versions under v22: [RSA (Default), DSA] - For ctm versions v22 and above: [RSA, ECDSA (Default)]   # noqa: E501

        :param type: The type of this SSHKey.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def min_agent_version(self):
        """Gets the min_agent_version of this SSHKey.  # noqa: E501

        The minimum Agent version supporting this SSH Key type.  # noqa: E501

        :return: The min_agent_version of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._min_agent_version

    @min_agent_version.setter
    def min_agent_version(self, min_agent_version):
        """Sets the min_agent_version of this SSHKey.

        The minimum Agent version supporting this SSH Key type.  # noqa: E501

        :param min_agent_version: The min_agent_version of this SSHKey.  # noqa: E501
        :type: str
        """

        self._min_agent_version = min_agent_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSHKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSHKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
