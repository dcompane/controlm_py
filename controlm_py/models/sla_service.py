# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SLAService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_name': 'str',
        'status': 'str',
        'status_reason': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'due_time': 'str',
        'slack_time': 'str',
        'service_order_date_time': 'str',
        'scheduled_order_date': 'str',
        'service_job': 'str',
        'service_control_m': 'str',
        'priority': 'str',
        'note': 'str',
        'total_jobs': 'str',
        'jobs_completed': 'str',
        'jobs_without_statistics': 'str',
        'completion_percentage': 'str',
        'average_completion_time': 'str',
        'errors': 'str',
        'status_by_jobs': 'SLAServiceStatusByJobs'
    }

    attribute_map = {
        'service_name': 'serviceName',
        'status': 'status',
        'status_reason': 'statusReason',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'due_time': 'dueTime',
        'slack_time': 'slackTime',
        'service_order_date_time': 'serviceOrderDateTime',
        'scheduled_order_date': 'scheduledOrderDate',
        'service_job': 'serviceJob',
        'service_control_m': 'serviceControlM',
        'priority': 'priority',
        'note': 'note',
        'total_jobs': 'totalJobs',
        'jobs_completed': 'jobsCompleted',
        'jobs_without_statistics': 'jobsWithoutStatistics',
        'completion_percentage': 'completionPercentage',
        'average_completion_time': 'averageCompletionTime',
        'errors': 'errors',
        'status_by_jobs': 'statusByJobs'
    }

    def __init__(self, service_name=None, status=None, status_reason=None, start_time=None, end_time=None, due_time=None, slack_time=None, service_order_date_time=None, scheduled_order_date=None, service_job=None, service_control_m=None, priority=None, note=None, total_jobs=None, jobs_completed=None, jobs_without_statistics=None, completion_percentage=None, average_completion_time=None, errors=None, status_by_jobs=None):  # noqa: E501
        """SLAService - a model defined in Swagger"""  # noqa: E501
        self._service_name = None
        self._status = None
        self._status_reason = None
        self._start_time = None
        self._end_time = None
        self._due_time = None
        self._slack_time = None
        self._service_order_date_time = None
        self._scheduled_order_date = None
        self._service_job = None
        self._service_control_m = None
        self._priority = None
        self._note = None
        self._total_jobs = None
        self._jobs_completed = None
        self._jobs_without_statistics = None
        self._completion_percentage = None
        self._average_completion_time = None
        self._errors = None
        self._status_by_jobs = None
        self.discriminator = None
        if service_name is not None:
            self.service_name = service_name
        if status is not None:
            self.status = status
        if status_reason is not None:
            self.status_reason = status_reason
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if due_time is not None:
            self.due_time = due_time
        if slack_time is not None:
            self.slack_time = slack_time
        if service_order_date_time is not None:
            self.service_order_date_time = service_order_date_time
        if scheduled_order_date is not None:
            self.scheduled_order_date = scheduled_order_date
        if service_job is not None:
            self.service_job = service_job
        if service_control_m is not None:
            self.service_control_m = service_control_m
        if priority is not None:
            self.priority = priority
        if note is not None:
            self.note = note
        if total_jobs is not None:
            self.total_jobs = total_jobs
        if jobs_completed is not None:
            self.jobs_completed = jobs_completed
        if jobs_without_statistics is not None:
            self.jobs_without_statistics = jobs_without_statistics
        if completion_percentage is not None:
            self.completion_percentage = completion_percentage
        if average_completion_time is not None:
            self.average_completion_time = average_completion_time
        if errors is not None:
            self.errors = errors
        if status_by_jobs is not None:
            self.status_by_jobs = status_by_jobs

    @property
    def service_name(self):
        """Gets the service_name of this SLAService.  # noqa: E501

        Service Name  # noqa: E501

        :return: The service_name of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this SLAService.

        Service Name  # noqa: E501

        :param service_name: The service_name of this SLAService.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def status(self):
        """Gets the status of this SLAService.  # noqa: E501

        Status Code  # noqa: E501

        :return: The status of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SLAService.

        Status Code  # noqa: E501

        :param status: The status of this SLAService.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this SLAService.  # noqa: E501

        Status Reason  # noqa: E501

        :return: The status_reason of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this SLAService.

        Status Reason  # noqa: E501

        :param status_reason: The status_reason of this SLAService.  # noqa: E501
        :type: str
        """

        self._status_reason = status_reason

    @property
    def start_time(self):
        """Gets the start_time of this SLAService.  # noqa: E501

        Start Time  # noqa: E501

        :return: The start_time of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SLAService.

        Start Time  # noqa: E501

        :param start_time: The start_time of this SLAService.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this SLAService.  # noqa: E501

        End Time  # noqa: E501

        :return: The end_time of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SLAService.

        End Time  # noqa: E501

        :param end_time: The end_time of this SLAService.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def due_time(self):
        """Gets the due_time of this SLAService.  # noqa: E501

        Due Time  # noqa: E501

        :return: The due_time of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._due_time

    @due_time.setter
    def due_time(self, due_time):
        """Sets the due_time of this SLAService.

        Due Time  # noqa: E501

        :param due_time: The due_time of this SLAService.  # noqa: E501
        :type: str
        """

        self._due_time = due_time

    @property
    def slack_time(self):
        """Gets the slack_time of this SLAService.  # noqa: E501

        Slack Time  # noqa: E501

        :return: The slack_time of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._slack_time

    @slack_time.setter
    def slack_time(self, slack_time):
        """Sets the slack_time of this SLAService.

        Slack Time  # noqa: E501

        :param slack_time: The slack_time of this SLAService.  # noqa: E501
        :type: str
        """

        self._slack_time = slack_time

    @property
    def service_order_date_time(self):
        """Gets the service_order_date_time of this SLAService.  # noqa: E501

        Service Order DateTime  # noqa: E501

        :return: The service_order_date_time of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._service_order_date_time

    @service_order_date_time.setter
    def service_order_date_time(self, service_order_date_time):
        """Sets the service_order_date_time of this SLAService.

        Service Order DateTime  # noqa: E501

        :param service_order_date_time: The service_order_date_time of this SLAService.  # noqa: E501
        :type: str
        """

        self._service_order_date_time = service_order_date_time

    @property
    def scheduled_order_date(self):
        """Gets the scheduled_order_date of this SLAService.  # noqa: E501

        Control-M Order Date  # noqa: E501

        :return: The scheduled_order_date of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_order_date

    @scheduled_order_date.setter
    def scheduled_order_date(self, scheduled_order_date):
        """Sets the scheduled_order_date of this SLAService.

        Control-M Order Date  # noqa: E501

        :param scheduled_order_date: The scheduled_order_date of this SLAService.  # noqa: E501
        :type: str
        """

        self._scheduled_order_date = scheduled_order_date

    @property
    def service_job(self):
        """Gets the service_job of this SLAService.  # noqa: E501

        Service Key  # noqa: E501

        :return: The service_job of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._service_job

    @service_job.setter
    def service_job(self, service_job):
        """Sets the service_job of this SLAService.

        Service Key  # noqa: E501

        :param service_job: The service_job of this SLAService.  # noqa: E501
        :type: str
        """

        self._service_job = service_job

    @property
    def service_control_m(self):
        """Gets the service_control_m of this SLAService.  # noqa: E501

        Service Control-M  # noqa: E501

        :return: The service_control_m of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._service_control_m

    @service_control_m.setter
    def service_control_m(self, service_control_m):
        """Sets the service_control_m of this SLAService.

        Service Control-M  # noqa: E501

        :param service_control_m: The service_control_m of this SLAService.  # noqa: E501
        :type: str
        """

        self._service_control_m = service_control_m

    @property
    def priority(self):
        """Gets the priority of this SLAService.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SLAService.

        Priority  # noqa: E501

        :param priority: The priority of this SLAService.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def note(self):
        """Gets the note of this SLAService.  # noqa: E501

        User note  # noqa: E501

        :return: The note of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SLAService.

        User note  # noqa: E501

        :param note: The note of this SLAService.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def total_jobs(self):
        """Gets the total_jobs of this SLAService.  # noqa: E501

        Number of Jobs  # noqa: E501

        :return: The total_jobs of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._total_jobs

    @total_jobs.setter
    def total_jobs(self, total_jobs):
        """Sets the total_jobs of this SLAService.

        Number of Jobs  # noqa: E501

        :param total_jobs: The total_jobs of this SLAService.  # noqa: E501
        :type: str
        """

        self._total_jobs = total_jobs

    @property
    def jobs_completed(self):
        """Gets the jobs_completed of this SLAService.  # noqa: E501

        Jobs Completed  # noqa: E501

        :return: The jobs_completed of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._jobs_completed

    @jobs_completed.setter
    def jobs_completed(self, jobs_completed):
        """Sets the jobs_completed of this SLAService.

        Jobs Completed  # noqa: E501

        :param jobs_completed: The jobs_completed of this SLAService.  # noqa: E501
        :type: str
        """

        self._jobs_completed = jobs_completed

    @property
    def jobs_without_statistics(self):
        """Gets the jobs_without_statistics of this SLAService.  # noqa: E501

        Jobs without statistics  # noqa: E501

        :return: The jobs_without_statistics of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._jobs_without_statistics

    @jobs_without_statistics.setter
    def jobs_without_statistics(self, jobs_without_statistics):
        """Sets the jobs_without_statistics of this SLAService.

        Jobs without statistics  # noqa: E501

        :param jobs_without_statistics: The jobs_without_statistics of this SLAService.  # noqa: E501
        :type: str
        """

        self._jobs_without_statistics = jobs_without_statistics

    @property
    def completion_percentage(self):
        """Gets the completion_percentage of this SLAService.  # noqa: E501

        Completion Percentage  # noqa: E501

        :return: The completion_percentage of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage):
        """Sets the completion_percentage of this SLAService.

        Completion Percentage  # noqa: E501

        :param completion_percentage: The completion_percentage of this SLAService.  # noqa: E501
        :type: str
        """

        self._completion_percentage = completion_percentage

    @property
    def average_completion_time(self):
        """Gets the average_completion_time of this SLAService.  # noqa: E501

        Average Completion Time  # noqa: E501

        :return: The average_completion_time of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._average_completion_time

    @average_completion_time.setter
    def average_completion_time(self, average_completion_time):
        """Sets the average_completion_time of this SLAService.

        Average Completion Time  # noqa: E501

        :param average_completion_time: The average_completion_time of this SLAService.  # noqa: E501
        :type: str
        """

        self._average_completion_time = average_completion_time

    @property
    def errors(self):
        """Gets the errors of this SLAService.  # noqa: E501

        Error details  # noqa: E501

        :return: The errors of this SLAService.  # noqa: E501
        :rtype: str
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SLAService.

        Error details  # noqa: E501

        :param errors: The errors of this SLAService.  # noqa: E501
        :type: str
        """

        self._errors = errors

    @property
    def status_by_jobs(self):
        """Gets the status_by_jobs of this SLAService.  # noqa: E501


        :return: The status_by_jobs of this SLAService.  # noqa: E501
        :rtype: SLAServiceStatusByJobs
        """
        return self._status_by_jobs

    @status_by_jobs.setter
    def status_by_jobs(self, status_by_jobs):
        """Sets the status_by_jobs of this SLAService.


        :param status_by_jobs: The status_by_jobs of this SLAService.  # noqa: E501
        :type: SLAServiceStatusByJobs
        """

        self._status_by_jobs = status_by_jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SLAService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SLAService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
