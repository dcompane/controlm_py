# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HighAvailabilityStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_host': 'str',
        'status': 'str',
        'status_message': 'str',
        'high_availability_status': 'str',
        'primary_host': 'str',
        'secondary_host': 'str',
        'progress_information': 'HighAvailabilityProgressInformation'
    }

    attribute_map = {
        'active_host': 'activeHost',
        'status': 'status',
        'status_message': 'statusMessage',
        'high_availability_status': 'highAvailabilityStatus',
        'primary_host': 'primaryHost',
        'secondary_host': 'secondaryHost',
        'progress_information': 'progressInformation'
    }

    def __init__(self, active_host=None, status=None, status_message=None, high_availability_status=None, primary_host=None, secondary_host=None, progress_information=None):  # noqa: E501
        """HighAvailabilityStatus - a model defined in Swagger"""  # noqa: E501
        self._active_host = None
        self._status = None
        self._status_message = None
        self._high_availability_status = None
        self._primary_host = None
        self._secondary_host = None
        self._progress_information = None
        self.discriminator = None
        if active_host is not None:
            self.active_host = active_host
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if high_availability_status is not None:
            self.high_availability_status = high_availability_status
        if primary_host is not None:
            self.primary_host = primary_host
        if secondary_host is not None:
            self.secondary_host = secondary_host
        if progress_information is not None:
            self.progress_information = progress_information

    @property
    def active_host(self):
        """Gets the active_host of this HighAvailabilityStatus.  # noqa: E501


        :return: The active_host of this HighAvailabilityStatus.  # noqa: E501
        :rtype: str
        """
        return self._active_host

    @active_host.setter
    def active_host(self, active_host):
        """Sets the active_host of this HighAvailabilityStatus.


        :param active_host: The active_host of this HighAvailabilityStatus.  # noqa: E501
        :type: str
        """

        self._active_host = active_host

    @property
    def status(self):
        """Gets the status of this HighAvailabilityStatus.  # noqa: E501


        :return: The status of this HighAvailabilityStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HighAvailabilityStatus.


        :param status: The status of this HighAvailabilityStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this HighAvailabilityStatus.  # noqa: E501


        :return: The status_message of this HighAvailabilityStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this HighAvailabilityStatus.


        :param status_message: The status_message of this HighAvailabilityStatus.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def high_availability_status(self):
        """Gets the high_availability_status of this HighAvailabilityStatus.  # noqa: E501


        :return: The high_availability_status of this HighAvailabilityStatus.  # noqa: E501
        :rtype: str
        """
        return self._high_availability_status

    @high_availability_status.setter
    def high_availability_status(self, high_availability_status):
        """Sets the high_availability_status of this HighAvailabilityStatus.


        :param high_availability_status: The high_availability_status of this HighAvailabilityStatus.  # noqa: E501
        :type: str
        """

        self._high_availability_status = high_availability_status

    @property
    def primary_host(self):
        """Gets the primary_host of this HighAvailabilityStatus.  # noqa: E501


        :return: The primary_host of this HighAvailabilityStatus.  # noqa: E501
        :rtype: str
        """
        return self._primary_host

    @primary_host.setter
    def primary_host(self, primary_host):
        """Sets the primary_host of this HighAvailabilityStatus.


        :param primary_host: The primary_host of this HighAvailabilityStatus.  # noqa: E501
        :type: str
        """

        self._primary_host = primary_host

    @property
    def secondary_host(self):
        """Gets the secondary_host of this HighAvailabilityStatus.  # noqa: E501


        :return: The secondary_host of this HighAvailabilityStatus.  # noqa: E501
        :rtype: str
        """
        return self._secondary_host

    @secondary_host.setter
    def secondary_host(self, secondary_host):
        """Sets the secondary_host of this HighAvailabilityStatus.


        :param secondary_host: The secondary_host of this HighAvailabilityStatus.  # noqa: E501
        :type: str
        """

        self._secondary_host = secondary_host

    @property
    def progress_information(self):
        """Gets the progress_information of this HighAvailabilityStatus.  # noqa: E501


        :return: The progress_information of this HighAvailabilityStatus.  # noqa: E501
        :rtype: HighAvailabilityProgressInformation
        """
        return self._progress_information

    @progress_information.setter
    def progress_information(self, progress_information):
        """Sets the progress_information of this HighAvailabilityStatus.


        :param progress_information: The progress_information of this HighAvailabilityStatus.  # noqa: E501
        :type: HighAvailabilityProgressInformation
        """

        self._progress_information = progress_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HighAvailabilityStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HighAvailabilityStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
