# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToolsPrivilegeCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cli': 'str',
        'batch_impact_manager_report': 'str',
        'sla_management_reports': 'str',
        'forecast_report': 'str',
        'history_reports': 'str',
        'control_m_report': 'str',
        'site_standard_policies': 'str'
    }

    attribute_map = {
        'cli': 'Cli',
        'batch_impact_manager_report': 'BatchImpactManagerReport',
        'sla_management_reports': 'SlaManagementReports',
        'forecast_report': 'ForecastReport',
        'history_reports': 'HistoryReports',
        'control_m_report': 'ControlMReport',
        'site_standard_policies': 'SiteStandardPolicies'
    }

    def __init__(self, cli=None, batch_impact_manager_report=None, sla_management_reports=None, forecast_report=None, history_reports=None, control_m_report=None, site_standard_policies=None):  # noqa: E501
        """ToolsPrivilegeCategory - a model defined in Swagger"""  # noqa: E501
        self._cli = None
        self._batch_impact_manager_report = None
        self._sla_management_reports = None
        self._forecast_report = None
        self._history_reports = None
        self._control_m_report = None
        self._site_standard_policies = None
        self.discriminator = None
        if cli is not None:
            self.cli = cli
        if batch_impact_manager_report is not None:
            self.batch_impact_manager_report = batch_impact_manager_report
        if sla_management_reports is not None:
            self.sla_management_reports = sla_management_reports
        if forecast_report is not None:
            self.forecast_report = forecast_report
        if history_reports is not None:
            self.history_reports = history_reports
        if control_m_report is not None:
            self.control_m_report = control_m_report
        if site_standard_policies is not None:
            self.site_standard_policies = site_standard_policies

    @property
    def cli(self):
        """Gets the cli of this ToolsPrivilegeCategory.  # noqa: E501

        CLI access level (None, Browse, Update, Full)  # noqa: E501

        :return: The cli of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._cli

    @cli.setter
    def cli(self, cli):
        """Sets the cli of this ToolsPrivilegeCategory.

        CLI access level (None, Browse, Update, Full)  # noqa: E501

        :param cli: The cli of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._cli = cli

    @property
    def batch_impact_manager_report(self):
        """Gets the batch_impact_manager_report of this ToolsPrivilegeCategory.  # noqa: E501

        BIM Reports access level (None, Browse, Update, Full)  # noqa: E501

        :return: The batch_impact_manager_report of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._batch_impact_manager_report

    @batch_impact_manager_report.setter
    def batch_impact_manager_report(self, batch_impact_manager_report):
        """Sets the batch_impact_manager_report of this ToolsPrivilegeCategory.

        BIM Reports access level (None, Browse, Update, Full)  # noqa: E501

        :param batch_impact_manager_report: The batch_impact_manager_report of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._batch_impact_manager_report = batch_impact_manager_report

    @property
    def sla_management_reports(self):
        """Gets the sla_management_reports of this ToolsPrivilegeCategory.  # noqa: E501

        SLA Management Reports access level (None, Browse, Update, Full)  # noqa: E501

        :return: The sla_management_reports of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._sla_management_reports

    @sla_management_reports.setter
    def sla_management_reports(self, sla_management_reports):
        """Sets the sla_management_reports of this ToolsPrivilegeCategory.

        SLA Management Reports access level (None, Browse, Update, Full)  # noqa: E501

        :param sla_management_reports: The sla_management_reports of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._sla_management_reports = sla_management_reports

    @property
    def forecast_report(self):
        """Gets the forecast_report of this ToolsPrivilegeCategory.  # noqa: E501

        Forecast Reports access level (None, Browse, Update, Full)  # noqa: E501

        :return: The forecast_report of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._forecast_report

    @forecast_report.setter
    def forecast_report(self, forecast_report):
        """Sets the forecast_report of this ToolsPrivilegeCategory.

        Forecast Reports access level (None, Browse, Update, Full)  # noqa: E501

        :param forecast_report: The forecast_report of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._forecast_report = forecast_report

    @property
    def history_reports(self):
        """Gets the history_reports of this ToolsPrivilegeCategory.  # noqa: E501

        History Reports access level (None, Browse, Update, Full)  # noqa: E501

        :return: The history_reports of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._history_reports

    @history_reports.setter
    def history_reports(self, history_reports):
        """Sets the history_reports of this ToolsPrivilegeCategory.

        History Reports access level (None, Browse, Update, Full)  # noqa: E501

        :param history_reports: The history_reports of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._history_reports = history_reports

    @property
    def control_m_report(self):
        """Gets the control_m_report of this ToolsPrivilegeCategory.  # noqa: E501

        Control-M Reports access level (None, Full)  # noqa: E501

        :return: The control_m_report of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._control_m_report

    @control_m_report.setter
    def control_m_report(self, control_m_report):
        """Sets the control_m_report of this ToolsPrivilegeCategory.

        Control-M Reports access level (None, Full)  # noqa: E501

        :param control_m_report: The control_m_report of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._control_m_report = control_m_report

    @property
    def site_standard_policies(self):
        """Gets the site_standard_policies of this ToolsPrivilegeCategory.  # noqa: E501

        Site Standard Policies access level (Browse, Update, Full)  # noqa: E501

        :return: The site_standard_policies of this ToolsPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._site_standard_policies

    @site_standard_policies.setter
    def site_standard_policies(self, site_standard_policies):
        """Sets the site_standard_policies of this ToolsPrivilegeCategory.

        Site Standard Policies access level (Browse, Update, Full)  # noqa: E501

        :param site_standard_policies: The site_standard_policies of this ToolsPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._site_standard_policies = site_standard_policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolsPrivilegeCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolsPrivilegeCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
