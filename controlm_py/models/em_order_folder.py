# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmOrderFolder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_params': 'list[NameValueAttribute]',
        'em_job_id': 'list[EmJobsId]',
        'folder_name': 'str',
        'library': 'str',
        'order_parameters': 'OrderParameters'
    }

    attribute_map = {
        'additional_params': 'additional_params',
        'em_job_id': 'em_job_id',
        'folder_name': 'folder_name',
        'library': 'library',
        'order_parameters': 'order_parameters'
    }

    def __init__(self, additional_params=None, em_job_id=None, folder_name=None, library=None, order_parameters=None):  # noqa: E501
        """EmOrderFolder - a model defined in Swagger"""  # noqa: E501
        self._additional_params = None
        self._em_job_id = None
        self._folder_name = None
        self._library = None
        self._order_parameters = None
        self.discriminator = None
        if additional_params is not None:
            self.additional_params = additional_params
        if em_job_id is not None:
            self.em_job_id = em_job_id
        if folder_name is not None:
            self.folder_name = folder_name
        if library is not None:
            self.library = library
        if order_parameters is not None:
            self.order_parameters = order_parameters

    @property
    def additional_params(self):
        """Gets the additional_params of this EmOrderFolder.  # noqa: E501


        :return: The additional_params of this EmOrderFolder.  # noqa: E501
        :rtype: list[NameValueAttribute]
        """
        return self._additional_params

    @additional_params.setter
    def additional_params(self, additional_params):
        """Sets the additional_params of this EmOrderFolder.


        :param additional_params: The additional_params of this EmOrderFolder.  # noqa: E501
        :type: list[NameValueAttribute]
        """

        self._additional_params = additional_params

    @property
    def em_job_id(self):
        """Gets the em_job_id of this EmOrderFolder.  # noqa: E501


        :return: The em_job_id of this EmOrderFolder.  # noqa: E501
        :rtype: list[EmJobsId]
        """
        return self._em_job_id

    @em_job_id.setter
    def em_job_id(self, em_job_id):
        """Sets the em_job_id of this EmOrderFolder.


        :param em_job_id: The em_job_id of this EmOrderFolder.  # noqa: E501
        :type: list[EmJobsId]
        """

        self._em_job_id = em_job_id

    @property
    def folder_name(self):
        """Gets the folder_name of this EmOrderFolder.  # noqa: E501


        :return: The folder_name of this EmOrderFolder.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this EmOrderFolder.


        :param folder_name: The folder_name of this EmOrderFolder.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def library(self):
        """Gets the library of this EmOrderFolder.  # noqa: E501


        :return: The library of this EmOrderFolder.  # noqa: E501
        :rtype: str
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this EmOrderFolder.


        :param library: The library of this EmOrderFolder.  # noqa: E501
        :type: str
        """

        self._library = library

    @property
    def order_parameters(self):
        """Gets the order_parameters of this EmOrderFolder.  # noqa: E501


        :return: The order_parameters of this EmOrderFolder.  # noqa: E501
        :rtype: OrderParameters
        """
        return self._order_parameters

    @order_parameters.setter
    def order_parameters(self, order_parameters):
        """Sets the order_parameters of this EmOrderFolder.


        :param order_parameters: The order_parameters of this EmOrderFolder.  # noqa: E501
        :type: OrderParameters
        """

        self._order_parameters = order_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmOrderFolder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmOrderFolder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
