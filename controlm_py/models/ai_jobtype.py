# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AiJobtype(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_type_name': 'str',
        'job_type_id': 'str',
        'status': 'str',
        'description': 'str'
    }

    attribute_map = {
        'job_type_name': 'jobTypeName',
        'job_type_id': 'jobTypeId',
        'status': 'status',
        'description': 'description'
    }

    def __init__(self, job_type_name=None, job_type_id=None, status=None, description=None):  # noqa: E501
        """AiJobtype - a model defined in Swagger"""  # noqa: E501
        self._job_type_name = None
        self._job_type_id = None
        self._status = None
        self._description = None
        self.discriminator = None
        if job_type_name is not None:
            self.job_type_name = job_type_name
        if job_type_id is not None:
            self.job_type_id = job_type_id
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description

    @property
    def job_type_name(self):
        """Gets the job_type_name of this AiJobtype.  # noqa: E501

        Jobtype display name  # noqa: E501

        :return: The job_type_name of this AiJobtype.  # noqa: E501
        :rtype: str
        """
        return self._job_type_name

    @job_type_name.setter
    def job_type_name(self, job_type_name):
        """Sets the job_type_name of this AiJobtype.

        Jobtype display name  # noqa: E501

        :param job_type_name: The job_type_name of this AiJobtype.  # noqa: E501
        :type: str
        """

        self._job_type_name = job_type_name

    @property
    def job_type_id(self):
        """Gets the job_type_id of this AiJobtype.  # noqa: E501

        Jobtype internal appname  # noqa: E501

        :return: The job_type_id of this AiJobtype.  # noqa: E501
        :rtype: str
        """
        return self._job_type_id

    @job_type_id.setter
    def job_type_id(self, job_type_id):
        """Sets the job_type_id of this AiJobtype.

        Jobtype internal appname  # noqa: E501

        :param job_type_id: The job_type_id of this AiJobtype.  # noqa: E501
        :type: str
        """

        self._job_type_id = job_type_id

    @property
    def status(self):
        """Gets the status of this AiJobtype.  # noqa: E501

        Jobtype status ['ready to deploy', 'draft']  # noqa: E501

        :return: The status of this AiJobtype.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AiJobtype.

        Jobtype status ['ready to deploy', 'draft']  # noqa: E501

        :param status: The status of this AiJobtype.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this AiJobtype.  # noqa: E501

        Jobtype description  # noqa: E501

        :return: The description of this AiJobtype.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AiJobtype.

        Jobtype description  # noqa: E501

        :param description: The description of this AiJobtype.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AiJobtype, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AiJobtype):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
