# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteStandardData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_format_parts': 'list[ConditionFormatPart]',
        'field_rules': 'list[SiteStandardFieldRule]',
        'business_parameters': 'list[SiteStandardBusinessParameter]',
        'internal_rules': 'list[SiteStandardInternalRule]'
    }

    attribute_map = {
        'condition_format_parts': 'conditionFormatParts',
        'field_rules': 'fieldRules',
        'business_parameters': 'businessParameters',
        'internal_rules': 'internalRules'
    }

    def __init__(self, condition_format_parts=None, field_rules=None, business_parameters=None, internal_rules=None):  # noqa: E501
        """SiteStandardData - a model defined in Swagger"""  # noqa: E501
        self._condition_format_parts = None
        self._field_rules = None
        self._business_parameters = None
        self._internal_rules = None
        self.discriminator = None
        if condition_format_parts is not None:
            self.condition_format_parts = condition_format_parts
        if field_rules is not None:
            self.field_rules = field_rules
        if business_parameters is not None:
            self.business_parameters = business_parameters
        if internal_rules is not None:
            self.internal_rules = internal_rules

    @property
    def condition_format_parts(self):
        """Gets the condition_format_parts of this SiteStandardData.  # noqa: E501


        :return: The condition_format_parts of this SiteStandardData.  # noqa: E501
        :rtype: list[ConditionFormatPart]
        """
        return self._condition_format_parts

    @condition_format_parts.setter
    def condition_format_parts(self, condition_format_parts):
        """Sets the condition_format_parts of this SiteStandardData.


        :param condition_format_parts: The condition_format_parts of this SiteStandardData.  # noqa: E501
        :type: list[ConditionFormatPart]
        """

        self._condition_format_parts = condition_format_parts

    @property
    def field_rules(self):
        """Gets the field_rules of this SiteStandardData.  # noqa: E501


        :return: The field_rules of this SiteStandardData.  # noqa: E501
        :rtype: list[SiteStandardFieldRule]
        """
        return self._field_rules

    @field_rules.setter
    def field_rules(self, field_rules):
        """Sets the field_rules of this SiteStandardData.


        :param field_rules: The field_rules of this SiteStandardData.  # noqa: E501
        :type: list[SiteStandardFieldRule]
        """

        self._field_rules = field_rules

    @property
    def business_parameters(self):
        """Gets the business_parameters of this SiteStandardData.  # noqa: E501


        :return: The business_parameters of this SiteStandardData.  # noqa: E501
        :rtype: list[SiteStandardBusinessParameter]
        """
        return self._business_parameters

    @business_parameters.setter
    def business_parameters(self, business_parameters):
        """Sets the business_parameters of this SiteStandardData.


        :param business_parameters: The business_parameters of this SiteStandardData.  # noqa: E501
        :type: list[SiteStandardBusinessParameter]
        """

        self._business_parameters = business_parameters

    @property
    def internal_rules(self):
        """Gets the internal_rules of this SiteStandardData.  # noqa: E501


        :return: The internal_rules of this SiteStandardData.  # noqa: E501
        :rtype: list[SiteStandardInternalRule]
        """
        return self._internal_rules

    @internal_rules.setter
    def internal_rules(self, internal_rules):
        """Sets the internal_rules of this SiteStandardData.


        :param internal_rules: The internal_rules of this SiteStandardData.  # noqa: E501
        :type: list[SiteStandardInternalRule]
        """

        self._internal_rules = internal_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteStandardData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteStandardData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
