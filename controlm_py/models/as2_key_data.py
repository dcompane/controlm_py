# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class As2KeyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as2_id': 'str',
        'certificate': 'str',
        'destination_folder': 'str'
    }

    attribute_map = {
        'as2_id': 'as2Id',
        'certificate': 'certificate',
        'destination_folder': 'destinationFolder'
    }

    def __init__(self, as2_id=None, certificate=None, destination_folder=None):  # noqa: E501
        """As2KeyData - a model defined in Swagger"""  # noqa: E501
        self._as2_id = None
        self._certificate = None
        self._destination_folder = None
        self.discriminator = None
        if as2_id is not None:
            self.as2_id = as2_id
        if certificate is not None:
            self.certificate = certificate
        if destination_folder is not None:
            self.destination_folder = destination_folder

    @property
    def as2_id(self):
        """Gets the as2_id of this As2KeyData.  # noqa: E501

        as2 id HIDDEN  # noqa: E501

        :return: The as2_id of this As2KeyData.  # noqa: E501
        :rtype: str
        """
        return self._as2_id

    @as2_id.setter
    def as2_id(self, as2_id):
        """Sets the as2_id of this As2KeyData.

        as2 id HIDDEN  # noqa: E501

        :param as2_id: The as2_id of this As2KeyData.  # noqa: E501
        :type: str
        """

        self._as2_id = as2_id

    @property
    def certificate(self):
        """Gets the certificate of this As2KeyData.  # noqa: E501

        partners certificate alias HIDDEN  # noqa: E501

        :return: The certificate of this As2KeyData.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this As2KeyData.

        partners certificate alias HIDDEN  # noqa: E501

        :param certificate: The certificate of this As2KeyData.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def destination_folder(self):
        """Gets the destination_folder of this As2KeyData.  # noqa: E501

        AS2 destination folder HIDDEN  # noqa: E501

        :return: The destination_folder of this As2KeyData.  # noqa: E501
        :rtype: str
        """
        return self._destination_folder

    @destination_folder.setter
    def destination_folder(self, destination_folder):
        """Sets the destination_folder of this As2KeyData.

        AS2 destination folder HIDDEN  # noqa: E501

        :param destination_folder: The destination_folder of this As2KeyData.  # noqa: E501
        :type: str
        """

        self._destination_folder = destination_folder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(As2KeyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, As2KeyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
