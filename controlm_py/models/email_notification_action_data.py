# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailNotificationActionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_fails_behaviour': 'ActionFailsBehaviourData',
        'email_subject': 'str',
        'email_message': 'str',
        'notify_to': 'list[str]'
    }

    attribute_map = {
        'action_fails_behaviour': 'actionFailsBehaviour',
        'email_subject': 'emailSubject',
        'email_message': 'emailMessage',
        'notify_to': 'notifyTo'
    }

    def __init__(self, action_fails_behaviour=None, email_subject=None, email_message=None, notify_to=None):  # noqa: E501
        """EmailNotificationActionData - a model defined in Swagger"""  # noqa: E501
        self._action_fails_behaviour = None
        self._email_subject = None
        self._email_message = None
        self._notify_to = None
        self.discriminator = None
        if action_fails_behaviour is not None:
            self.action_fails_behaviour = action_fails_behaviour
        if email_subject is not None:
            self.email_subject = email_subject
        if email_message is not None:
            self.email_message = email_message
        if notify_to is not None:
            self.notify_to = notify_to

    @property
    def action_fails_behaviour(self):
        """Gets the action_fails_behaviour of this EmailNotificationActionData.  # noqa: E501


        :return: The action_fails_behaviour of this EmailNotificationActionData.  # noqa: E501
        :rtype: ActionFailsBehaviourData
        """
        return self._action_fails_behaviour

    @action_fails_behaviour.setter
    def action_fails_behaviour(self, action_fails_behaviour):
        """Sets the action_fails_behaviour of this EmailNotificationActionData.


        :param action_fails_behaviour: The action_fails_behaviour of this EmailNotificationActionData.  # noqa: E501
        :type: ActionFailsBehaviourData
        """

        self._action_fails_behaviour = action_fails_behaviour

    @property
    def email_subject(self):
        """Gets the email_subject of this EmailNotificationActionData.  # noqa: E501

        email subject  # noqa: E501

        :return: The email_subject of this EmailNotificationActionData.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this EmailNotificationActionData.

        email subject  # noqa: E501

        :param email_subject: The email_subject of this EmailNotificationActionData.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def email_message(self):
        """Gets the email_message of this EmailNotificationActionData.  # noqa: E501

        email message  # noqa: E501

        :return: The email_message of this EmailNotificationActionData.  # noqa: E501
        :rtype: str
        """
        return self._email_message

    @email_message.setter
    def email_message(self, email_message):
        """Sets the email_message of this EmailNotificationActionData.

        email message  # noqa: E501

        :param email_message: The email_message of this EmailNotificationActionData.  # noqa: E501
        :type: str
        """

        self._email_message = email_message

    @property
    def notify_to(self):
        """Gets the notify_to of this EmailNotificationActionData.  # noqa: E501

        array of emails addresses  # noqa: E501

        :return: The notify_to of this EmailNotificationActionData.  # noqa: E501
        :rtype: list[str]
        """
        return self._notify_to

    @notify_to.setter
    def notify_to(self, notify_to):
        """Sets the notify_to of this EmailNotificationActionData.

        array of emails addresses  # noqa: E501

        :param notify_to: The notify_to of this EmailNotificationActionData.  # noqa: E501
        :type: list[str]
        """

        self._notify_to = notify_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailNotificationActionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailNotificationActionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
