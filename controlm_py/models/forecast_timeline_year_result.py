# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ForecastTimelineYearResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'str',
        'jan': 'list[str]',
        'feb': 'list[str]',
        'mar': 'list[str]',
        'apr': 'list[str]',
        'may': 'list[str]',
        'jun': 'list[str]',
        'jul': 'list[str]',
        'aug': 'list[str]',
        'sep': 'list[str]',
        'oct': 'list[str]',
        'nov': 'list[str]',
        'dec': 'list[str]'
    }

    attribute_map = {
        'year': 'Year',
        'jan': 'JAN',
        'feb': 'FEB',
        'mar': 'MAR',
        'apr': 'APR',
        'may': 'MAY',
        'jun': 'JUN',
        'jul': 'JUL',
        'aug': 'AUG',
        'sep': 'SEP',
        'oct': 'OCT',
        'nov': 'NOV',
        'dec': 'DEC'
    }

    def __init__(self, year=None, jan=None, feb=None, mar=None, apr=None, may=None, jun=None, jul=None, aug=None, sep=None, oct=None, nov=None, dec=None):  # noqa: E501
        """ForecastTimelineYearResult - a model defined in Swagger"""  # noqa: E501
        self._year = None
        self._jan = None
        self._feb = None
        self._mar = None
        self._apr = None
        self._may = None
        self._jun = None
        self._jul = None
        self._aug = None
        self._sep = None
        self._oct = None
        self._nov = None
        self._dec = None
        self.discriminator = None
        if year is not None:
            self.year = year
        if jan is not None:
            self.jan = jan
        if feb is not None:
            self.feb = feb
        if mar is not None:
            self.mar = mar
        if apr is not None:
            self.apr = apr
        if may is not None:
            self.may = may
        if jun is not None:
            self.jun = jun
        if jul is not None:
            self.jul = jul
        if aug is not None:
            self.aug = aug
        if sep is not None:
            self.sep = sep
        if oct is not None:
            self.oct = oct
        if nov is not None:
            self.nov = nov
        if dec is not None:
            self.dec = dec

    @property
    def year(self):
        """Gets the year of this ForecastTimelineYearResult.  # noqa: E501

        year  # noqa: E501

        :return: The year of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ForecastTimelineYearResult.

        year  # noqa: E501

        :param year: The year of this ForecastTimelineYearResult.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def jan(self):
        """Gets the jan of this ForecastTimelineYearResult.  # noqa: E501

        JANUARY array of day ranges  # noqa: E501

        :return: The jan of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._jan

    @jan.setter
    def jan(self, jan):
        """Sets the jan of this ForecastTimelineYearResult.

        JANUARY array of day ranges  # noqa: E501

        :param jan: The jan of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._jan = jan

    @property
    def feb(self):
        """Gets the feb of this ForecastTimelineYearResult.  # noqa: E501

        FEBRUARY array of day ranges  # noqa: E501

        :return: The feb of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._feb

    @feb.setter
    def feb(self, feb):
        """Sets the feb of this ForecastTimelineYearResult.

        FEBRUARY array of day ranges  # noqa: E501

        :param feb: The feb of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._feb = feb

    @property
    def mar(self):
        """Gets the mar of this ForecastTimelineYearResult.  # noqa: E501

        MARCH array of day ranges  # noqa: E501

        :return: The mar of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._mar

    @mar.setter
    def mar(self, mar):
        """Sets the mar of this ForecastTimelineYearResult.

        MARCH array of day ranges  # noqa: E501

        :param mar: The mar of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._mar = mar

    @property
    def apr(self):
        """Gets the apr of this ForecastTimelineYearResult.  # noqa: E501

        APRIL array of day ranges  # noqa: E501

        :return: The apr of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this ForecastTimelineYearResult.

        APRIL array of day ranges  # noqa: E501

        :param apr: The apr of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._apr = apr

    @property
    def may(self):
        """Gets the may of this ForecastTimelineYearResult.  # noqa: E501

        MAY array of day ranges  # noqa: E501

        :return: The may of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._may

    @may.setter
    def may(self, may):
        """Sets the may of this ForecastTimelineYearResult.

        MAY array of day ranges  # noqa: E501

        :param may: The may of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._may = may

    @property
    def jun(self):
        """Gets the jun of this ForecastTimelineYearResult.  # noqa: E501

        JUNE array of day ranges  # noqa: E501

        :return: The jun of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._jun

    @jun.setter
    def jun(self, jun):
        """Sets the jun of this ForecastTimelineYearResult.

        JUNE array of day ranges  # noqa: E501

        :param jun: The jun of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._jun = jun

    @property
    def jul(self):
        """Gets the jul of this ForecastTimelineYearResult.  # noqa: E501

        JULY array of day ranges  # noqa: E501

        :return: The jul of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._jul

    @jul.setter
    def jul(self, jul):
        """Sets the jul of this ForecastTimelineYearResult.

        JULY array of day ranges  # noqa: E501

        :param jul: The jul of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._jul = jul

    @property
    def aug(self):
        """Gets the aug of this ForecastTimelineYearResult.  # noqa: E501

        AUGUST array of day ranges  # noqa: E501

        :return: The aug of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._aug

    @aug.setter
    def aug(self, aug):
        """Sets the aug of this ForecastTimelineYearResult.

        AUGUST array of day ranges  # noqa: E501

        :param aug: The aug of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._aug = aug

    @property
    def sep(self):
        """Gets the sep of this ForecastTimelineYearResult.  # noqa: E501

        SEPTEMBER array of day ranges  # noqa: E501

        :return: The sep of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._sep

    @sep.setter
    def sep(self, sep):
        """Sets the sep of this ForecastTimelineYearResult.

        SEPTEMBER array of day ranges  # noqa: E501

        :param sep: The sep of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._sep = sep

    @property
    def oct(self):
        """Gets the oct of this ForecastTimelineYearResult.  # noqa: E501

        OCTOBER array of day ranges  # noqa: E501

        :return: The oct of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._oct

    @oct.setter
    def oct(self, oct):
        """Sets the oct of this ForecastTimelineYearResult.

        OCTOBER array of day ranges  # noqa: E501

        :param oct: The oct of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._oct = oct

    @property
    def nov(self):
        """Gets the nov of this ForecastTimelineYearResult.  # noqa: E501

        NOVEMBER array of day ranges  # noqa: E501

        :return: The nov of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._nov

    @nov.setter
    def nov(self, nov):
        """Sets the nov of this ForecastTimelineYearResult.

        NOVEMBER array of day ranges  # noqa: E501

        :param nov: The nov of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._nov = nov

    @property
    def dec(self):
        """Gets the dec of this ForecastTimelineYearResult.  # noqa: E501

        DECEMBER array of day ranges  # noqa: E501

        :return: The dec of this ForecastTimelineYearResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._dec

    @dec.setter
    def dec(self, dec):
        """Sets the dec of this ForecastTimelineYearResult.

        DECEMBER array of day ranges  # noqa: E501

        :param dec: The dec of this ForecastTimelineYearResult.  # noqa: E501
        :type: list[str]
        """

        self._dec = dec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForecastTimelineYearResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastTimelineYearResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
