# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CtmServerMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owned_by': 'str',
        'name': 'str',
        'host': 'str',
        'state': 'str',
        'message': 'str',
        'version': 'str',
        'desired_state': 'str',
        'status': 'str',
        'os_type': 'str',
        'platform': 'str',
        'last_updated': 'str',
        'db_host': 'str',
        'has_high_availability': 'str',
        'primary_db_host': 'str',
        'secondary_db_host': 'str',
        'primary_host': 'str',
        'secondary_host': 'str',
        'fail_over_mode': 'str',
        'high_availability_process_name': 'str',
        'high_availability_status': 'str',
        'is_db_manager': 'str',
        'replication_status': 'str',
        'replication_mode': 'str',
        'admin_agent_status': 'str',
        'non_active_ca_status': 'str',
        'is_paused': 'str',
        'is_managed': 'str',
        'is_enabled': 'str',
        'ssl_state': 'str',
        'services': 'list[CtmServerComponentStatusInfo]',
        'gateways': 'list[CtmServerComponentStatusInfo]',
        'databases': 'list[CtmServerComponentStatusInfo]',
        'agents': 'list[CtmServerComponentStatusInfo]'
    }

    attribute_map = {
        'owned_by': 'ownedBy',
        'name': 'name',
        'host': 'host',
        'state': 'state',
        'message': 'message',
        'version': 'version',
        'desired_state': 'desiredState',
        'status': 'status',
        'os_type': 'osType',
        'platform': 'platform',
        'last_updated': 'lastUpdated',
        'db_host': 'dbHost',
        'has_high_availability': 'hasHighAvailability',
        'primary_db_host': 'primaryDBHost',
        'secondary_db_host': 'secondaryDbHost',
        'primary_host': 'primaryHost',
        'secondary_host': 'secondaryHost',
        'fail_over_mode': 'failOverMode',
        'high_availability_process_name': 'highAvailabilityProcessName',
        'high_availability_status': 'highAvailabilityStatus',
        'is_db_manager': 'isDBManager',
        'replication_status': 'replicationStatus',
        'replication_mode': 'replicationMode',
        'admin_agent_status': 'adminAgentStatus',
        'non_active_ca_status': 'nonActiveCAStatus',
        'is_paused': 'isPaused',
        'is_managed': 'isManaged',
        'is_enabled': 'isEnabled',
        'ssl_state': 'sslState',
        'services': 'services',
        'gateways': 'gateways',
        'databases': 'databases',
        'agents': 'agents'
    }

    def __init__(self, owned_by=None, name=None, host=None, state=None, message=None, version=None, desired_state=None, status=None, os_type=None, platform=None, last_updated=None, db_host=None, has_high_availability=None, primary_db_host=None, secondary_db_host=None, primary_host=None, secondary_host=None, fail_over_mode=None, high_availability_process_name=None, high_availability_status=None, is_db_manager=None, replication_status=None, replication_mode=None, admin_agent_status=None, non_active_ca_status=None, is_paused=None, is_managed=None, is_enabled=None, ssl_state=None, services=None, gateways=None, databases=None, agents=None):  # noqa: E501
        """CtmServerMetadata - a model defined in Swagger"""  # noqa: E501
        self._owned_by = None
        self._name = None
        self._host = None
        self._state = None
        self._message = None
        self._version = None
        self._desired_state = None
        self._status = None
        self._os_type = None
        self._platform = None
        self._last_updated = None
        self._db_host = None
        self._has_high_availability = None
        self._primary_db_host = None
        self._secondary_db_host = None
        self._primary_host = None
        self._secondary_host = None
        self._fail_over_mode = None
        self._high_availability_process_name = None
        self._high_availability_status = None
        self._is_db_manager = None
        self._replication_status = None
        self._replication_mode = None
        self._admin_agent_status = None
        self._non_active_ca_status = None
        self._is_paused = None
        self._is_managed = None
        self._is_enabled = None
        self._ssl_state = None
        self._services = None
        self._gateways = None
        self._databases = None
        self._agents = None
        self.discriminator = None
        if owned_by is not None:
            self.owned_by = owned_by
        if name is not None:
            self.name = name
        if host is not None:
            self.host = host
        if state is not None:
            self.state = state
        if message is not None:
            self.message = message
        if version is not None:
            self.version = version
        if desired_state is not None:
            self.desired_state = desired_state
        if status is not None:
            self.status = status
        if os_type is not None:
            self.os_type = os_type
        if platform is not None:
            self.platform = platform
        if last_updated is not None:
            self.last_updated = last_updated
        if db_host is not None:
            self.db_host = db_host
        if has_high_availability is not None:
            self.has_high_availability = has_high_availability
        if primary_db_host is not None:
            self.primary_db_host = primary_db_host
        if secondary_db_host is not None:
            self.secondary_db_host = secondary_db_host
        if primary_host is not None:
            self.primary_host = primary_host
        if secondary_host is not None:
            self.secondary_host = secondary_host
        if fail_over_mode is not None:
            self.fail_over_mode = fail_over_mode
        if high_availability_process_name is not None:
            self.high_availability_process_name = high_availability_process_name
        if high_availability_status is not None:
            self.high_availability_status = high_availability_status
        if is_db_manager is not None:
            self.is_db_manager = is_db_manager
        if replication_status is not None:
            self.replication_status = replication_status
        if replication_mode is not None:
            self.replication_mode = replication_mode
        if admin_agent_status is not None:
            self.admin_agent_status = admin_agent_status
        if non_active_ca_status is not None:
            self.non_active_ca_status = non_active_ca_status
        if is_paused is not None:
            self.is_paused = is_paused
        if is_managed is not None:
            self.is_managed = is_managed
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if ssl_state is not None:
            self.ssl_state = ssl_state
        if services is not None:
            self.services = services
        if gateways is not None:
            self.gateways = gateways
        if databases is not None:
            self.databases = databases
        if agents is not None:
            self.agents = agents

    @property
    def owned_by(self):
        """Gets the owned_by of this CtmServerMetadata.  # noqa: E501

        Is the server belongs to a saas environment  # noqa: E501

        :return: The owned_by of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this CtmServerMetadata.

        Is the server belongs to a saas environment  # noqa: E501

        :param owned_by: The owned_by of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._owned_by = owned_by

    @property
    def name(self):
        """Gets the name of this CtmServerMetadata.  # noqa: E501

        The server name  # noqa: E501

        :return: The name of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CtmServerMetadata.

        The server name  # noqa: E501

        :param name: The name of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this CtmServerMetadata.  # noqa: E501

        The server host  # noqa: E501

        :return: The host of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CtmServerMetadata.

        The server host  # noqa: E501

        :param host: The host of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def state(self):
        """Gets the state of this CtmServerMetadata.  # noqa: E501

        The server state  # noqa: E501

        :return: The state of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CtmServerMetadata.

        The server state  # noqa: E501

        :param state: The state of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def message(self):
        """Gets the message of this CtmServerMetadata.  # noqa: E501

        The server message  # noqa: E501

        :return: The message of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CtmServerMetadata.

        The server message  # noqa: E501

        :param message: The message of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def version(self):
        """Gets the version of this CtmServerMetadata.  # noqa: E501

        The server version  # noqa: E501

        :return: The version of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CtmServerMetadata.

        The server version  # noqa: E501

        :param version: The version of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def desired_state(self):
        """Gets the desired_state of this CtmServerMetadata.  # noqa: E501

        The server desired state  # noqa: E501

        :return: The desired_state of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this CtmServerMetadata.

        The server desired state  # noqa: E501

        :param desired_state: The desired_state of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._desired_state = desired_state

    @property
    def status(self):
        """Gets the status of this CtmServerMetadata.  # noqa: E501

        The server status  # noqa: E501

        :return: The status of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CtmServerMetadata.

        The server status  # noqa: E501

        :param status: The status of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def os_type(self):
        """Gets the os_type of this CtmServerMetadata.  # noqa: E501

        The server operating system  # noqa: E501

        :return: The os_type of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this CtmServerMetadata.

        The server operating system  # noqa: E501

        :param os_type: The os_type of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._os_type = os_type

    @property
    def platform(self):
        """Gets the platform of this CtmServerMetadata.  # noqa: E501

        The server platform  # noqa: E501

        :return: The platform of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CtmServerMetadata.

        The server platform  # noqa: E501

        :param platform: The platform of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def last_updated(self):
        """Gets the last_updated of this CtmServerMetadata.  # noqa: E501

        The server last updated date  # noqa: E501

        :return: The last_updated of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CtmServerMetadata.

        The server last updated date  # noqa: E501

        :param last_updated: The last_updated of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def db_host(self):
        """Gets the db_host of this CtmServerMetadata.  # noqa: E501

        The server database host  # noqa: E501

        :return: The db_host of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._db_host

    @db_host.setter
    def db_host(self, db_host):
        """Sets the db_host of this CtmServerMetadata.

        The server database host  # noqa: E501

        :param db_host: The db_host of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._db_host = db_host

    @property
    def has_high_availability(self):
        """Gets the has_high_availability of this CtmServerMetadata.  # noqa: E501

        Is server in high availability  # noqa: E501

        :return: The has_high_availability of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._has_high_availability

    @has_high_availability.setter
    def has_high_availability(self, has_high_availability):
        """Sets the has_high_availability of this CtmServerMetadata.

        Is server in high availability  # noqa: E501

        :param has_high_availability: The has_high_availability of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._has_high_availability = has_high_availability

    @property
    def primary_db_host(self):
        """Gets the primary_db_host of this CtmServerMetadata.  # noqa: E501

        The server primary database host  # noqa: E501

        :return: The primary_db_host of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._primary_db_host

    @primary_db_host.setter
    def primary_db_host(self, primary_db_host):
        """Sets the primary_db_host of this CtmServerMetadata.

        The server primary database host  # noqa: E501

        :param primary_db_host: The primary_db_host of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._primary_db_host = primary_db_host

    @property
    def secondary_db_host(self):
        """Gets the secondary_db_host of this CtmServerMetadata.  # noqa: E501

        The server secondary database host  # noqa: E501

        :return: The secondary_db_host of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._secondary_db_host

    @secondary_db_host.setter
    def secondary_db_host(self, secondary_db_host):
        """Sets the secondary_db_host of this CtmServerMetadata.

        The server secondary database host  # noqa: E501

        :param secondary_db_host: The secondary_db_host of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._secondary_db_host = secondary_db_host

    @property
    def primary_host(self):
        """Gets the primary_host of this CtmServerMetadata.  # noqa: E501

        The server primary host  # noqa: E501

        :return: The primary_host of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._primary_host

    @primary_host.setter
    def primary_host(self, primary_host):
        """Sets the primary_host of this CtmServerMetadata.

        The server primary host  # noqa: E501

        :param primary_host: The primary_host of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._primary_host = primary_host

    @property
    def secondary_host(self):
        """Gets the secondary_host of this CtmServerMetadata.  # noqa: E501

        The server secondary host  # noqa: E501

        :return: The secondary_host of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._secondary_host

    @secondary_host.setter
    def secondary_host(self, secondary_host):
        """Sets the secondary_host of this CtmServerMetadata.

        The server secondary host  # noqa: E501

        :param secondary_host: The secondary_host of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._secondary_host = secondary_host

    @property
    def fail_over_mode(self):
        """Gets the fail_over_mode of this CtmServerMetadata.  # noqa: E501

        The server high availability fail over mode  # noqa: E501

        :return: The fail_over_mode of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._fail_over_mode

    @fail_over_mode.setter
    def fail_over_mode(self, fail_over_mode):
        """Sets the fail_over_mode of this CtmServerMetadata.

        The server high availability fail over mode  # noqa: E501

        :param fail_over_mode: The fail_over_mode of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._fail_over_mode = fail_over_mode

    @property
    def high_availability_process_name(self):
        """Gets the high_availability_process_name of this CtmServerMetadata.  # noqa: E501

        High Availability process name  # noqa: E501

        :return: The high_availability_process_name of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._high_availability_process_name

    @high_availability_process_name.setter
    def high_availability_process_name(self, high_availability_process_name):
        """Sets the high_availability_process_name of this CtmServerMetadata.

        High Availability process name  # noqa: E501

        :param high_availability_process_name: The high_availability_process_name of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._high_availability_process_name = high_availability_process_name

    @property
    def high_availability_status(self):
        """Gets the high_availability_status of this CtmServerMetadata.  # noqa: E501

        The server high availability status  # noqa: E501

        :return: The high_availability_status of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._high_availability_status

    @high_availability_status.setter
    def high_availability_status(self, high_availability_status):
        """Sets the high_availability_status of this CtmServerMetadata.

        The server high availability status  # noqa: E501

        :param high_availability_status: The high_availability_status of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._high_availability_status = high_availability_status

    @property
    def is_db_manager(self):
        """Gets the is_db_manager of this CtmServerMetadata.  # noqa: E501

        Indicates if this host is manager of DB  # noqa: E501

        :return: The is_db_manager of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._is_db_manager

    @is_db_manager.setter
    def is_db_manager(self, is_db_manager):
        """Sets the is_db_manager of this CtmServerMetadata.

        Indicates if this host is manager of DB  # noqa: E501

        :param is_db_manager: The is_db_manager of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._is_db_manager = is_db_manager

    @property
    def replication_status(self):
        """Gets the replication_status of this CtmServerMetadata.  # noqa: E501

        Status of DB replication  # noqa: E501

        :return: The replication_status of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._replication_status

    @replication_status.setter
    def replication_status(self, replication_status):
        """Sets the replication_status of this CtmServerMetadata.

        Status of DB replication  # noqa: E501

        :param replication_status: The replication_status of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._replication_status = replication_status

    @property
    def replication_mode(self):
        """Gets the replication_mode of this CtmServerMetadata.  # noqa: E501

        Indicates which mode DB replication is in [Sync,  Async]  # noqa: E501

        :return: The replication_mode of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._replication_mode

    @replication_mode.setter
    def replication_mode(self, replication_mode):
        """Sets the replication_mode of this CtmServerMetadata.

        Indicates which mode DB replication is in [Sync,  Async]  # noqa: E501

        :param replication_mode: The replication_mode of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._replication_mode = replication_mode

    @property
    def admin_agent_status(self):
        """Gets the admin_agent_status of this CtmServerMetadata.  # noqa: E501

        Status of the Configuration Agent of the active host  # noqa: E501

        :return: The admin_agent_status of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._admin_agent_status

    @admin_agent_status.setter
    def admin_agent_status(self, admin_agent_status):
        """Sets the admin_agent_status of this CtmServerMetadata.

        Status of the Configuration Agent of the active host  # noqa: E501

        :param admin_agent_status: The admin_agent_status of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._admin_agent_status = admin_agent_status

    @property
    def non_active_ca_status(self):
        """Gets the non_active_ca_status of this CtmServerMetadata.  # noqa: E501

        Status of the Configuration Agent of the non-active host  # noqa: E501

        :return: The non_active_ca_status of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._non_active_ca_status

    @non_active_ca_status.setter
    def non_active_ca_status(self, non_active_ca_status):
        """Sets the non_active_ca_status of this CtmServerMetadata.

        Status of the Configuration Agent of the non-active host  # noqa: E501

        :param non_active_ca_status: The non_active_ca_status of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._non_active_ca_status = non_active_ca_status

    @property
    def is_paused(self):
        """Gets the is_paused of this CtmServerMetadata.  # noqa: E501

        Is the server in pause  # noqa: E501

        :return: The is_paused of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this CtmServerMetadata.

        Is the server in pause  # noqa: E501

        :param is_paused: The is_paused of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._is_paused = is_paused

    @property
    def is_managed(self):
        """Gets the is_managed of this CtmServerMetadata.  # noqa: E501

        Is the server in managed state  # noqa: E501

        :return: The is_managed of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this CtmServerMetadata.

        Is the server in managed state  # noqa: E501

        :param is_managed: The is_managed of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._is_managed = is_managed

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CtmServerMetadata.  # noqa: E501

        Is the server enabled  # noqa: E501

        :return: The is_enabled of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CtmServerMetadata.

        Is the server enabled  # noqa: E501

        :param is_enabled: The is_enabled of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._is_enabled = is_enabled

    @property
    def ssl_state(self):
        """Gets the ssl_state of this CtmServerMetadata.  # noqa: E501

        The server ssl state  # noqa: E501

        :return: The ssl_state of this CtmServerMetadata.  # noqa: E501
        :rtype: str
        """
        return self._ssl_state

    @ssl_state.setter
    def ssl_state(self, ssl_state):
        """Sets the ssl_state of this CtmServerMetadata.

        The server ssl state  # noqa: E501

        :param ssl_state: The ssl_state of this CtmServerMetadata.  # noqa: E501
        :type: str
        """

        self._ssl_state = ssl_state

    @property
    def services(self):
        """Gets the services of this CtmServerMetadata.  # noqa: E501

        The server services  # noqa: E501

        :return: The services of this CtmServerMetadata.  # noqa: E501
        :rtype: list[CtmServerComponentStatusInfo]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CtmServerMetadata.

        The server services  # noqa: E501

        :param services: The services of this CtmServerMetadata.  # noqa: E501
        :type: list[CtmServerComponentStatusInfo]
        """

        self._services = services

    @property
    def gateways(self):
        """Gets the gateways of this CtmServerMetadata.  # noqa: E501

        The server gateway  # noqa: E501

        :return: The gateways of this CtmServerMetadata.  # noqa: E501
        :rtype: list[CtmServerComponentStatusInfo]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this CtmServerMetadata.

        The server gateway  # noqa: E501

        :param gateways: The gateways of this CtmServerMetadata.  # noqa: E501
        :type: list[CtmServerComponentStatusInfo]
        """

        self._gateways = gateways

    @property
    def databases(self):
        """Gets the databases of this CtmServerMetadata.  # noqa: E501

        The server databases  # noqa: E501

        :return: The databases of this CtmServerMetadata.  # noqa: E501
        :rtype: list[CtmServerComponentStatusInfo]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this CtmServerMetadata.

        The server databases  # noqa: E501

        :param databases: The databases of this CtmServerMetadata.  # noqa: E501
        :type: list[CtmServerComponentStatusInfo]
        """

        self._databases = databases

    @property
    def agents(self):
        """Gets the agents of this CtmServerMetadata.  # noqa: E501

        The server agents  # noqa: E501

        :return: The agents of this CtmServerMetadata.  # noqa: E501
        :rtype: list[CtmServerComponentStatusInfo]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this CtmServerMetadata.

        The server agents  # noqa: E501

        :param agents: The agents of this CtmServerMetadata.  # noqa: E501
        :type: list[CtmServerComponentStatusInfo]
        """

        self._agents = agents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CtmServerMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CtmServerMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
