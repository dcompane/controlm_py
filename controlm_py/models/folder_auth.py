# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FolderAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'privilege': 'str',
        'controlm_server': 'str',
        'library': 'str',
        'folder': 'str',
        'order': 'bool',
        'run': 'bool',
        'jobs': 'JobLevelAuth'
    }

    attribute_map = {
        'privilege': 'Privilege',
        'controlm_server': 'ControlmServer',
        'library': 'Library',
        'folder': 'Folder',
        'order': 'Order',
        'run': 'Run',
        'jobs': 'Jobs'
    }

    def __init__(self, privilege=None, controlm_server=None, library=None, folder=None, order=None, run=None, jobs=None):  # noqa: E501
        """FolderAuth - a model defined in Swagger"""  # noqa: E501
        self._privilege = None
        self._controlm_server = None
        self._library = None
        self._folder = None
        self._order = None
        self._run = None
        self._jobs = None
        self.discriminator = None
        if privilege is not None:
            self.privilege = privilege
        if controlm_server is not None:
            self.controlm_server = controlm_server
        if library is not None:
            self.library = library
        if folder is not None:
            self.folder = folder
        if order is not None:
            self.order = order
        if run is not None:
            self.run = run
        if jobs is not None:
            self.jobs = jobs

    @property
    def privilege(self):
        """Gets the privilege of this FolderAuth.  # noqa: E501

        access level (Full, Update, Browse)  # noqa: E501

        :return: The privilege of this FolderAuth.  # noqa: E501
        :rtype: str
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege):
        """Sets the privilege of this FolderAuth.

        access level (Full, Update, Browse)  # noqa: E501

        :param privilege: The privilege of this FolderAuth.  # noqa: E501
        :type: str
        """

        self._privilege = privilege

    @property
    def controlm_server(self):
        """Gets the controlm_server of this FolderAuth.  # noqa: E501

        control-M server name  # noqa: E501

        :return: The controlm_server of this FolderAuth.  # noqa: E501
        :rtype: str
        """
        return self._controlm_server

    @controlm_server.setter
    def controlm_server(self, controlm_server):
        """Sets the controlm_server of this FolderAuth.

        control-M server name  # noqa: E501

        :param controlm_server: The controlm_server of this FolderAuth.  # noqa: E501
        :type: str
        """

        self._controlm_server = controlm_server

    @property
    def library(self):
        """Gets the library of this FolderAuth.  # noqa: E501

        job application  # noqa: E501

        :return: The library of this FolderAuth.  # noqa: E501
        :rtype: str
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this FolderAuth.

        job application  # noqa: E501

        :param library: The library of this FolderAuth.  # noqa: E501
        :type: str
        """

        self._library = library

    @property
    def folder(self):
        """Gets the folder of this FolderAuth.  # noqa: E501

        job sub application  # noqa: E501

        :return: The folder of this FolderAuth.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this FolderAuth.

        job sub application  # noqa: E501

        :param folder: The folder of this FolderAuth.  # noqa: E501
        :type: str
        """

        self._folder = folder

    @property
    def order(self):
        """Gets the order of this FolderAuth.  # noqa: E501

        Allow ordering  # noqa: E501

        :return: The order of this FolderAuth.  # noqa: E501
        :rtype: bool
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this FolderAuth.

        Allow ordering  # noqa: E501

        :param order: The order of this FolderAuth.  # noqa: E501
        :type: bool
        """

        self._order = order

    @property
    def run(self):
        """Gets the run of this FolderAuth.  # noqa: E501

        Allow ordering  # noqa: E501

        :return: The run of this FolderAuth.  # noqa: E501
        :rtype: bool
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this FolderAuth.

        Allow ordering  # noqa: E501

        :param run: The run of this FolderAuth.  # noqa: E501
        :type: bool
        """

        self._run = run

    @property
    def jobs(self):
        """Gets the jobs of this FolderAuth.  # noqa: E501


        :return: The jobs of this FolderAuth.  # noqa: E501
        :rtype: JobLevelAuth
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this FolderAuth.


        :param jobs: The jobs of this FolderAuth.  # noqa: E501
        :type: JobLevelAuth
        """

        self._jobs = jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FolderAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FolderAuth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
