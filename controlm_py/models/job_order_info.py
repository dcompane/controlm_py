# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobOrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_wait': 'int',
        'order_info': 'list[OrderInfo]',
        'positive_rbc': 'str',
        'retro': 'str'
    }

    attribute_map = {
        'max_wait': 'max_wait',
        'order_info': 'order_info',
        'positive_rbc': 'positive_rbc',
        'retro': 'retro'
    }

    def __init__(self, max_wait=None, order_info=None, positive_rbc=None, retro=None):  # noqa: E501
        """JobOrderInfo - a model defined in Swagger"""  # noqa: E501
        self._max_wait = None
        self._order_info = None
        self._positive_rbc = None
        self._retro = None
        self.discriminator = None
        if max_wait is not None:
            self.max_wait = max_wait
        if order_info is not None:
            self.order_info = order_info
        if positive_rbc is not None:
            self.positive_rbc = positive_rbc
        if retro is not None:
            self.retro = retro

    @property
    def max_wait(self):
        """Gets the max_wait of this JobOrderInfo.  # noqa: E501


        :return: The max_wait of this JobOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_wait

    @max_wait.setter
    def max_wait(self, max_wait):
        """Sets the max_wait of this JobOrderInfo.


        :param max_wait: The max_wait of this JobOrderInfo.  # noqa: E501
        :type: int
        """

        self._max_wait = max_wait

    @property
    def order_info(self):
        """Gets the order_info of this JobOrderInfo.  # noqa: E501


        :return: The order_info of this JobOrderInfo.  # noqa: E501
        :rtype: list[OrderInfo]
        """
        return self._order_info

    @order_info.setter
    def order_info(self, order_info):
        """Sets the order_info of this JobOrderInfo.


        :param order_info: The order_info of this JobOrderInfo.  # noqa: E501
        :type: list[OrderInfo]
        """

        self._order_info = order_info

    @property
    def positive_rbc(self):
        """Gets the positive_rbc of this JobOrderInfo.  # noqa: E501


        :return: The positive_rbc of this JobOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._positive_rbc

    @positive_rbc.setter
    def positive_rbc(self, positive_rbc):
        """Sets the positive_rbc of this JobOrderInfo.


        :param positive_rbc: The positive_rbc of this JobOrderInfo.  # noqa: E501
        :type: str
        """

        self._positive_rbc = positive_rbc

    @property
    def retro(self):
        """Gets the retro of this JobOrderInfo.  # noqa: E501


        :return: The retro of this JobOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._retro

    @retro.setter
    def retro(self, retro):
        """Sets the retro of this JobOrderInfo.


        :param retro: The retro of this JobOrderInfo.  # noqa: E501
        :type: str
        """

        self._retro = retro

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobOrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobOrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
