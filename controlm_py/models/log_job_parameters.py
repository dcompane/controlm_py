# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogJobParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_rerun_count': 'str',
        'order_id': 'str',
        'to_rerun_count': 'str'
    }

    attribute_map = {
        'from_rerun_count': 'from_rerun_count',
        'order_id': 'order_id',
        'to_rerun_count': 'to_rerun_count'
    }

    def __init__(self, from_rerun_count=None, order_id=None, to_rerun_count=None):  # noqa: E501
        """LogJobParameters - a model defined in Swagger"""  # noqa: E501
        self._from_rerun_count = None
        self._order_id = None
        self._to_rerun_count = None
        self.discriminator = None
        if from_rerun_count is not None:
            self.from_rerun_count = from_rerun_count
        if order_id is not None:
            self.order_id = order_id
        if to_rerun_count is not None:
            self.to_rerun_count = to_rerun_count

    @property
    def from_rerun_count(self):
        """Gets the from_rerun_count of this LogJobParameters.  # noqa: E501


        :return: The from_rerun_count of this LogJobParameters.  # noqa: E501
        :rtype: str
        """
        return self._from_rerun_count

    @from_rerun_count.setter
    def from_rerun_count(self, from_rerun_count):
        """Sets the from_rerun_count of this LogJobParameters.


        :param from_rerun_count: The from_rerun_count of this LogJobParameters.  # noqa: E501
        :type: str
        """

        self._from_rerun_count = from_rerun_count

    @property
    def order_id(self):
        """Gets the order_id of this LogJobParameters.  # noqa: E501


        :return: The order_id of this LogJobParameters.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this LogJobParameters.


        :param order_id: The order_id of this LogJobParameters.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def to_rerun_count(self):
        """Gets the to_rerun_count of this LogJobParameters.  # noqa: E501


        :return: The to_rerun_count of this LogJobParameters.  # noqa: E501
        :rtype: str
        """
        return self._to_rerun_count

    @to_rerun_count.setter
    def to_rerun_count(self, to_rerun_count):
        """Sets the to_rerun_count of this LogJobParameters.


        :param to_rerun_count: The to_rerun_count of this LogJobParameters.  # noqa: E501
        :type: str
        """

        self._to_rerun_count = to_rerun_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogJobParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogJobParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
