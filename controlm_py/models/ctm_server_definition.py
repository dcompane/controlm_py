# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CtmServerDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'host': 'str',
        'type': 'str',
        'desired_state': 'str',
        'version': 'str',
        'configuration_agent_port': 'int',
        'description': 'str',
        'contact': 'str',
        'is_enabled': 'bool',
        'is_managed': 'bool',
        'gateway_listen_host': 'str',
        'gateway_listen_port': 'int',
        'protocol': 'str',
        'ctm_to_em_port': 'int',
        'time_zone': 'str',
        'new_day_time': 'str',
        'week_start_day': 'str',
        'day_light_saving_start_date': 'str',
        'day_light_saving_end_date': 'str',
        'is_uppercase_only': 'bool',
        'is_control_m_restart_installed': 'bool',
        'is_control_m_analyzer_installed': 'bool',
        'is_control_m_tape_installed': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'host': 'host',
        'type': 'type',
        'desired_state': 'desiredState',
        'version': 'version',
        'configuration_agent_port': 'configurationAgentPort',
        'description': 'description',
        'contact': 'contact',
        'is_enabled': 'isEnabled',
        'is_managed': 'isManaged',
        'gateway_listen_host': 'gatewayListenHost',
        'gateway_listen_port': 'gatewayListenPort',
        'protocol': 'protocol',
        'ctm_to_em_port': 'ctmToEMPort',
        'time_zone': 'timeZone',
        'new_day_time': 'newDayTime',
        'week_start_day': 'weekStartDay',
        'day_light_saving_start_date': 'dayLightSavingStartDate',
        'day_light_saving_end_date': 'dayLightSavingEndDate',
        'is_uppercase_only': 'isUppercaseOnly',
        'is_control_m_restart_installed': 'isControlMRestartInstalled',
        'is_control_m_analyzer_installed': 'isControlMAnalyzerInstalled',
        'is_control_m_tape_installed': 'isControlMTapeInstalled'
    }

    def __init__(self, code=None, name=None, host=None, type=None, desired_state=None, version=None, configuration_agent_port=None, description=None, contact=None, is_enabled=None, is_managed=None, gateway_listen_host=None, gateway_listen_port=None, protocol=None, ctm_to_em_port=None, time_zone=None, new_day_time=None, week_start_day=None, day_light_saving_start_date=None, day_light_saving_end_date=None, is_uppercase_only=None, is_control_m_restart_installed=None, is_control_m_analyzer_installed=None, is_control_m_tape_installed=None):  # noqa: E501
        """CtmServerDefinition - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._name = None
        self._host = None
        self._type = None
        self._desired_state = None
        self._version = None
        self._configuration_agent_port = None
        self._description = None
        self._contact = None
        self._is_enabled = None
        self._is_managed = None
        self._gateway_listen_host = None
        self._gateway_listen_port = None
        self._protocol = None
        self._ctm_to_em_port = None
        self._time_zone = None
        self._new_day_time = None
        self._week_start_day = None
        self._day_light_saving_start_date = None
        self._day_light_saving_end_date = None
        self._is_uppercase_only = None
        self._is_control_m_restart_installed = None
        self._is_control_m_analyzer_installed = None
        self._is_control_m_tape_installed = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if host is not None:
            self.host = host
        if type is not None:
            self.type = type
        if desired_state is not None:
            self.desired_state = desired_state
        if version is not None:
            self.version = version
        if configuration_agent_port is not None:
            self.configuration_agent_port = configuration_agent_port
        if description is not None:
            self.description = description
        if contact is not None:
            self.contact = contact
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_managed is not None:
            self.is_managed = is_managed
        if gateway_listen_host is not None:
            self.gateway_listen_host = gateway_listen_host
        if gateway_listen_port is not None:
            self.gateway_listen_port = gateway_listen_port
        if protocol is not None:
            self.protocol = protocol
        if ctm_to_em_port is not None:
            self.ctm_to_em_port = ctm_to_em_port
        if time_zone is not None:
            self.time_zone = time_zone
        if new_day_time is not None:
            self.new_day_time = new_day_time
        if week_start_day is not None:
            self.week_start_day = week_start_day
        if day_light_saving_start_date is not None:
            self.day_light_saving_start_date = day_light_saving_start_date
        if day_light_saving_end_date is not None:
            self.day_light_saving_end_date = day_light_saving_end_date
        if is_uppercase_only is not None:
            self.is_uppercase_only = is_uppercase_only
        if is_control_m_restart_installed is not None:
            self.is_control_m_restart_installed = is_control_m_restart_installed
        if is_control_m_analyzer_installed is not None:
            self.is_control_m_analyzer_installed = is_control_m_analyzer_installed
        if is_control_m_tape_installed is not None:
            self.is_control_m_tape_installed = is_control_m_tape_installed

    @property
    def code(self):
        """Gets the code of this CtmServerDefinition.  # noqa: E501

        Control-M/Server code  # noqa: E501

        :return: The code of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CtmServerDefinition.

        Control-M/Server code  # noqa: E501

        :param code: The code of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this CtmServerDefinition.  # noqa: E501

        Control-M/Server unique name  # noqa: E501

        :return: The name of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CtmServerDefinition.

        Control-M/Server unique name  # noqa: E501

        :param name: The name of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this CtmServerDefinition.  # noqa: E501

        Hostname the Control-M/Server is running on  # noqa: E501

        :return: The host of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CtmServerDefinition.

        Hostname the Control-M/Server is running on  # noqa: E501

        :param host: The host of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def type(self):
        """Gets the type of this CtmServerDefinition.  # noqa: E501

        Control-M/Server Type [Distributed|zOS]  # noqa: E501

        :return: The type of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CtmServerDefinition.

        Control-M/Server Type [Distributed|zOS]  # noqa: E501

        :param type: The type of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def desired_state(self):
        """Gets the desired_state of this CtmServerDefinition.  # noqa: E501

        Control-M/Server desired state  # noqa: E501

        :return: The desired_state of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this CtmServerDefinition.

        Control-M/Server desired state  # noqa: E501

        :param desired_state: The desired_state of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._desired_state = desired_state

    @property
    def version(self):
        """Gets the version of this CtmServerDefinition.  # noqa: E501

        Control-M/Server version  # noqa: E501

        :return: The version of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CtmServerDefinition.

        Control-M/Server version  # noqa: E501

        :param version: The version of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def configuration_agent_port(self):
        """Gets the configuration_agent_port of this CtmServerDefinition.  # noqa: E501

        The Configuration Agent Port  # noqa: E501

        :return: The configuration_agent_port of this CtmServerDefinition.  # noqa: E501
        :rtype: int
        """
        return self._configuration_agent_port

    @configuration_agent_port.setter
    def configuration_agent_port(self, configuration_agent_port):
        """Sets the configuration_agent_port of this CtmServerDefinition.

        The Configuration Agent Port  # noqa: E501

        :param configuration_agent_port: The configuration_agent_port of this CtmServerDefinition.  # noqa: E501
        :type: int
        """

        self._configuration_agent_port = configuration_agent_port

    @property
    def description(self):
        """Gets the description of this CtmServerDefinition.  # noqa: E501

        Control-M/Server description  # noqa: E501

        :return: The description of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CtmServerDefinition.

        Control-M/Server description  # noqa: E501

        :param description: The description of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def contact(self):
        """Gets the contact of this CtmServerDefinition.  # noqa: E501

        Control-M/Server contact information  # noqa: E501

        :return: The contact of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CtmServerDefinition.

        Control-M/Server contact information  # noqa: E501

        :param contact: The contact of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CtmServerDefinition.  # noqa: E501

        Indicates if Control-M/Server is enabled  # noqa: E501

        :return: The is_enabled of this CtmServerDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CtmServerDefinition.

        Indicates if Control-M/Server is enabled  # noqa: E501

        :param is_enabled: The is_enabled of this CtmServerDefinition.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_managed(self):
        """Gets the is_managed of this CtmServerDefinition.  # noqa: E501

        Indicates if Control-M/Server is managed  # noqa: E501

        :return: The is_managed of this CtmServerDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this CtmServerDefinition.

        Indicates if Control-M/Server is managed  # noqa: E501

        :param is_managed: The is_managed of this CtmServerDefinition.  # noqa: E501
        :type: bool
        """

        self._is_managed = is_managed

    @property
    def gateway_listen_host(self):
        """Gets the gateway_listen_host of this CtmServerDefinition.  # noqa: E501

        Control-M/Server gateway host  # noqa: E501

        :return: The gateway_listen_host of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._gateway_listen_host

    @gateway_listen_host.setter
    def gateway_listen_host(self, gateway_listen_host):
        """Sets the gateway_listen_host of this CtmServerDefinition.

        Control-M/Server gateway host  # noqa: E501

        :param gateway_listen_host: The gateway_listen_host of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._gateway_listen_host = gateway_listen_host

    @property
    def gateway_listen_port(self):
        """Gets the gateway_listen_port of this CtmServerDefinition.  # noqa: E501

        Control-M/Server gateway port  # noqa: E501

        :return: The gateway_listen_port of this CtmServerDefinition.  # noqa: E501
        :rtype: int
        """
        return self._gateway_listen_port

    @gateway_listen_port.setter
    def gateway_listen_port(self, gateway_listen_port):
        """Sets the gateway_listen_port of this CtmServerDefinition.

        Control-M/Server gateway port  # noqa: E501

        :param gateway_listen_port: The gateway_listen_port of this CtmServerDefinition.  # noqa: E501
        :type: int
        """

        self._gateway_listen_port = gateway_listen_port

    @property
    def protocol(self):
        """Gets the protocol of this CtmServerDefinition.  # noqa: E501

        Protocol the Control-M/Server is using  # noqa: E501

        :return: The protocol of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CtmServerDefinition.

        Protocol the Control-M/Server is using  # noqa: E501

        :param protocol: The protocol of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def ctm_to_em_port(self):
        """Gets the ctm_to_em_port of this CtmServerDefinition.  # noqa: E501

        Control-M/Server and Control-M/EM communication port goes through  # noqa: E501

        :return: The ctm_to_em_port of this CtmServerDefinition.  # noqa: E501
        :rtype: int
        """
        return self._ctm_to_em_port

    @ctm_to_em_port.setter
    def ctm_to_em_port(self, ctm_to_em_port):
        """Sets the ctm_to_em_port of this CtmServerDefinition.

        Control-M/Server and Control-M/EM communication port goes through  # noqa: E501

        :param ctm_to_em_port: The ctm_to_em_port of this CtmServerDefinition.  # noqa: E501
        :type: int
        """

        self._ctm_to_em_port = ctm_to_em_port

    @property
    def time_zone(self):
        """Gets the time_zone of this CtmServerDefinition.  # noqa: E501

        Control-M/Server timezone  # noqa: E501

        :return: The time_zone of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CtmServerDefinition.

        Control-M/Server timezone  # noqa: E501

        :param time_zone: The time_zone of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def new_day_time(self):
        """Gets the new_day_time of this CtmServerDefinition.  # noqa: E501

        Control-M/Server \"New Day\" time  # noqa: E501

        :return: The new_day_time of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._new_day_time

    @new_day_time.setter
    def new_day_time(self, new_day_time):
        """Sets the new_day_time of this CtmServerDefinition.

        Control-M/Server \"New Day\" time  # noqa: E501

        :param new_day_time: The new_day_time of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._new_day_time = new_day_time

    @property
    def week_start_day(self):
        """Gets the week_start_day of this CtmServerDefinition.  # noqa: E501

        Control-M/Server first day of the week  # noqa: E501

        :return: The week_start_day of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._week_start_day

    @week_start_day.setter
    def week_start_day(self, week_start_day):
        """Sets the week_start_day of this CtmServerDefinition.

        Control-M/Server first day of the week  # noqa: E501

        :param week_start_day: The week_start_day of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._week_start_day = week_start_day

    @property
    def day_light_saving_start_date(self):
        """Gets the day_light_saving_start_date of this CtmServerDefinition.  # noqa: E501

        Daylight saving time start date  # noqa: E501

        :return: The day_light_saving_start_date of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._day_light_saving_start_date

    @day_light_saving_start_date.setter
    def day_light_saving_start_date(self, day_light_saving_start_date):
        """Sets the day_light_saving_start_date of this CtmServerDefinition.

        Daylight saving time start date  # noqa: E501

        :param day_light_saving_start_date: The day_light_saving_start_date of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._day_light_saving_start_date = day_light_saving_start_date

    @property
    def day_light_saving_end_date(self):
        """Gets the day_light_saving_end_date of this CtmServerDefinition.  # noqa: E501

        Daylight saving time end date  # noqa: E501

        :return: The day_light_saving_end_date of this CtmServerDefinition.  # noqa: E501
        :rtype: str
        """
        return self._day_light_saving_end_date

    @day_light_saving_end_date.setter
    def day_light_saving_end_date(self, day_light_saving_end_date):
        """Sets the day_light_saving_end_date of this CtmServerDefinition.

        Daylight saving time end date  # noqa: E501

        :param day_light_saving_end_date: The day_light_saving_end_date of this CtmServerDefinition.  # noqa: E501
        :type: str
        """

        self._day_light_saving_end_date = day_light_saving_end_date

    @property
    def is_uppercase_only(self):
        """Gets the is_uppercase_only of this CtmServerDefinition.  # noqa: E501

        Restrict job attributes inputs to upper case letters only  # noqa: E501

        :return: The is_uppercase_only of this CtmServerDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_uppercase_only

    @is_uppercase_only.setter
    def is_uppercase_only(self, is_uppercase_only):
        """Sets the is_uppercase_only of this CtmServerDefinition.

        Restrict job attributes inputs to upper case letters only  # noqa: E501

        :param is_uppercase_only: The is_uppercase_only of this CtmServerDefinition.  # noqa: E501
        :type: bool
        """

        self._is_uppercase_only = is_uppercase_only

    @property
    def is_control_m_restart_installed(self):
        """Gets the is_control_m_restart_installed of this CtmServerDefinition.  # noqa: E501

        Control-M/Restart  # noqa: E501

        :return: The is_control_m_restart_installed of this CtmServerDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_control_m_restart_installed

    @is_control_m_restart_installed.setter
    def is_control_m_restart_installed(self, is_control_m_restart_installed):
        """Sets the is_control_m_restart_installed of this CtmServerDefinition.

        Control-M/Restart  # noqa: E501

        :param is_control_m_restart_installed: The is_control_m_restart_installed of this CtmServerDefinition.  # noqa: E501
        :type: bool
        """

        self._is_control_m_restart_installed = is_control_m_restart_installed

    @property
    def is_control_m_analyzer_installed(self):
        """Gets the is_control_m_analyzer_installed of this CtmServerDefinition.  # noqa: E501

        Control-M/Analyzer Installed  # noqa: E501

        :return: The is_control_m_analyzer_installed of this CtmServerDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_control_m_analyzer_installed

    @is_control_m_analyzer_installed.setter
    def is_control_m_analyzer_installed(self, is_control_m_analyzer_installed):
        """Sets the is_control_m_analyzer_installed of this CtmServerDefinition.

        Control-M/Analyzer Installed  # noqa: E501

        :param is_control_m_analyzer_installed: The is_control_m_analyzer_installed of this CtmServerDefinition.  # noqa: E501
        :type: bool
        """

        self._is_control_m_analyzer_installed = is_control_m_analyzer_installed

    @property
    def is_control_m_tape_installed(self):
        """Gets the is_control_m_tape_installed of this CtmServerDefinition.  # noqa: E501

        Control-M/Tape Installed  # noqa: E501

        :return: The is_control_m_tape_installed of this CtmServerDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_control_m_tape_installed

    @is_control_m_tape_installed.setter
    def is_control_m_tape_installed(self, is_control_m_tape_installed):
        """Sets the is_control_m_tape_installed of this CtmServerDefinition.

        Control-M/Tape Installed  # noqa: E501

        :param is_control_m_tape_installed: The is_control_m_tape_installed of this CtmServerDefinition.  # noqa: E501
        :type: bool
        """

        self._is_control_m_tape_installed = is_control_m_tape_installed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CtmServerDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CtmServerDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
