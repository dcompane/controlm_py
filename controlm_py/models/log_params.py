# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ctm': 'str',
        'order_id': 'str',
        'number_of_runs': 'int',
        'log_table': 'str'
    }

    attribute_map = {
        'ctm': 'ctm',
        'order_id': 'orderId',
        'number_of_runs': 'numberOfRuns',
        'log_table': 'logTable'
    }

    def __init__(self, ctm=None, order_id=None, number_of_runs=None, log_table=None):  # noqa: E501
        """LogParams - a model defined in Swagger"""  # noqa: E501
        self._ctm = None
        self._order_id = None
        self._number_of_runs = None
        self._log_table = None
        self.discriminator = None
        if ctm is not None:
            self.ctm = ctm
        if order_id is not None:
            self.order_id = order_id
        if number_of_runs is not None:
            self.number_of_runs = number_of_runs
        if log_table is not None:
            self.log_table = log_table

    @property
    def ctm(self):
        """Gets the ctm of this LogParams.  # noqa: E501

        The name of the Control-M server in which the job was ordered from. HIDDEN.  # noqa: E501

        :return: The ctm of this LogParams.  # noqa: E501
        :rtype: str
        """
        return self._ctm

    @ctm.setter
    def ctm(self, ctm):
        """Sets the ctm of this LogParams.

        The name of the Control-M server in which the job was ordered from. HIDDEN.  # noqa: E501

        :param ctm: The ctm of this LogParams.  # noqa: E501
        :type: str
        """

        self._ctm = ctm

    @property
    def order_id(self):
        """Gets the order_id of this LogParams.  # noqa: E501

        Job's order id. HIDDEN.  # noqa: E501

        :return: The order_id of this LogParams.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this LogParams.

        Job's order id. HIDDEN.  # noqa: E501

        :param order_id: The order_id of this LogParams.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def number_of_runs(self):
        """Gets the number_of_runs of this LogParams.  # noqa: E501

        Job's rerun number. HIDDEN.  # noqa: E501

        :return: The number_of_runs of this LogParams.  # noqa: E501
        :rtype: int
        """
        return self._number_of_runs

    @number_of_runs.setter
    def number_of_runs(self, number_of_runs):
        """Sets the number_of_runs of this LogParams.

        Job's rerun number. HIDDEN.  # noqa: E501

        :param number_of_runs: The number_of_runs of this LogParams.  # noqa: E501
        :type: int
        """

        self._number_of_runs = number_of_runs

    @property
    def log_table(self):
        """Gets the log_table of this LogParams.  # noqa: E501

        Job's log table name, accepted as a value in search request. HIDDEN.  # noqa: E501

        :return: The log_table of this LogParams.  # noqa: E501
        :rtype: str
        """
        return self._log_table

    @log_table.setter
    def log_table(self, log_table):
        """Sets the log_table of this LogParams.

        Job's log table name, accepted as a value in search request. HIDDEN.  # noqa: E501

        :param log_table: The log_table of this LogParams.  # noqa: E501
        :type: str
        """

        self._log_table = log_table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
