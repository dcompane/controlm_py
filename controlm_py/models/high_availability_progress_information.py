# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HighAvailabilityProgressInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'process_name': 'str',
        'process_title': 'str',
        'process_status': 'str',
        'process_start_time': 'str',
        'process_end_time': 'str',
        'process_message': 'str',
        'process_steps': 'list[HighAvailabilityStepData]'
    }

    attribute_map = {
        'process_name': 'processName',
        'process_title': 'processTitle',
        'process_status': 'processStatus',
        'process_start_time': 'processStartTime',
        'process_end_time': 'processEndTime',
        'process_message': 'processMessage',
        'process_steps': 'processSteps'
    }

    def __init__(self, process_name=None, process_title=None, process_status=None, process_start_time=None, process_end_time=None, process_message=None, process_steps=None):  # noqa: E501
        """HighAvailabilityProgressInformation - a model defined in Swagger"""  # noqa: E501
        self._process_name = None
        self._process_title = None
        self._process_status = None
        self._process_start_time = None
        self._process_end_time = None
        self._process_message = None
        self._process_steps = None
        self.discriminator = None
        if process_name is not None:
            self.process_name = process_name
        if process_title is not None:
            self.process_title = process_title
        if process_status is not None:
            self.process_status = process_status
        if process_start_time is not None:
            self.process_start_time = process_start_time
        if process_end_time is not None:
            self.process_end_time = process_end_time
        if process_message is not None:
            self.process_message = process_message
        if process_steps is not None:
            self.process_steps = process_steps

    @property
    def process_name(self):
        """Gets the process_name of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_name of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """Sets the process_name of this HighAvailabilityProgressInformation.


        :param process_name: The process_name of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: str
        """

        self._process_name = process_name

    @property
    def process_title(self):
        """Gets the process_title of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_title of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_title

    @process_title.setter
    def process_title(self, process_title):
        """Sets the process_title of this HighAvailabilityProgressInformation.


        :param process_title: The process_title of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: str
        """

        self._process_title = process_title

    @property
    def process_status(self):
        """Gets the process_status of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_status of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_status

    @process_status.setter
    def process_status(self, process_status):
        """Sets the process_status of this HighAvailabilityProgressInformation.


        :param process_status: The process_status of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: str
        """

        self._process_status = process_status

    @property
    def process_start_time(self):
        """Gets the process_start_time of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_start_time of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_start_time

    @process_start_time.setter
    def process_start_time(self, process_start_time):
        """Sets the process_start_time of this HighAvailabilityProgressInformation.


        :param process_start_time: The process_start_time of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: str
        """

        self._process_start_time = process_start_time

    @property
    def process_end_time(self):
        """Gets the process_end_time of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_end_time of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_end_time

    @process_end_time.setter
    def process_end_time(self, process_end_time):
        """Sets the process_end_time of this HighAvailabilityProgressInformation.


        :param process_end_time: The process_end_time of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: str
        """

        self._process_end_time = process_end_time

    @property
    def process_message(self):
        """Gets the process_message of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_message of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_message

    @process_message.setter
    def process_message(self, process_message):
        """Sets the process_message of this HighAvailabilityProgressInformation.


        :param process_message: The process_message of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: str
        """

        self._process_message = process_message

    @property
    def process_steps(self):
        """Gets the process_steps of this HighAvailabilityProgressInformation.  # noqa: E501


        :return: The process_steps of this HighAvailabilityProgressInformation.  # noqa: E501
        :rtype: list[HighAvailabilityStepData]
        """
        return self._process_steps

    @process_steps.setter
    def process_steps(self, process_steps):
        """Sets the process_steps of this HighAvailabilityProgressInformation.


        :param process_steps: The process_steps of this HighAvailabilityProgressInformation.  # noqa: E501
        :type: list[HighAvailabilityStepData]
        """

        self._process_steps = process_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HighAvailabilityProgressInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HighAvailabilityProgressInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
