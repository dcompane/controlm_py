# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatisticsAverageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'str',
        'cpu_time': 'str',
        'run_time': 'str'
    }

    attribute_map = {
        'start_time': 'startTime',
        'cpu_time': 'cpuTime',
        'run_time': 'runTime'
    }

    def __init__(self, start_time=None, cpu_time=None, run_time=None):  # noqa: E501
        """StatisticsAverageInfo - a model defined in Swagger"""  # noqa: E501
        self._start_time = None
        self._cpu_time = None
        self._run_time = None
        self.discriminator = None
        if start_time is not None:
            self.start_time = start_time
        if cpu_time is not None:
            self.cpu_time = cpu_time
        if run_time is not None:
            self.run_time = run_time

    @property
    def start_time(self):
        """Gets the start_time of this StatisticsAverageInfo.  # noqa: E501

        Average start time  # noqa: E501

        :return: The start_time of this StatisticsAverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StatisticsAverageInfo.

        Average start time  # noqa: E501

        :param start_time: The start_time of this StatisticsAverageInfo.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def cpu_time(self):
        """Gets the cpu_time of this StatisticsAverageInfo.  # noqa: E501

        Average CPU time  # noqa: E501

        :return: The cpu_time of this StatisticsAverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_time

    @cpu_time.setter
    def cpu_time(self, cpu_time):
        """Sets the cpu_time of this StatisticsAverageInfo.

        Average CPU time  # noqa: E501

        :param cpu_time: The cpu_time of this StatisticsAverageInfo.  # noqa: E501
        :type: str
        """

        self._cpu_time = cpu_time

    @property
    def run_time(self):
        """Gets the run_time of this StatisticsAverageInfo.  # noqa: E501

        Average time  # noqa: E501

        :return: The run_time of this StatisticsAverageInfo.  # noqa: E501
        :rtype: str
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this StatisticsAverageInfo.

        Average time  # noqa: E501

        :param run_time: The run_time of this StatisticsAverageInfo.  # noqa: E501
        :type: str
        """

        self._run_time = run_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatisticsAverageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticsAverageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
