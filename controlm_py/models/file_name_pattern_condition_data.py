# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileNamePatternConditionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclude_files': 'bool',
        'case_sensitive': 'bool',
        'is_regex': 'bool',
        'pattern': 'str'
    }

    attribute_map = {
        'exclude_files': 'excludeFiles',
        'case_sensitive': 'caseSensitive',
        'is_regex': 'isRegex',
        'pattern': 'pattern'
    }

    def __init__(self, exclude_files=None, case_sensitive=None, is_regex=None, pattern=None):  # noqa: E501
        """FileNamePatternConditionData - a model defined in Swagger"""  # noqa: E501
        self._exclude_files = None
        self._case_sensitive = None
        self._is_regex = None
        self._pattern = None
        self.discriminator = None
        if exclude_files is not None:
            self.exclude_files = exclude_files
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if is_regex is not None:
            self.is_regex = is_regex
        if pattern is not None:
            self.pattern = pattern

    @property
    def exclude_files(self):
        """Gets the exclude_files of this FileNamePatternConditionData.  # noqa: E501

        is Exclude Files  # noqa: E501

        :return: The exclude_files of this FileNamePatternConditionData.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_files

    @exclude_files.setter
    def exclude_files(self, exclude_files):
        """Sets the exclude_files of this FileNamePatternConditionData.

        is Exclude Files  # noqa: E501

        :param exclude_files: The exclude_files of this FileNamePatternConditionData.  # noqa: E501
        :type: bool
        """

        self._exclude_files = exclude_files

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this FileNamePatternConditionData.  # noqa: E501

        is Case Sensitive  # noqa: E501

        :return: The case_sensitive of this FileNamePatternConditionData.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this FileNamePatternConditionData.

        is Case Sensitive  # noqa: E501

        :param case_sensitive: The case_sensitive of this FileNamePatternConditionData.  # noqa: E501
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def is_regex(self):
        """Gets the is_regex of this FileNamePatternConditionData.  # noqa: E501

        is Regex  # noqa: E501

        :return: The is_regex of this FileNamePatternConditionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_regex

    @is_regex.setter
    def is_regex(self, is_regex):
        """Sets the is_regex of this FileNamePatternConditionData.

        is Regex  # noqa: E501

        :param is_regex: The is_regex of this FileNamePatternConditionData.  # noqa: E501
        :type: bool
        """

        self._is_regex = is_regex

    @property
    def pattern(self):
        """Gets the pattern of this FileNamePatternConditionData.  # noqa: E501

        pattern  # noqa: E501

        :return: The pattern of this FileNamePatternConditionData.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this FileNamePatternConditionData.

        pattern  # noqa: E501

        :param pattern: The pattern of this FileNamePatternConditionData.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileNamePatternConditionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileNamePatternConditionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
