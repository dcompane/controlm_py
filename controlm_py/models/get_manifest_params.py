# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetManifestParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topology_identifier': 'str',
        'environment': 'str',
        'category': 'str',
        'order': 'int',
        'product_code': 'str',
        'name': 'str',
        'install_uri': 'str',
        'visible': 'bool',
        'icon_base64': 'str',
        'error': 'str',
        'error_code': 'str',
        'full_name': 'str',
        'short_name': 'str',
        'sub_category': 'str',
        'keywords': 'list[str]',
        'versions': 'list[str]',
        'versions_self_hosted': 'list[str]',
        'group': 'ManifestGroupObject'
    }

    attribute_map = {
        'topology_identifier': 'topologyIdentifier',
        'environment': 'environment',
        'category': 'category',
        'order': 'order',
        'product_code': 'productCode',
        'name': 'name',
        'install_uri': 'installUri',
        'visible': 'visible',
        'icon_base64': 'iconBase64',
        'error': 'error',
        'error_code': 'errorCode',
        'full_name': 'fullName',
        'short_name': 'shortName',
        'sub_category': 'subCategory',
        'keywords': 'keywords',
        'versions': 'versions',
        'versions_self_hosted': 'versionsSelfHosted',
        'group': 'group'
    }

    def __init__(self, topology_identifier=None, environment=None, category=None, order=None, product_code=None, name=None, install_uri=None, visible=None, icon_base64=None, error=None, error_code=None, full_name=None, short_name=None, sub_category=None, keywords=None, versions=None, versions_self_hosted=None, group=None):  # noqa: E501
        """GetManifestParams - a model defined in Swagger"""  # noqa: E501
        self._topology_identifier = None
        self._environment = None
        self._category = None
        self._order = None
        self._product_code = None
        self._name = None
        self._install_uri = None
        self._visible = None
        self._icon_base64 = None
        self._error = None
        self._error_code = None
        self._full_name = None
        self._short_name = None
        self._sub_category = None
        self._keywords = None
        self._versions = None
        self._versions_self_hosted = None
        self._group = None
        self.discriminator = None
        if topology_identifier is not None:
            self.topology_identifier = topology_identifier
        if environment is not None:
            self.environment = environment
        if category is not None:
            self.category = category
        if order is not None:
            self.order = order
        if product_code is not None:
            self.product_code = product_code
        if name is not None:
            self.name = name
        if install_uri is not None:
            self.install_uri = install_uri
        if visible is not None:
            self.visible = visible
        if icon_base64 is not None:
            self.icon_base64 = icon_base64
        if error is not None:
            self.error = error
        if error_code is not None:
            self.error_code = error_code
        if full_name is not None:
            self.full_name = full_name
        if short_name is not None:
            self.short_name = short_name
        if sub_category is not None:
            self.sub_category = sub_category
        if keywords is not None:
            self.keywords = keywords
        if versions is not None:
            self.versions = versions
        if versions_self_hosted is not None:
            self.versions_self_hosted = versions_self_hosted
        if group is not None:
            self.group = group

    @property
    def topology_identifier(self):
        """Gets the topology_identifier of this GetManifestParams.  # noqa: E501

        Holds the topology identifier  # noqa: E501

        :return: The topology_identifier of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._topology_identifier

    @topology_identifier.setter
    def topology_identifier(self, topology_identifier):
        """Sets the topology_identifier of this GetManifestParams.

        Holds the topology identifier  # noqa: E501

        :param topology_identifier: The topology_identifier of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._topology_identifier = topology_identifier

    @property
    def environment(self):
        """Gets the environment of this GetManifestParams.  # noqa: E501

        Determines, whether the Agent or Plugin works in saas, selfhosted, or both  # noqa: E501

        :return: The environment of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this GetManifestParams.

        Determines, whether the Agent or Plugin works in saas, selfhosted, or both  # noqa: E501

        :param environment: The environment of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def category(self):
        """Gets the category of this GetManifestParams.  # noqa: E501

        Holds the category of the entry  # noqa: E501

        :return: The category of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GetManifestParams.

        Holds the category of the entry  # noqa: E501

        :param category: The category of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def order(self):
        """Gets the order of this GetManifestParams.  # noqa: E501

        Order of appearance  # noqa: E501

        :return: The order of this GetManifestParams.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GetManifestParams.

        Order of appearance  # noqa: E501

        :param order: The order of this GetManifestParams.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def product_code(self):
        """Gets the product_code of this GetManifestParams.  # noqa: E501

        Three letters that are the product unique identifier  # noqa: E501

        :return: The product_code of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this GetManifestParams.

        Three letters that are the product unique identifier  # noqa: E501

        :param product_code: The product_code of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def name(self):
        """Gets the name of this GetManifestParams.  # noqa: E501

        The full official name of the product  # noqa: E501

        :return: The name of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetManifestParams.

        The full official name of the product  # noqa: E501

        :param name: The name of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def install_uri(self):
        """Gets the install_uri of this GetManifestParams.  # noqa: E501

        Specifies the path to the installation file  # noqa: E501

        :return: The install_uri of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._install_uri

    @install_uri.setter
    def install_uri(self, install_uri):
        """Sets the install_uri of this GetManifestParams.

        Specifies the path to the installation file  # noqa: E501

        :param install_uri: The install_uri of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._install_uri = install_uri

    @property
    def visible(self):
        """Gets the visible of this GetManifestParams.  # noqa: E501

        Determines whether or not the product should be visible in the web page  # noqa: E501

        :return: The visible of this GetManifestParams.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this GetManifestParams.

        Determines whether or not the product should be visible in the web page  # noqa: E501

        :param visible: The visible of this GetManifestParams.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def icon_base64(self):
        """Gets the icon_base64 of this GetManifestParams.  # noqa: E501

        Base64 representaion of image file  # noqa: E501

        :return: The icon_base64 of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._icon_base64

    @icon_base64.setter
    def icon_base64(self, icon_base64):
        """Sets the icon_base64 of this GetManifestParams.

        Base64 representaion of image file  # noqa: E501

        :param icon_base64: The icon_base64 of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._icon_base64 = icon_base64

    @property
    def error(self):
        """Gets the error of this GetManifestParams.  # noqa: E501

        Description of the specific error  # noqa: E501

        :return: The error of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetManifestParams.

        Description of the specific error  # noqa: E501

        :param error: The error of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_code(self):
        """Gets the error_code of this GetManifestParams.  # noqa: E501

        Http response status code  # noqa: E501

        :return: The error_code of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this GetManifestParams.

        Http response status code  # noqa: E501

        :param error_code: The error_code of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def full_name(self):
        """Gets the full_name of this GetManifestParams.  # noqa: E501

        The full name  # noqa: E501

        :return: The full_name of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GetManifestParams.

        The full name  # noqa: E501

        :param full_name: The full_name of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def short_name(self):
        """Gets the short_name of this GetManifestParams.  # noqa: E501

        The short name  # noqa: E501

        :return: The short_name of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetManifestParams.

        The short name  # noqa: E501

        :param short_name: The short_name of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def sub_category(self):
        """Gets the sub_category of this GetManifestParams.  # noqa: E501

        The sub-category  # noqa: E501

        :return: The sub_category of this GetManifestParams.  # noqa: E501
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this GetManifestParams.

        The sub-category  # noqa: E501

        :param sub_category: The sub_category of this GetManifestParams.  # noqa: E501
        :type: str
        """

        self._sub_category = sub_category

    @property
    def keywords(self):
        """Gets the keywords of this GetManifestParams.  # noqa: E501

        List of words that user can use when searching for a plugin  # noqa: E501

        :return: The keywords of this GetManifestParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this GetManifestParams.

        List of words that user can use when searching for a plugin  # noqa: E501

        :param keywords: The keywords of this GetManifestParams.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def versions(self):
        """Gets the versions of this GetManifestParams.  # noqa: E501

        Includes all the versions numbers of the product that exist in the repository  # noqa: E501

        :return: The versions of this GetManifestParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this GetManifestParams.

        Includes all the versions numbers of the product that exist in the repository  # noqa: E501

        :param versions: The versions of this GetManifestParams.  # noqa: E501
        :type: list[str]
        """

        self._versions = versions

    @property
    def versions_self_hosted(self):
        """Gets the versions_self_hosted of this GetManifestParams.  # noqa: E501

        Includes all the version numbers of the product present in the repository and is compatible with a SelfHosted environment  # noqa: E501

        :return: The versions_self_hosted of this GetManifestParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions_self_hosted

    @versions_self_hosted.setter
    def versions_self_hosted(self, versions_self_hosted):
        """Sets the versions_self_hosted of this GetManifestParams.

        Includes all the version numbers of the product present in the repository and is compatible with a SelfHosted environment  # noqa: E501

        :param versions_self_hosted: The versions_self_hosted of this GetManifestParams.  # noqa: E501
        :type: list[str]
        """

        self._versions_self_hosted = versions_self_hosted

    @property
    def group(self):
        """Gets the group of this GetManifestParams.  # noqa: E501


        :return: The group of this GetManifestParams.  # noqa: E501
        :rtype: ManifestGroupObject
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GetManifestParams.


        :param group: The group of this GetManifestParams.  # noqa: E501
        :type: ManifestGroupObject
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetManifestParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetManifestParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
