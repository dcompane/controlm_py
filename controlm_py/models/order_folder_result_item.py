# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderFolderResultItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errored_count': 'int',
        'folder_name': 'str',
        'not_met_criteria_count': 'int',
        'error_occured': 'bool',
        'error_msg_id': 'str',
        'error_message': 'str',
        'order_folder_status': 'str',
        'ordered_count': 'int',
        'ordered_list': 'list[OrderedItemItem]'
    }

    attribute_map = {
        'errored_count': 'errored_count',
        'folder_name': 'folder_name',
        'not_met_criteria_count': 'not_met_criteria_count',
        'error_occured': 'error_occured',
        'error_msg_id': 'error_msg_id',
        'error_message': 'error_message',
        'order_folder_status': 'order_folder_status',
        'ordered_count': 'ordered_count',
        'ordered_list': 'ordered_list'
    }

    def __init__(self, errored_count=None, folder_name=None, not_met_criteria_count=None, error_occured=None, error_msg_id=None, error_message=None, order_folder_status=None, ordered_count=None, ordered_list=None):  # noqa: E501
        """OrderFolderResultItem - a model defined in Swagger"""  # noqa: E501
        self._errored_count = None
        self._folder_name = None
        self._not_met_criteria_count = None
        self._error_occured = None
        self._error_msg_id = None
        self._error_message = None
        self._order_folder_status = None
        self._ordered_count = None
        self._ordered_list = None
        self.discriminator = None
        if errored_count is not None:
            self.errored_count = errored_count
        if folder_name is not None:
            self.folder_name = folder_name
        if not_met_criteria_count is not None:
            self.not_met_criteria_count = not_met_criteria_count
        if error_occured is not None:
            self.error_occured = error_occured
        if error_msg_id is not None:
            self.error_msg_id = error_msg_id
        if error_message is not None:
            self.error_message = error_message
        if order_folder_status is not None:
            self.order_folder_status = order_folder_status
        if ordered_count is not None:
            self.ordered_count = ordered_count
        if ordered_list is not None:
            self.ordered_list = ordered_list

    @property
    def errored_count(self):
        """Gets the errored_count of this OrderFolderResultItem.  # noqa: E501


        :return: The errored_count of this OrderFolderResultItem.  # noqa: E501
        :rtype: int
        """
        return self._errored_count

    @errored_count.setter
    def errored_count(self, errored_count):
        """Sets the errored_count of this OrderFolderResultItem.


        :param errored_count: The errored_count of this OrderFolderResultItem.  # noqa: E501
        :type: int
        """

        self._errored_count = errored_count

    @property
    def folder_name(self):
        """Gets the folder_name of this OrderFolderResultItem.  # noqa: E501


        :return: The folder_name of this OrderFolderResultItem.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this OrderFolderResultItem.


        :param folder_name: The folder_name of this OrderFolderResultItem.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def not_met_criteria_count(self):
        """Gets the not_met_criteria_count of this OrderFolderResultItem.  # noqa: E501


        :return: The not_met_criteria_count of this OrderFolderResultItem.  # noqa: E501
        :rtype: int
        """
        return self._not_met_criteria_count

    @not_met_criteria_count.setter
    def not_met_criteria_count(self, not_met_criteria_count):
        """Sets the not_met_criteria_count of this OrderFolderResultItem.


        :param not_met_criteria_count: The not_met_criteria_count of this OrderFolderResultItem.  # noqa: E501
        :type: int
        """

        self._not_met_criteria_count = not_met_criteria_count

    @property
    def error_occured(self):
        """Gets the error_occured of this OrderFolderResultItem.  # noqa: E501


        :return: The error_occured of this OrderFolderResultItem.  # noqa: E501
        :rtype: bool
        """
        return self._error_occured

    @error_occured.setter
    def error_occured(self, error_occured):
        """Sets the error_occured of this OrderFolderResultItem.


        :param error_occured: The error_occured of this OrderFolderResultItem.  # noqa: E501
        :type: bool
        """

        self._error_occured = error_occured

    @property
    def error_msg_id(self):
        """Gets the error_msg_id of this OrderFolderResultItem.  # noqa: E501


        :return: The error_msg_id of this OrderFolderResultItem.  # noqa: E501
        :rtype: str
        """
        return self._error_msg_id

    @error_msg_id.setter
    def error_msg_id(self, error_msg_id):
        """Sets the error_msg_id of this OrderFolderResultItem.


        :param error_msg_id: The error_msg_id of this OrderFolderResultItem.  # noqa: E501
        :type: str
        """

        self._error_msg_id = error_msg_id

    @property
    def error_message(self):
        """Gets the error_message of this OrderFolderResultItem.  # noqa: E501


        :return: The error_message of this OrderFolderResultItem.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this OrderFolderResultItem.


        :param error_message: The error_message of this OrderFolderResultItem.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def order_folder_status(self):
        """Gets the order_folder_status of this OrderFolderResultItem.  # noqa: E501


        :return: The order_folder_status of this OrderFolderResultItem.  # noqa: E501
        :rtype: str
        """
        return self._order_folder_status

    @order_folder_status.setter
    def order_folder_status(self, order_folder_status):
        """Sets the order_folder_status of this OrderFolderResultItem.


        :param order_folder_status: The order_folder_status of this OrderFolderResultItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["OrderFolderStatusSuccess", "FolderNotFound", "UnKnownError", "UNRECOGNIZED"]  # noqa: E501
        if order_folder_status not in allowed_values:
            raise ValueError(
                "Invalid value for `order_folder_status` ({0}), must be one of {1}"  # noqa: E501
                .format(order_folder_status, allowed_values)
            )

        self._order_folder_status = order_folder_status

    @property
    def ordered_count(self):
        """Gets the ordered_count of this OrderFolderResultItem.  # noqa: E501


        :return: The ordered_count of this OrderFolderResultItem.  # noqa: E501
        :rtype: int
        """
        return self._ordered_count

    @ordered_count.setter
    def ordered_count(self, ordered_count):
        """Sets the ordered_count of this OrderFolderResultItem.


        :param ordered_count: The ordered_count of this OrderFolderResultItem.  # noqa: E501
        :type: int
        """

        self._ordered_count = ordered_count

    @property
    def ordered_list(self):
        """Gets the ordered_list of this OrderFolderResultItem.  # noqa: E501


        :return: The ordered_list of this OrderFolderResultItem.  # noqa: E501
        :rtype: list[OrderedItemItem]
        """
        return self._ordered_list

    @ordered_list.setter
    def ordered_list(self, ordered_list):
        """Sets the ordered_list of this OrderFolderResultItem.


        :param ordered_list: The ordered_list of this OrderFolderResultItem.  # noqa: E501
        :type: list[OrderedItemItem]
        """

        self._ordered_list = ordered_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderFolderResultItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderFolderResultItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
