# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderedItemItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'folder_name': 'str',
        'full_msg': 'str',
        'job_name': 'str',
        'job_type': 'str',
        'msg_data_arguments': 'list[MsgDataArguments]',
        'msg_id': 'str',
        'order_id': 'str'
    }

    attribute_map = {
        'file_name': 'file_name',
        'folder_name': 'folder_name',
        'full_msg': 'full_msg',
        'job_name': 'job_name',
        'job_type': 'job_type',
        'msg_data_arguments': 'msg_data_arguments',
        'msg_id': 'msg_id',
        'order_id': 'order_id'
    }

    def __init__(self, file_name=None, folder_name=None, full_msg=None, job_name=None, job_type=None, msg_data_arguments=None, msg_id=None, order_id=None):  # noqa: E501
        """OrderedItemItem - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._folder_name = None
        self._full_msg = None
        self._job_name = None
        self._job_type = None
        self._msg_data_arguments = None
        self._msg_id = None
        self._order_id = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if folder_name is not None:
            self.folder_name = folder_name
        if full_msg is not None:
            self.full_msg = full_msg
        if job_name is not None:
            self.job_name = job_name
        if job_type is not None:
            self.job_type = job_type
        if msg_data_arguments is not None:
            self.msg_data_arguments = msg_data_arguments
        if msg_id is not None:
            self.msg_id = msg_id
        if order_id is not None:
            self.order_id = order_id

    @property
    def file_name(self):
        """Gets the file_name of this OrderedItemItem.  # noqa: E501


        :return: The file_name of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this OrderedItemItem.


        :param file_name: The file_name of this OrderedItemItem.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def folder_name(self):
        """Gets the folder_name of this OrderedItemItem.  # noqa: E501


        :return: The folder_name of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this OrderedItemItem.


        :param folder_name: The folder_name of this OrderedItemItem.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def full_msg(self):
        """Gets the full_msg of this OrderedItemItem.  # noqa: E501


        :return: The full_msg of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._full_msg

    @full_msg.setter
    def full_msg(self, full_msg):
        """Sets the full_msg of this OrderedItemItem.


        :param full_msg: The full_msg of this OrderedItemItem.  # noqa: E501
        :type: str
        """

        self._full_msg = full_msg

    @property
    def job_name(self):
        """Gets the job_name of this OrderedItemItem.  # noqa: E501


        :return: The job_name of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this OrderedItemItem.


        :param job_name: The job_name of this OrderedItemItem.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def job_type(self):
        """Gets the job_type of this OrderedItemItem.  # noqa: E501


        :return: The job_type of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this OrderedItemItem.


        :param job_type: The job_type of this OrderedItemItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["job", "smartFolder", "subFolder", "UNRECOGNIZED"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def msg_data_arguments(self):
        """Gets the msg_data_arguments of this OrderedItemItem.  # noqa: E501


        :return: The msg_data_arguments of this OrderedItemItem.  # noqa: E501
        :rtype: list[MsgDataArguments]
        """
        return self._msg_data_arguments

    @msg_data_arguments.setter
    def msg_data_arguments(self, msg_data_arguments):
        """Sets the msg_data_arguments of this OrderedItemItem.


        :param msg_data_arguments: The msg_data_arguments of this OrderedItemItem.  # noqa: E501
        :type: list[MsgDataArguments]
        """

        self._msg_data_arguments = msg_data_arguments

    @property
    def msg_id(self):
        """Gets the msg_id of this OrderedItemItem.  # noqa: E501


        :return: The msg_id of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this OrderedItemItem.


        :param msg_id: The msg_id of this OrderedItemItem.  # noqa: E501
        :type: str
        """

        self._msg_id = msg_id

    @property
    def order_id(self):
        """Gets the order_id of this OrderedItemItem.  # noqa: E501


        :return: The order_id of this OrderedItemItem.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderedItemItem.


        :param order_id: The order_id of this OrderedItemItem.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderedItemItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderedItemItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
