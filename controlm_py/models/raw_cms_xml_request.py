# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawCmsXmlRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raw_xml_request': 'str',
        'encryption_metadata': 'EncryptionMetadata',
        'replace_special_chars': 'bool'
    }

    attribute_map = {
        'raw_xml_request': 'rawXmlRequest',
        'encryption_metadata': 'encryptionMetadata',
        'replace_special_chars': 'replaceSpecialChars'
    }

    def __init__(self, raw_xml_request=None, encryption_metadata=None, replace_special_chars=None):  # noqa: E501
        """RawCmsXmlRequest - a model defined in Swagger"""  # noqa: E501
        self._raw_xml_request = None
        self._encryption_metadata = None
        self._replace_special_chars = None
        self.discriminator = None
        if raw_xml_request is not None:
            self.raw_xml_request = raw_xml_request
        if encryption_metadata is not None:
            self.encryption_metadata = encryption_metadata
        if replace_special_chars is not None:
            self.replace_special_chars = replace_special_chars

    @property
    def raw_xml_request(self):
        """Gets the raw_xml_request of this RawCmsXmlRequest.  # noqa: E501

        The raw XML request string  # noqa: E501

        :return: The raw_xml_request of this RawCmsXmlRequest.  # noqa: E501
        :rtype: str
        """
        return self._raw_xml_request

    @raw_xml_request.setter
    def raw_xml_request(self, raw_xml_request):
        """Sets the raw_xml_request of this RawCmsXmlRequest.

        The raw XML request string  # noqa: E501

        :param raw_xml_request: The raw_xml_request of this RawCmsXmlRequest.  # noqa: E501
        :type: str
        """

        self._raw_xml_request = raw_xml_request

    @property
    def encryption_metadata(self):
        """Gets the encryption_metadata of this RawCmsXmlRequest.  # noqa: E501


        :return: The encryption_metadata of this RawCmsXmlRequest.  # noqa: E501
        :rtype: EncryptionMetadata
        """
        return self._encryption_metadata

    @encryption_metadata.setter
    def encryption_metadata(self, encryption_metadata):
        """Sets the encryption_metadata of this RawCmsXmlRequest.


        :param encryption_metadata: The encryption_metadata of this RawCmsXmlRequest.  # noqa: E501
        :type: EncryptionMetadata
        """

        self._encryption_metadata = encryption_metadata

    @property
    def replace_special_chars(self):
        """Gets the replace_special_chars of this RawCmsXmlRequest.  # noqa: E501

        Replace Ampersand, Greater Than and Lower Than special characters with their XML equivalent value  # noqa: E501

        :return: The replace_special_chars of this RawCmsXmlRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_special_chars

    @replace_special_chars.setter
    def replace_special_chars(self, replace_special_chars):
        """Sets the replace_special_chars of this RawCmsXmlRequest.

        Replace Ampersand, Greater Than and Lower Than special characters with their XML equivalent value  # noqa: E501

        :param replace_special_chars: The replace_special_chars of this RawCmsXmlRequest.  # noqa: E501
        :type: bool
        """

        self._replace_special_chars = replace_special_chars

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawCmsXmlRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawCmsXmlRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
