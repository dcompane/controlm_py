# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunFolderJobActionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_fails_behaviour': 'ActionFailsBehaviourData',
        'folder_name': 'str',
        'hold': 'bool',
        'run_now': 'bool',
        'job_name': 'str',
        'place_in_folder': 'str',
        'variables': 'list[RuleVariable]'
    }

    attribute_map = {
        'action_fails_behaviour': 'actionFailsBehaviour',
        'folder_name': 'folderName',
        'hold': 'hold',
        'run_now': 'runNow',
        'job_name': 'jobName',
        'place_in_folder': 'placeInFolder',
        'variables': 'variables'
    }

    def __init__(self, action_fails_behaviour=None, folder_name=None, hold=None, run_now=None, job_name=None, place_in_folder=None, variables=None):  # noqa: E501
        """RunFolderJobActionData - a model defined in Swagger"""  # noqa: E501
        self._action_fails_behaviour = None
        self._folder_name = None
        self._hold = None
        self._run_now = None
        self._job_name = None
        self._place_in_folder = None
        self._variables = None
        self.discriminator = None
        if action_fails_behaviour is not None:
            self.action_fails_behaviour = action_fails_behaviour
        if folder_name is not None:
            self.folder_name = folder_name
        if hold is not None:
            self.hold = hold
        if run_now is not None:
            self.run_now = run_now
        if job_name is not None:
            self.job_name = job_name
        if place_in_folder is not None:
            self.place_in_folder = place_in_folder
        if variables is not None:
            self.variables = variables

    @property
    def action_fails_behaviour(self):
        """Gets the action_fails_behaviour of this RunFolderJobActionData.  # noqa: E501


        :return: The action_fails_behaviour of this RunFolderJobActionData.  # noqa: E501
        :rtype: ActionFailsBehaviourData
        """
        return self._action_fails_behaviour

    @action_fails_behaviour.setter
    def action_fails_behaviour(self, action_fails_behaviour):
        """Sets the action_fails_behaviour of this RunFolderJobActionData.


        :param action_fails_behaviour: The action_fails_behaviour of this RunFolderJobActionData.  # noqa: E501
        :type: ActionFailsBehaviourData
        """

        self._action_fails_behaviour = action_fails_behaviour

    @property
    def folder_name(self):
        """Gets the folder_name of this RunFolderJobActionData.  # noqa: E501

        folder name  # noqa: E501

        :return: The folder_name of this RunFolderJobActionData.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this RunFolderJobActionData.

        folder name  # noqa: E501

        :param folder_name: The folder_name of this RunFolderJobActionData.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def hold(self):
        """Gets the hold of this RunFolderJobActionData.  # noqa: E501

        is hold  # noqa: E501

        :return: The hold of this RunFolderJobActionData.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this RunFolderJobActionData.

        is hold  # noqa: E501

        :param hold: The hold of this RunFolderJobActionData.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def run_now(self):
        """Gets the run_now of this RunFolderJobActionData.  # noqa: E501

        is order now  # noqa: E501

        :return: The run_now of this RunFolderJobActionData.  # noqa: E501
        :rtype: bool
        """
        return self._run_now

    @run_now.setter
    def run_now(self, run_now):
        """Sets the run_now of this RunFolderJobActionData.

        is order now  # noqa: E501

        :param run_now: The run_now of this RunFolderJobActionData.  # noqa: E501
        :type: bool
        """

        self._run_now = run_now

    @property
    def job_name(self):
        """Gets the job_name of this RunFolderJobActionData.  # noqa: E501

        job name  # noqa: E501

        :return: The job_name of this RunFolderJobActionData.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this RunFolderJobActionData.

        job name  # noqa: E501

        :param job_name: The job_name of this RunFolderJobActionData.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def place_in_folder(self):
        """Gets the place_in_folder of this RunFolderJobActionData.  # noqa: E501

        into Folder Run Id  # noqa: E501

        :return: The place_in_folder of this RunFolderJobActionData.  # noqa: E501
        :rtype: str
        """
        return self._place_in_folder

    @place_in_folder.setter
    def place_in_folder(self, place_in_folder):
        """Sets the place_in_folder of this RunFolderJobActionData.

        into Folder Run Id  # noqa: E501

        :param place_in_folder: The place_in_folder of this RunFolderJobActionData.  # noqa: E501
        :type: str
        """

        self._place_in_folder = place_in_folder

    @property
    def variables(self):
        """Gets the variables of this RunFolderJobActionData.  # noqa: E501


        :return: The variables of this RunFolderJobActionData.  # noqa: E501
        :rtype: list[RuleVariable]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this RunFolderJobActionData.


        :param variables: The variables of this RunFolderJobActionData.  # noqa: E501
        :type: list[RuleVariable]
        """

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunFolderJobActionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunFolderJobActionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
