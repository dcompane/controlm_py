# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultsStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_usage': 'bool',
        'message': 'str',
        'messages': 'list[str]',
        'return_code': 'int'
    }

    attribute_map = {
        'display_usage': 'display_usage',
        'message': 'message',
        'messages': 'messages',
        'return_code': 'return_code'
    }

    def __init__(self, display_usage=None, message=None, messages=None, return_code=None):  # noqa: E501
        """ResultsStatus - a model defined in Swagger"""  # noqa: E501
        self._display_usage = None
        self._message = None
        self._messages = None
        self._return_code = None
        self.discriminator = None
        if display_usage is not None:
            self.display_usage = display_usage
        if message is not None:
            self.message = message
        if messages is not None:
            self.messages = messages
        if return_code is not None:
            self.return_code = return_code

    @property
    def display_usage(self):
        """Gets the display_usage of this ResultsStatus.  # noqa: E501


        :return: The display_usage of this ResultsStatus.  # noqa: E501
        :rtype: bool
        """
        return self._display_usage

    @display_usage.setter
    def display_usage(self, display_usage):
        """Sets the display_usage of this ResultsStatus.


        :param display_usage: The display_usage of this ResultsStatus.  # noqa: E501
        :type: bool
        """

        self._display_usage = display_usage

    @property
    def message(self):
        """Gets the message of this ResultsStatus.  # noqa: E501


        :return: The message of this ResultsStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResultsStatus.


        :param message: The message of this ResultsStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def messages(self):
        """Gets the messages of this ResultsStatus.  # noqa: E501


        :return: The messages of this ResultsStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ResultsStatus.


        :param messages: The messages of this ResultsStatus.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def return_code(self):
        """Gets the return_code of this ResultsStatus.  # noqa: E501


        :return: The return_code of this ResultsStatus.  # noqa: E501
        :rtype: int
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this ResultsStatus.


        :param return_code: The return_code of this ResultsStatus.  # noqa: E501
        :type: int
        """

        self._return_code = return_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultsStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
