# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BypassOptionAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_limits': 'bool',
        'wait_for_events': 'bool',
        'resources_from_pool': 'bool',
        'lock_resources': 'bool',
        'workload_policy_and_host_restrictions': 'bool',
        'scheduling_environment': 'bool',
        'pipes': 'bool',
        'pause': 'bool',
        'run_job_as_dummy': 'bool',
        'run_job_without_post_processing': 'bool'
    }

    attribute_map = {
        'time_limits': 'timeLimits',
        'wait_for_events': 'waitForEvents',
        'resources_from_pool': 'resourcesFromPool',
        'lock_resources': 'lockResources',
        'workload_policy_and_host_restrictions': 'workloadPolicyAndHostRestrictions',
        'scheduling_environment': 'schedulingEnvironment',
        'pipes': 'pipes',
        'pause': 'pause',
        'run_job_as_dummy': 'runJobAsDummy',
        'run_job_without_post_processing': 'runJobWithoutPostProcessing'
    }

    def __init__(self, time_limits=None, wait_for_events=None, resources_from_pool=None, lock_resources=None, workload_policy_and_host_restrictions=None, scheduling_environment=None, pipes=None, pause=None, run_job_as_dummy=None, run_job_without_post_processing=None):  # noqa: E501
        """BypassOptionAttributes - a model defined in Swagger"""  # noqa: E501
        self._time_limits = None
        self._wait_for_events = None
        self._resources_from_pool = None
        self._lock_resources = None
        self._workload_policy_and_host_restrictions = None
        self._scheduling_environment = None
        self._pipes = None
        self._pause = None
        self._run_job_as_dummy = None
        self._run_job_without_post_processing = None
        self.discriminator = None
        if time_limits is not None:
            self.time_limits = time_limits
        if wait_for_events is not None:
            self.wait_for_events = wait_for_events
        if resources_from_pool is not None:
            self.resources_from_pool = resources_from_pool
        if lock_resources is not None:
            self.lock_resources = lock_resources
        if workload_policy_and_host_restrictions is not None:
            self.workload_policy_and_host_restrictions = workload_policy_and_host_restrictions
        if scheduling_environment is not None:
            self.scheduling_environment = scheduling_environment
        if pipes is not None:
            self.pipes = pipes
        if pause is not None:
            self.pause = pause
        if run_job_as_dummy is not None:
            self.run_job_as_dummy = run_job_as_dummy
        if run_job_without_post_processing is not None:
            self.run_job_without_post_processing = run_job_without_post_processing

    @property
    def time_limits(self):
        """Gets the time_limits of this BypassOptionAttributes.  # noqa: E501


        :return: The time_limits of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._time_limits

    @time_limits.setter
    def time_limits(self, time_limits):
        """Sets the time_limits of this BypassOptionAttributes.


        :param time_limits: The time_limits of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._time_limits = time_limits

    @property
    def wait_for_events(self):
        """Gets the wait_for_events of this BypassOptionAttributes.  # noqa: E501


        :return: The wait_for_events of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._wait_for_events

    @wait_for_events.setter
    def wait_for_events(self, wait_for_events):
        """Sets the wait_for_events of this BypassOptionAttributes.


        :param wait_for_events: The wait_for_events of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._wait_for_events = wait_for_events

    @property
    def resources_from_pool(self):
        """Gets the resources_from_pool of this BypassOptionAttributes.  # noqa: E501


        :return: The resources_from_pool of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._resources_from_pool

    @resources_from_pool.setter
    def resources_from_pool(self, resources_from_pool):
        """Sets the resources_from_pool of this BypassOptionAttributes.


        :param resources_from_pool: The resources_from_pool of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._resources_from_pool = resources_from_pool

    @property
    def lock_resources(self):
        """Gets the lock_resources of this BypassOptionAttributes.  # noqa: E501


        :return: The lock_resources of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._lock_resources

    @lock_resources.setter
    def lock_resources(self, lock_resources):
        """Sets the lock_resources of this BypassOptionAttributes.


        :param lock_resources: The lock_resources of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._lock_resources = lock_resources

    @property
    def workload_policy_and_host_restrictions(self):
        """Gets the workload_policy_and_host_restrictions of this BypassOptionAttributes.  # noqa: E501


        :return: The workload_policy_and_host_restrictions of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._workload_policy_and_host_restrictions

    @workload_policy_and_host_restrictions.setter
    def workload_policy_and_host_restrictions(self, workload_policy_and_host_restrictions):
        """Sets the workload_policy_and_host_restrictions of this BypassOptionAttributes.


        :param workload_policy_and_host_restrictions: The workload_policy_and_host_restrictions of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._workload_policy_and_host_restrictions = workload_policy_and_host_restrictions

    @property
    def scheduling_environment(self):
        """Gets the scheduling_environment of this BypassOptionAttributes.  # noqa: E501


        :return: The scheduling_environment of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._scheduling_environment

    @scheduling_environment.setter
    def scheduling_environment(self, scheduling_environment):
        """Sets the scheduling_environment of this BypassOptionAttributes.


        :param scheduling_environment: The scheduling_environment of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._scheduling_environment = scheduling_environment

    @property
    def pipes(self):
        """Gets the pipes of this BypassOptionAttributes.  # noqa: E501


        :return: The pipes of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._pipes

    @pipes.setter
    def pipes(self, pipes):
        """Sets the pipes of this BypassOptionAttributes.


        :param pipes: The pipes of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._pipes = pipes

    @property
    def pause(self):
        """Gets the pause of this BypassOptionAttributes.  # noqa: E501


        :return: The pause of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._pause

    @pause.setter
    def pause(self, pause):
        """Sets the pause of this BypassOptionAttributes.


        :param pause: The pause of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._pause = pause

    @property
    def run_job_as_dummy(self):
        """Gets the run_job_as_dummy of this BypassOptionAttributes.  # noqa: E501


        :return: The run_job_as_dummy of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._run_job_as_dummy

    @run_job_as_dummy.setter
    def run_job_as_dummy(self, run_job_as_dummy):
        """Sets the run_job_as_dummy of this BypassOptionAttributes.


        :param run_job_as_dummy: The run_job_as_dummy of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._run_job_as_dummy = run_job_as_dummy

    @property
    def run_job_without_post_processing(self):
        """Gets the run_job_without_post_processing of this BypassOptionAttributes.  # noqa: E501


        :return: The run_job_without_post_processing of this BypassOptionAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._run_job_without_post_processing

    @run_job_without_post_processing.setter
    def run_job_without_post_processing(self, run_job_without_post_processing):
        """Sets the run_job_without_post_processing of this BypassOptionAttributes.


        :param run_job_without_post_processing: The run_job_without_post_processing of this BypassOptionAttributes.  # noqa: E501
        :type: bool
        """

        self._run_job_without_post_processing = run_job_without_post_processing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BypassOptionAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BypassOptionAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
