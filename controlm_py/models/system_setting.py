# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'saml2_identity_provider': 'Saml2IdentityProvider',
        'ldap_settings': 'SystemSettingLdap',
        'new_day_time': 'SystemSettingProperty',
        'first_day_of_the_week': 'SystemSettingProperty',
        'site_interface_language': 'SystemSettingProperty',
        'environment_banner_color': 'SystemSettingProperty',
        'enabled_vault_providers': 'SystemSettingProperty',
        'environment_title': 'SystemSettingProperty',
        'environment_description': 'SystemSettingProperty',
        'enforce_site_standards': 'SystemSettingProperty',
        'strictnesslevel': 'SystemSettingProperty',
        'history_retention_days': 'SystemSettingProperty',
        'privacy_notice_url': 'SystemSettingProperty',
        'allow_duplicate_job_names': 'SystemSettingProperty',
        'enable_external_alerts': 'SystemSettingProperty',
        'cms_comm_mode': 'SystemSettingProperty',
        'user_audit_annotation': 'SystemSettingProperty',
        'annotations': 'SystemSettingAnnotationProperty',
        'additional_parameters': 'KeyValueListResult',
        'errors': 'list[ErrorData]'
    }

    attribute_map = {
        'saml2_identity_provider': 'saml2IdentityProvider',
        'ldap_settings': 'ldapSettings',
        'new_day_time': 'newDayTime',
        'first_day_of_the_week': 'firstDayOfTheWeek',
        'site_interface_language': 'siteInterfaceLanguage',
        'environment_banner_color': 'environmentBannerColor',
        'enabled_vault_providers': 'enabledVaultProviders',
        'environment_title': 'environmentTitle',
        'environment_description': 'environmentDescription',
        'enforce_site_standards': 'enforceSiteStandards',
        'strictnesslevel': 'strictnesslevel',
        'history_retention_days': 'historyRetentionDays',
        'privacy_notice_url': 'privacyNoticeURL',
        'allow_duplicate_job_names': 'allowDuplicateJobNames',
        'enable_external_alerts': 'enableExternalAlerts',
        'cms_comm_mode': 'cmsCommMode',
        'user_audit_annotation': 'userAuditAnnotation',
        'annotations': 'annotations',
        'additional_parameters': 'additionalParameters',
        'errors': 'errors'
    }

    def __init__(self, saml2_identity_provider=None, ldap_settings=None, new_day_time=None, first_day_of_the_week=None, site_interface_language=None, environment_banner_color=None, enabled_vault_providers=None, environment_title=None, environment_description=None, enforce_site_standards=None, strictnesslevel=None, history_retention_days=None, privacy_notice_url=None, allow_duplicate_job_names=None, enable_external_alerts=None, cms_comm_mode=None, user_audit_annotation=None, annotations=None, additional_parameters=None, errors=None):  # noqa: E501
        """SystemSetting - a model defined in Swagger"""  # noqa: E501
        self._saml2_identity_provider = None
        self._ldap_settings = None
        self._new_day_time = None
        self._first_day_of_the_week = None
        self._site_interface_language = None
        self._environment_banner_color = None
        self._enabled_vault_providers = None
        self._environment_title = None
        self._environment_description = None
        self._enforce_site_standards = None
        self._strictnesslevel = None
        self._history_retention_days = None
        self._privacy_notice_url = None
        self._allow_duplicate_job_names = None
        self._enable_external_alerts = None
        self._cms_comm_mode = None
        self._user_audit_annotation = None
        self._annotations = None
        self._additional_parameters = None
        self._errors = None
        self.discriminator = None
        if saml2_identity_provider is not None:
            self.saml2_identity_provider = saml2_identity_provider
        if ldap_settings is not None:
            self.ldap_settings = ldap_settings
        if new_day_time is not None:
            self.new_day_time = new_day_time
        if first_day_of_the_week is not None:
            self.first_day_of_the_week = first_day_of_the_week
        if site_interface_language is not None:
            self.site_interface_language = site_interface_language
        if environment_banner_color is not None:
            self.environment_banner_color = environment_banner_color
        if enabled_vault_providers is not None:
            self.enabled_vault_providers = enabled_vault_providers
        if environment_title is not None:
            self.environment_title = environment_title
        if environment_description is not None:
            self.environment_description = environment_description
        if enforce_site_standards is not None:
            self.enforce_site_standards = enforce_site_standards
        if strictnesslevel is not None:
            self.strictnesslevel = strictnesslevel
        if history_retention_days is not None:
            self.history_retention_days = history_retention_days
        if privacy_notice_url is not None:
            self.privacy_notice_url = privacy_notice_url
        if allow_duplicate_job_names is not None:
            self.allow_duplicate_job_names = allow_duplicate_job_names
        if enable_external_alerts is not None:
            self.enable_external_alerts = enable_external_alerts
        if cms_comm_mode is not None:
            self.cms_comm_mode = cms_comm_mode
        if user_audit_annotation is not None:
            self.user_audit_annotation = user_audit_annotation
        if annotations is not None:
            self.annotations = annotations
        if additional_parameters is not None:
            self.additional_parameters = additional_parameters
        if errors is not None:
            self.errors = errors

    @property
    def saml2_identity_provider(self):
        """Gets the saml2_identity_provider of this SystemSetting.  # noqa: E501


        :return: The saml2_identity_provider of this SystemSetting.  # noqa: E501
        :rtype: Saml2IdentityProvider
        """
        return self._saml2_identity_provider

    @saml2_identity_provider.setter
    def saml2_identity_provider(self, saml2_identity_provider):
        """Sets the saml2_identity_provider of this SystemSetting.


        :param saml2_identity_provider: The saml2_identity_provider of this SystemSetting.  # noqa: E501
        :type: Saml2IdentityProvider
        """

        self._saml2_identity_provider = saml2_identity_provider

    @property
    def ldap_settings(self):
        """Gets the ldap_settings of this SystemSetting.  # noqa: E501


        :return: The ldap_settings of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingLdap
        """
        return self._ldap_settings

    @ldap_settings.setter
    def ldap_settings(self, ldap_settings):
        """Sets the ldap_settings of this SystemSetting.


        :param ldap_settings: The ldap_settings of this SystemSetting.  # noqa: E501
        :type: SystemSettingLdap
        """

        self._ldap_settings = ldap_settings

    @property
    def new_day_time(self):
        """Gets the new_day_time of this SystemSetting.  # noqa: E501


        :return: The new_day_time of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._new_day_time

    @new_day_time.setter
    def new_day_time(self, new_day_time):
        """Sets the new_day_time of this SystemSetting.


        :param new_day_time: The new_day_time of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._new_day_time = new_day_time

    @property
    def first_day_of_the_week(self):
        """Gets the first_day_of_the_week of this SystemSetting.  # noqa: E501


        :return: The first_day_of_the_week of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._first_day_of_the_week

    @first_day_of_the_week.setter
    def first_day_of_the_week(self, first_day_of_the_week):
        """Sets the first_day_of_the_week of this SystemSetting.


        :param first_day_of_the_week: The first_day_of_the_week of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._first_day_of_the_week = first_day_of_the_week

    @property
    def site_interface_language(self):
        """Gets the site_interface_language of this SystemSetting.  # noqa: E501


        :return: The site_interface_language of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._site_interface_language

    @site_interface_language.setter
    def site_interface_language(self, site_interface_language):
        """Sets the site_interface_language of this SystemSetting.


        :param site_interface_language: The site_interface_language of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._site_interface_language = site_interface_language

    @property
    def environment_banner_color(self):
        """Gets the environment_banner_color of this SystemSetting.  # noqa: E501


        :return: The environment_banner_color of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._environment_banner_color

    @environment_banner_color.setter
    def environment_banner_color(self, environment_banner_color):
        """Sets the environment_banner_color of this SystemSetting.


        :param environment_banner_color: The environment_banner_color of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._environment_banner_color = environment_banner_color

    @property
    def enabled_vault_providers(self):
        """Gets the enabled_vault_providers of this SystemSetting.  # noqa: E501


        :return: The enabled_vault_providers of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._enabled_vault_providers

    @enabled_vault_providers.setter
    def enabled_vault_providers(self, enabled_vault_providers):
        """Sets the enabled_vault_providers of this SystemSetting.


        :param enabled_vault_providers: The enabled_vault_providers of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._enabled_vault_providers = enabled_vault_providers

    @property
    def environment_title(self):
        """Gets the environment_title of this SystemSetting.  # noqa: E501


        :return: The environment_title of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._environment_title

    @environment_title.setter
    def environment_title(self, environment_title):
        """Sets the environment_title of this SystemSetting.


        :param environment_title: The environment_title of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._environment_title = environment_title

    @property
    def environment_description(self):
        """Gets the environment_description of this SystemSetting.  # noqa: E501


        :return: The environment_description of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._environment_description

    @environment_description.setter
    def environment_description(self, environment_description):
        """Sets the environment_description of this SystemSetting.


        :param environment_description: The environment_description of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._environment_description = environment_description

    @property
    def enforce_site_standards(self):
        """Gets the enforce_site_standards of this SystemSetting.  # noqa: E501


        :return: The enforce_site_standards of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._enforce_site_standards

    @enforce_site_standards.setter
    def enforce_site_standards(self, enforce_site_standards):
        """Sets the enforce_site_standards of this SystemSetting.


        :param enforce_site_standards: The enforce_site_standards of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._enforce_site_standards = enforce_site_standards

    @property
    def strictnesslevel(self):
        """Gets the strictnesslevel of this SystemSetting.  # noqa: E501


        :return: The strictnesslevel of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._strictnesslevel

    @strictnesslevel.setter
    def strictnesslevel(self, strictnesslevel):
        """Sets the strictnesslevel of this SystemSetting.


        :param strictnesslevel: The strictnesslevel of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._strictnesslevel = strictnesslevel

    @property
    def history_retention_days(self):
        """Gets the history_retention_days of this SystemSetting.  # noqa: E501


        :return: The history_retention_days of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._history_retention_days

    @history_retention_days.setter
    def history_retention_days(self, history_retention_days):
        """Sets the history_retention_days of this SystemSetting.


        :param history_retention_days: The history_retention_days of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._history_retention_days = history_retention_days

    @property
    def privacy_notice_url(self):
        """Gets the privacy_notice_url of this SystemSetting.  # noqa: E501


        :return: The privacy_notice_url of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._privacy_notice_url

    @privacy_notice_url.setter
    def privacy_notice_url(self, privacy_notice_url):
        """Sets the privacy_notice_url of this SystemSetting.


        :param privacy_notice_url: The privacy_notice_url of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._privacy_notice_url = privacy_notice_url

    @property
    def allow_duplicate_job_names(self):
        """Gets the allow_duplicate_job_names of this SystemSetting.  # noqa: E501


        :return: The allow_duplicate_job_names of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._allow_duplicate_job_names

    @allow_duplicate_job_names.setter
    def allow_duplicate_job_names(self, allow_duplicate_job_names):
        """Sets the allow_duplicate_job_names of this SystemSetting.


        :param allow_duplicate_job_names: The allow_duplicate_job_names of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._allow_duplicate_job_names = allow_duplicate_job_names

    @property
    def enable_external_alerts(self):
        """Gets the enable_external_alerts of this SystemSetting.  # noqa: E501


        :return: The enable_external_alerts of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._enable_external_alerts

    @enable_external_alerts.setter
    def enable_external_alerts(self, enable_external_alerts):
        """Sets the enable_external_alerts of this SystemSetting.


        :param enable_external_alerts: The enable_external_alerts of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._enable_external_alerts = enable_external_alerts

    @property
    def cms_comm_mode(self):
        """Gets the cms_comm_mode of this SystemSetting.  # noqa: E501


        :return: The cms_comm_mode of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._cms_comm_mode

    @cms_comm_mode.setter
    def cms_comm_mode(self, cms_comm_mode):
        """Sets the cms_comm_mode of this SystemSetting.


        :param cms_comm_mode: The cms_comm_mode of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._cms_comm_mode = cms_comm_mode

    @property
    def user_audit_annotation(self):
        """Gets the user_audit_annotation of this SystemSetting.  # noqa: E501


        :return: The user_audit_annotation of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingProperty
        """
        return self._user_audit_annotation

    @user_audit_annotation.setter
    def user_audit_annotation(self, user_audit_annotation):
        """Sets the user_audit_annotation of this SystemSetting.


        :param user_audit_annotation: The user_audit_annotation of this SystemSetting.  # noqa: E501
        :type: SystemSettingProperty
        """

        self._user_audit_annotation = user_audit_annotation

    @property
    def annotations(self):
        """Gets the annotations of this SystemSetting.  # noqa: E501


        :return: The annotations of this SystemSetting.  # noqa: E501
        :rtype: SystemSettingAnnotationProperty
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this SystemSetting.


        :param annotations: The annotations of this SystemSetting.  # noqa: E501
        :type: SystemSettingAnnotationProperty
        """

        self._annotations = annotations

    @property
    def additional_parameters(self):
        """Gets the additional_parameters of this SystemSetting.  # noqa: E501


        :return: The additional_parameters of this SystemSetting.  # noqa: E501
        :rtype: KeyValueListResult
        """
        return self._additional_parameters

    @additional_parameters.setter
    def additional_parameters(self, additional_parameters):
        """Sets the additional_parameters of this SystemSetting.


        :param additional_parameters: The additional_parameters of this SystemSetting.  # noqa: E501
        :type: KeyValueListResult
        """

        self._additional_parameters = additional_parameters

    @property
    def errors(self):
        """Gets the errors of this SystemSetting.  # noqa: E501


        :return: The errors of this SystemSetting.  # noqa: E501
        :rtype: list[ErrorData]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SystemSetting.


        :param errors: The errors of this SystemSetting.  # noqa: E501
        :type: list[ErrorData]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
