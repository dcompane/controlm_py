# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileSizeConditionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_size': 'str',
        'max_units': 'str',
        'min_size': 'str',
        'min_units': 'str'
    }

    attribute_map = {
        'max_size': 'maxSize',
        'max_units': 'maxUnits',
        'min_size': 'minSize',
        'min_units': 'minUnits'
    }

    def __init__(self, max_size=None, max_units=None, min_size=None, min_units=None):  # noqa: E501
        """FileSizeConditionData - a model defined in Swagger"""  # noqa: E501
        self._max_size = None
        self._max_units = None
        self._min_size = None
        self._min_units = None
        self.discriminator = None
        if max_size is not None:
            self.max_size = max_size
        if max_units is not None:
            self.max_units = max_units
        if min_size is not None:
            self.min_size = min_size
        if min_units is not None:
            self.min_units = min_units

    @property
    def max_size(self):
        """Gets the max_size of this FileSizeConditionData.  # noqa: E501

        max file size  # noqa: E501

        :return: The max_size of this FileSizeConditionData.  # noqa: E501
        :rtype: str
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this FileSizeConditionData.

        max file size  # noqa: E501

        :param max_size: The max_size of this FileSizeConditionData.  # noqa: E501
        :type: str
        """

        self._max_size = max_size

    @property
    def max_units(self):
        """Gets the max_units of this FileSizeConditionData.  # noqa: E501

        max units  # noqa: E501

        :return: The max_units of this FileSizeConditionData.  # noqa: E501
        :rtype: str
        """
        return self._max_units

    @max_units.setter
    def max_units(self, max_units):
        """Sets the max_units of this FileSizeConditionData.

        max units  # noqa: E501

        :param max_units: The max_units of this FileSizeConditionData.  # noqa: E501
        :type: str
        """

        self._max_units = max_units

    @property
    def min_size(self):
        """Gets the min_size of this FileSizeConditionData.  # noqa: E501

        min file size  # noqa: E501

        :return: The min_size of this FileSizeConditionData.  # noqa: E501
        :rtype: str
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this FileSizeConditionData.

        min file size  # noqa: E501

        :param min_size: The min_size of this FileSizeConditionData.  # noqa: E501
        :type: str
        """

        self._min_size = min_size

    @property
    def min_units(self):
        """Gets the min_units of this FileSizeConditionData.  # noqa: E501

        min units  # noqa: E501

        :return: The min_units of this FileSizeConditionData.  # noqa: E501
        :rtype: str
        """
        return self._min_units

    @min_units.setter
    def min_units(self, min_units):
        """Sets the min_units of this FileSizeConditionData.

        min units  # noqa: E501

        :param min_units: The min_units of this FileSizeConditionData.  # noqa: E501
        :type: str
        """

        self._min_units = min_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSizeConditionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSizeConditionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
