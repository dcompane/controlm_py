# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecretDescriptors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'provider_api_label': 'str',
        'provider_web_label': 'str',
        'vault_params': 'list[VaultParam]'
    }

    attribute_map = {
        'provider': 'provider',
        'provider_api_label': 'providerApiLabel',
        'provider_web_label': 'providerWebLabel',
        'vault_params': 'vaultParams'
    }

    def __init__(self, provider=None, provider_api_label=None, provider_web_label=None, vault_params=None):  # noqa: E501
        """SecretDescriptors - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._provider_api_label = None
        self._provider_web_label = None
        self._vault_params = None
        self.discriminator = None
        if provider is not None:
            self.provider = provider
        if provider_api_label is not None:
            self.provider_api_label = provider_api_label
        if provider_web_label is not None:
            self.provider_web_label = provider_web_label
        if vault_params is not None:
            self.vault_params = vault_params

    @property
    def provider(self):
        """Gets the provider of this SecretDescriptors.  # noqa: E501

        vault provider name  # noqa: E501

        :return: The provider of this SecretDescriptors.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SecretDescriptors.

        vault provider name  # noqa: E501

        :param provider: The provider of this SecretDescriptors.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def provider_api_label(self):
        """Gets the provider_api_label of this SecretDescriptors.  # noqa: E501

        Vault provider name of the parameter in Automation API  # noqa: E501

        :return: The provider_api_label of this SecretDescriptors.  # noqa: E501
        :rtype: str
        """
        return self._provider_api_label

    @provider_api_label.setter
    def provider_api_label(self, provider_api_label):
        """Sets the provider_api_label of this SecretDescriptors.

        Vault provider name of the parameter in Automation API  # noqa: E501

        :param provider_api_label: The provider_api_label of this SecretDescriptors.  # noqa: E501
        :type: str
        """

        self._provider_api_label = provider_api_label

    @property
    def provider_web_label(self):
        """Gets the provider_web_label of this SecretDescriptors.  # noqa: E501

        Vault provider displayed name of the parameter in Web  # noqa: E501

        :return: The provider_web_label of this SecretDescriptors.  # noqa: E501
        :rtype: str
        """
        return self._provider_web_label

    @provider_web_label.setter
    def provider_web_label(self, provider_web_label):
        """Sets the provider_web_label of this SecretDescriptors.

        Vault provider displayed name of the parameter in Web  # noqa: E501

        :param provider_web_label: The provider_web_label of this SecretDescriptors.  # noqa: E501
        :type: str
        """

        self._provider_web_label = provider_web_label

    @property
    def vault_params(self):
        """Gets the vault_params of this SecretDescriptors.  # noqa: E501


        :return: The vault_params of this SecretDescriptors.  # noqa: E501
        :rtype: list[VaultParam]
        """
        return self._vault_params

    @vault_params.setter
    def vault_params(self, vault_params):
        """Sets the vault_params of this SecretDescriptors.


        :param vault_params: The vault_params of this SecretDescriptors.  # noqa: E501
        :type: list[VaultParam]
        """

        self._vault_params = vault_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretDescriptors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretDescriptors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
