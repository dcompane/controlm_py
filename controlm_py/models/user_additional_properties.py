# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserAdditionalProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_of_groups': 'list[str]',
        'authentication': 'AuthenticationData',
        'is_external_user': 'bool'
    }

    attribute_map = {
        'member_of_groups': 'memberOfGroups',
        'authentication': 'authentication',
        'is_external_user': 'isExternalUser'
    }

    def __init__(self, member_of_groups=None, authentication=None, is_external_user=None):  # noqa: E501
        """UserAdditionalProperties - a model defined in Swagger"""  # noqa: E501
        self._member_of_groups = None
        self._authentication = None
        self._is_external_user = None
        self.discriminator = None
        if member_of_groups is not None:
            self.member_of_groups = member_of_groups
        if authentication is not None:
            self.authentication = authentication
        if is_external_user is not None:
            self.is_external_user = is_external_user

    @property
    def member_of_groups(self):
        """Gets the member_of_groups of this UserAdditionalProperties.  # noqa: E501

        List of role names  # noqa: E501

        :return: The member_of_groups of this UserAdditionalProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_of_groups

    @member_of_groups.setter
    def member_of_groups(self, member_of_groups):
        """Sets the member_of_groups of this UserAdditionalProperties.

        List of role names  # noqa: E501

        :param member_of_groups: The member_of_groups of this UserAdditionalProperties.  # noqa: E501
        :type: list[str]
        """

        self._member_of_groups = member_of_groups

    @property
    def authentication(self):
        """Gets the authentication of this UserAdditionalProperties.  # noqa: E501


        :return: The authentication of this UserAdditionalProperties.  # noqa: E501
        :rtype: AuthenticationData
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this UserAdditionalProperties.


        :param authentication: The authentication of this UserAdditionalProperties.  # noqa: E501
        :type: AuthenticationData
        """

        self._authentication = authentication

    @property
    def is_external_user(self):
        """Gets the is_external_user of this UserAdditionalProperties.  # noqa: E501


        :return: The is_external_user of this UserAdditionalProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_external_user

    @is_external_user.setter
    def is_external_user(self, is_external_user):
        """Sets the is_external_user of this UserAdditionalProperties.


        :param is_external_user: The is_external_user of this UserAdditionalProperties.  # noqa: E501
        :type: bool
        """

        self._is_external_user = is_external_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAdditionalProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAdditionalProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
