# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MFTExternalUserProjectionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'company': 'str',
        'is_locked': 'bool',
        'lock_reason': 'str',
        'allowed_folders_names': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'company': 'company',
        'is_locked': 'isLocked',
        'lock_reason': 'lockReason',
        'allowed_folders_names': 'allowedFoldersNames'
    }

    def __init__(self, name=None, company=None, is_locked=None, lock_reason=None, allowed_folders_names=None):  # noqa: E501
        """MFTExternalUserProjectionData - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._company = None
        self._is_locked = None
        self._lock_reason = None
        self._allowed_folders_names = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if company is not None:
            self.company = company
        if is_locked is not None:
            self.is_locked = is_locked
        if lock_reason is not None:
            self.lock_reason = lock_reason
        if allowed_folders_names is not None:
            self.allowed_folders_names = allowed_folders_names

    @property
    def name(self):
        """Gets the name of this MFTExternalUserProjectionData.  # noqa: E501

        external user name  # noqa: E501

        :return: The name of this MFTExternalUserProjectionData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MFTExternalUserProjectionData.

        external user name  # noqa: E501

        :param name: The name of this MFTExternalUserProjectionData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def company(self):
        """Gets the company of this MFTExternalUserProjectionData.  # noqa: E501

        user's company  # noqa: E501

        :return: The company of this MFTExternalUserProjectionData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this MFTExternalUserProjectionData.

        user's company  # noqa: E501

        :param company: The company of this MFTExternalUserProjectionData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def is_locked(self):
        """Gets the is_locked of this MFTExternalUserProjectionData.  # noqa: E501

        indicates whether the user account is locked  # noqa: E501

        :return: The is_locked of this MFTExternalUserProjectionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this MFTExternalUserProjectionData.

        indicates whether the user account is locked  # noqa: E501

        :param is_locked: The is_locked of this MFTExternalUserProjectionData.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def lock_reason(self):
        """Gets the lock_reason of this MFTExternalUserProjectionData.  # noqa: E501

        provides the reason for locking the user account  # noqa: E501

        :return: The lock_reason of this MFTExternalUserProjectionData.  # noqa: E501
        :rtype: str
        """
        return self._lock_reason

    @lock_reason.setter
    def lock_reason(self, lock_reason):
        """Sets the lock_reason of this MFTExternalUserProjectionData.

        provides the reason for locking the user account  # noqa: E501

        :param lock_reason: The lock_reason of this MFTExternalUserProjectionData.  # noqa: E501
        :type: str
        """

        self._lock_reason = lock_reason

    @property
    def allowed_folders_names(self):
        """Gets the allowed_folders_names of this MFTExternalUserProjectionData.  # noqa: E501

        users's allowed folder names  # noqa: E501

        :return: The allowed_folders_names of this MFTExternalUserProjectionData.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_folders_names

    @allowed_folders_names.setter
    def allowed_folders_names(self, allowed_folders_names):
        """Sets the allowed_folders_names of this MFTExternalUserProjectionData.

        users's allowed folder names  # noqa: E501

        :param allowed_folders_names: The allowed_folders_names of this MFTExternalUserProjectionData.  # noqa: E501
        :type: list[str]
        """

        self._allowed_folders_names = allowed_folders_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MFTExternalUserProjectionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MFTExternalUserProjectionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
