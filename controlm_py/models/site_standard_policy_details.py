# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteStandardPolicyDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'created_time': 'str',
        'updated_time': 'str',
        'username': 'str',
        'site_standard': 'str',
        'status': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'created_time': 'createdTime',
        'updated_time': 'updatedTime',
        'username': 'username',
        'site_standard': 'siteStandard',
        'status': 'status'
    }

    def __init__(self, name=None, description=None, created_time=None, updated_time=None, username=None, site_standard=None, status=None):  # noqa: E501
        """SiteStandardPolicyDetails - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._created_time = None
        self._updated_time = None
        self._username = None
        self._site_standard = None
        self._status = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if created_time is not None:
            self.created_time = created_time
        if updated_time is not None:
            self.updated_time = updated_time
        if username is not None:
            self.username = username
        if site_standard is not None:
            self.site_standard = site_standard
        if status is not None:
            self.status = status

    @property
    def name(self):
        """Gets the name of this SiteStandardPolicyDetails.  # noqa: E501


        :return: The name of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteStandardPolicyDetails.


        :param name: The name of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this SiteStandardPolicyDetails.  # noqa: E501


        :return: The description of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SiteStandardPolicyDetails.


        :param description: The description of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_time(self):
        """Gets the created_time of this SiteStandardPolicyDetails.  # noqa: E501

        the time the item was created on (in UTC, in ISO 8601 format)  # noqa: E501

        :return: The created_time of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this SiteStandardPolicyDetails.

        the time the item was created on (in UTC, in ISO 8601 format)  # noqa: E501

        :param created_time: The created_time of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def updated_time(self):
        """Gets the updated_time of this SiteStandardPolicyDetails.  # noqa: E501

        the time the item was last updated (in UTC, in ISO 8601 format)  # noqa: E501

        :return: The updated_time of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this SiteStandardPolicyDetails.

        the time the item was last updated (in UTC, in ISO 8601 format)  # noqa: E501

        :param updated_time: The updated_time of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._updated_time = updated_time

    @property
    def username(self):
        """Gets the username of this SiteStandardPolicyDetails.  # noqa: E501

        the username of the last user that updated the item  # noqa: E501

        :return: The username of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SiteStandardPolicyDetails.

        the username of the last user that updated the item  # noqa: E501

        :param username: The username of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def site_standard(self):
        """Gets the site_standard of this SiteStandardPolicyDetails.  # noqa: E501

        the Site Standard Name associested with this policy  # noqa: E501

        :return: The site_standard of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._site_standard

    @site_standard.setter
    def site_standard(self, site_standard):
        """Sets the site_standard of this SiteStandardPolicyDetails.

        the Site Standard Name associested with this policy  # noqa: E501

        :param site_standard: The site_standard of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._site_standard = site_standard

    @property
    def status(self):
        """Gets the status of this SiteStandardPolicyDetails.  # noqa: E501

        the status of the Site Standard Policy  # noqa: E501

        :return: The status of this SiteStandardPolicyDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SiteStandardPolicyDetails.

        the status of the Site Standard Policy  # noqa: E501

        :param status: The status of this SiteStandardPolicyDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteStandardPolicyDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteStandardPolicyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
