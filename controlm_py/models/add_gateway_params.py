# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddGatewayParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ctm_name': 'str',
        'host': 'str',
        'desired_state': 'str',
        'check_interval': 'int',
        'additional_parameters': 'str'
    }

    attribute_map = {
        'ctm_name': 'ctmName',
        'host': 'host',
        'desired_state': 'desiredState',
        'check_interval': 'checkInterval',
        'additional_parameters': 'additionalParameters'
    }

    def __init__(self, ctm_name=None, host=None, desired_state=None, check_interval=None, additional_parameters=None):  # noqa: E501
        """AddGatewayParams - a model defined in Swagger"""  # noqa: E501
        self._ctm_name = None
        self._host = None
        self._desired_state = None
        self._check_interval = None
        self._additional_parameters = None
        self.discriminator = None
        self.ctm_name = ctm_name
        self.host = host
        if desired_state is not None:
            self.desired_state = desired_state
        if check_interval is not None:
            self.check_interval = check_interval
        if additional_parameters is not None:
            self.additional_parameters = additional_parameters

    @property
    def ctm_name(self):
        """Gets the ctm_name of this AddGatewayParams.  # noqa: E501

        The CTM Server name.  # noqa: E501

        :return: The ctm_name of this AddGatewayParams.  # noqa: E501
        :rtype: str
        """
        return self._ctm_name

    @ctm_name.setter
    def ctm_name(self, ctm_name):
        """Sets the ctm_name of this AddGatewayParams.

        The CTM Server name.  # noqa: E501

        :param ctm_name: The ctm_name of this AddGatewayParams.  # noqa: E501
        :type: str
        """
        if ctm_name is None:
            raise ValueError("Invalid value for `ctm_name`, must not be `None`")  # noqa: E501

        self._ctm_name = ctm_name

    @property
    def host(self):
        """Gets the host of this AddGatewayParams.  # noqa: E501

        The Gateway is hosted on.  # noqa: E501

        :return: The host of this AddGatewayParams.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this AddGatewayParams.

        The Gateway is hosted on.  # noqa: E501

        :param host: The host of this AddGatewayParams.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def desired_state(self):
        """Gets the desired_state of this AddGatewayParams.  # noqa: E501

        The desired state for the created gateway (\"Up\" | \"Down\" | \"Ignored\").  # noqa: E501

        :return: The desired_state of this AddGatewayParams.  # noqa: E501
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this AddGatewayParams.

        The desired state for the created gateway (\"Up\" | \"Down\" | \"Ignored\").  # noqa: E501

        :param desired_state: The desired_state of this AddGatewayParams.  # noqa: E501
        :type: str
        """

        self._desired_state = desired_state

    @property
    def check_interval(self):
        """Gets the check_interval of this AddGatewayParams.  # noqa: E501

        Gateway check interval time, optional. defaults to 20  # noqa: E501

        :return: The check_interval of this AddGatewayParams.  # noqa: E501
        :rtype: int
        """
        return self._check_interval

    @check_interval.setter
    def check_interval(self, check_interval):
        """Sets the check_interval of this AddGatewayParams.

        Gateway check interval time, optional. defaults to 20  # noqa: E501

        :param check_interval: The check_interval of this AddGatewayParams.  # noqa: E501
        :type: int
        """

        self._check_interval = check_interval

    @property
    def additional_parameters(self):
        """Gets the additional_parameters of this AddGatewayParams.  # noqa: E501

        Optional, additional parameters to send to Gateway.  # noqa: E501

        :return: The additional_parameters of this AddGatewayParams.  # noqa: E501
        :rtype: str
        """
        return self._additional_parameters

    @additional_parameters.setter
    def additional_parameters(self, additional_parameters):
        """Sets the additional_parameters of this AddGatewayParams.

        Optional, additional parameters to send to Gateway.  # noqa: E501

        :param additional_parameters: The additional_parameters of this AddGatewayParams.  # noqa: E501
        :type: str
        """

        self._additional_parameters = additional_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddGatewayParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddGatewayParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
