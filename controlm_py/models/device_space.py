# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.21.340
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceSpace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'size': 'str',
        'free': 'str',
        'used': 'str',
        'used_percentage': 'str',
        'location': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'size': 'size',
        'free': 'free',
        'used': 'used',
        'used_percentage': 'usedPercentage',
        'location': 'location'
    }

    def __init__(self, name=None, type=None, size=None, free=None, used=None, used_percentage=None, location=None):  # noqa: E501
        """DeviceSpace - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._size = None
        self._free = None
        self._used = None
        self._used_percentage = None
        self._location = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if size is not None:
            self.size = size
        if free is not None:
            self.free = free
        if used is not None:
            self.used = used
        if used_percentage is not None:
            self.used_percentage = used_percentage
        if location is not None:
            self.location = location

    @property
    def name(self):
        """Gets the name of this DeviceSpace.  # noqa: E501


        :return: The name of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSpace.


        :param name: The name of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DeviceSpace.  # noqa: E501


        :return: The type of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceSpace.


        :param type: The type of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def size(self):
        """Gets the size of this DeviceSpace.  # noqa: E501

        Service version  # noqa: E501

        :return: The size of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DeviceSpace.

        Service version  # noqa: E501

        :param size: The size of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def free(self):
        """Gets the free of this DeviceSpace.  # noqa: E501

        Service Operating System  # noqa: E501

        :return: The free of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this DeviceSpace.

        Service Operating System  # noqa: E501

        :param free: The free of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._free = free

    @property
    def used(self):
        """Gets the used of this DeviceSpace.  # noqa: E501

        Service desired state  # noqa: E501

        :return: The used of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this DeviceSpace.

        Service desired state  # noqa: E501

        :param used: The used of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._used = used

    @property
    def used_percentage(self):
        """Gets the used_percentage of this DeviceSpace.  # noqa: E501


        :return: The used_percentage of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._used_percentage

    @used_percentage.setter
    def used_percentage(self, used_percentage):
        """Sets the used_percentage of this DeviceSpace.


        :param used_percentage: The used_percentage of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._used_percentage = used_percentage

    @property
    def location(self):
        """Gets the location of this DeviceSpace.  # noqa: E501


        :return: The location of this DeviceSpace.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeviceSpace.


        :param location: The location of this DeviceSpace.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSpace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSpace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
